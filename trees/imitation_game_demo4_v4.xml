<?xml version="1.0"?>
<root main_tree_to_execute="BehaviorTree">
    <!-- ////////// -->
    <BehaviorTree ID="AGHAntsLessonIntro">
        <Sequence name="Ants Lesson Intro">
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Ants Lesson: Starting"/>
            <SetBlackboard output_key="ants_lesson_n_substages" value="5"/>
            <SubTree ID="TeleconferenceON" __shared_blackboard="false"/>
            <WaitSeconds duration="1"/>
            <Sequence name="AUS TTS Ants Lesson 1">
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Ants Lesson: AUS TTS Intro"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Begining of AGH Ants Lesson" num_sub_stages="{ants_lesson_n_substages}" stage="{stage}" stage_id="{stage_id}" sub_stage="AUS Intro Question" sub_stage_id="1" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <BlackboardCheckString name="Australia" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                    <Sequence>
                        <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                        <WaitSeconds duration="0.5"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Do you see yourself more as the ant or the grasshoper? " result="tts_result"/>
                    </Sequence>
                </BlackboardCheckString>
            </Sequence>
            <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="Ants Lesson Stage Initial AUS: Wait Sync Point after AUS Speak Interaction"/>
            <BlackboardCheckString return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                <Sequence>
                    <WaitSeconds duration="0.5"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Oh! Thats great! Thank you!" result="tts_result"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Sync Point After Thank you messgae Ant or Grasshop" sync_feed="sync_feed" sync_result="sync_result"/>
            <Sequence name="JAP Comment">
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Ants Lesson Japan Comment Initial"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Ants Lesson Initial JAP comment" num_sub_stages="{ants_lesson_n_substages}" stage="{stage}" stage_id="{stage_id}" sub_stage="JAP Comment Intro" sub_stage_id="2" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <BlackboardCheckString name="Japon" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                    <Sequence>
                        <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                        <WaitSeconds duration="0.5"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="I think I am the grasshopper&#10;as I love to be social and&#10;have fun. Good thing I dont&#10;have to eat." result="tts_result"/>
                        <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                    </Sequence>
                </BlackboardCheckString>
            </Sequence>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Ants Lesson: Waiting for JAP Comment Intro" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="612"/>
            <Sequence name="AUS Presentation of Video">
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Ants Lesson Video Presentation"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Ants Lesson: AUS presents the video" num_sub_stages="{ants_lesson_n_substages}" stage="{stage}" stage_id="{stage_id}" sub_stage="AUS presents video" sub_stage_id="3" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <BlackboardCheckString return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                    <Sequence>
                        <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                        <WaitSeconds duration="0.5"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Lets look at some amazing&#10;facts about ants first. Did&#10;you know they all have&#10;specific jobs?" result="tts_result"/>
                        <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                    </Sequence>
                </BlackboardCheckString>
            </Sequence>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Ants Lesson: Waiting for AUS Comment Prevideo" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="TeleconferenceOFF" __shared_blackboard="false"/>
            <Sequence name="Both Video Projection">
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Video Soldiers and Workers"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Ants Lesson: Video Soldiers and Workers" num_sub_stages="{ants_lesson_n_substages}" stage="{stage}" stage_id="{stage_id}" sub_stage="Video Workers and Soldiers" sub_stage_id="4" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <Parallel failure_threshold="2" success_threshold="1">
                    <SubTree ID="UnityProjectorShowVideoAndWait" __shared_blackboard="false" video_file="Storytelling_AntRoles_Sequence7"/>
                    <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="AGH Ants Lesson: Skip" stage_id="{stage_id}"/>
                </Parallel>
            </Sequence>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Ants Lesson: Meetpoint After Video" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="UnityProjectorStopVideo"/>
            <SubTree ID="TeleconferenceON" __shared_blackboard="false"/>
            <WaitSeconds duration="2"/>
            <Sequence name="JAP Comment Anout Video">
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Ants Lesson: JAP postvideo comment"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Ants Lesson: Waiting for JAP Haru to finish Peaking" num_sub_stages="{ants_lesson_n_substages}" stage="{stage}" stage_id="{stage_id}" sub_stage="JAP postvideo comment" sub_stage_id="5" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <BlackboardCheckString name="Japan" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                    <Sequence>
                        <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                        <WaitSeconds duration="0.5"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="I wonder if a small ant says: I want to be a worker ant&#10;when I grow up" result="tts_result"/>
                        <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                    </Sequence>
                </BlackboardCheckString>
            </Sequence>
            <SubTree ID="EMSyncPointAndSkipButton" __shared_blackboard="false" bt_id="{bt_id}" msg_skip_ipad="Ants Lesson: Waiting for JAP to finish comment" msg_to_sync="Ants Lesson: JAP comment finished" stage_id="{stage_id}"/>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Ants Lesson: Final sync point" sync_feed="sync_feed" sync_result="sync_result"/>
            <WaitSeconds duration="1"/>
            <SubTree ID="TeleconferenceOFF" __shared_blackboard="false"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Ants Lesson Wrokers and Soldiers Over"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="AGHCultureComparison">
        <Sequence>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Culture Comparison Starting"/>
            <SetBlackboard output_key="culture_comparison_n_substages" value="6"/>
            <Sequence name="AUS Initial Comment">
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Culture Comaparison: Starting AUS Comment"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Culture Comaprison: AUS Comment" num_sub_stages="{culture_comparison_n_substages}" stage="{stage}" stage_id="{stage_id}" sub_stage="Culture Comparison: Initial AUS Comment" sub_stage_id="1" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <BlackboardCheckString name="AUS" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                    <Sequence>
                        <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                        <WaitSeconds duration="0.5"/>
                        <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Culture Comparison: AUS Initial Comment Playing"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="I have heard that people do&#10;things differently in Japan&#10;and Australia." result="tts_result"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="You know, it is&#10;the differences that makes&#10;life interestin, so I looked up what it is like&#10;to be a skilled manual&#10;worker in each country." result="tts_result"/>
                        <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                    </Sequence>
                </BlackboardCheckString>
            </Sequence>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Culture Comparison: Waiting for AUS Comment " sync_feed="sync_feed" sync_result="sync_result"/>
            <Sequence name="JAP Initial Comment">
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Culture Comaparison: Starting JAP Comment"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Culture Comaprison: JAP Comment" num_sub_stages="{culture_comparison_n_substages}" stage="{stage}" stage_id="{stage_id}" sub_stage="Culture Comparison: Initial JAP Comment" sub_stage_id="2" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <BlackboardCheckString name="JAP" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                    <Sequence>
                        <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                        <WaitSeconds duration="0.5"/>
                        <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Culture Comparison: JAP Initial Comment Playing"/>
                        <SubTree ID="HaruSpeaksTTS" phrases="Watch the screen"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Feel free&#10;to take notes and add to the&#10;conversation what you know at the end" result="tts_result"/>
                        <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                    </Sequence>
                </BlackboardCheckString>
            </Sequence>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Culture Comparison: Waiting for JAP Comment " sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Culture Comaprison: Video Starting + Chat Enabled"/>
            <SubTree ID="TeleconferenceOFF" __shared_blackboard="false"/>
            <Sequence>
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Culture Comparison: Video Starting"/>
                <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="311"/>
                <Parallel failure_threshold="2" success_threshold="1">
                    <SubTree ID="UnityProjectorShowVideoAndWait" __shared_blackboard="false" video_file="CompareandShare_Ep1"/>
                    <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="Culture Comparison: Video Playing" stage_id="{stage_id}"/>
                </Parallel>
            </Sequence>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Culture Comparison: Sync Post Video" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="UnityProjectorStopVideo"/>
            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="What if we share some other differences with our friends using the chat?" result="tts_result"/>
            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Please" result="tts_result"/>
            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Answer with your iPads" result="tts_result"/>
            <Parallel failure_threshold="2" success_threshold="1">
                <Sequence name="IPAD CHAT">
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Culture Comparison: Enabling iPad Comments"/>
                    <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Culture Compardison: iPad Enabling" num_sub_stages="{culture_comparison_n_substages}" stage="{stage}" stage_id="{stage_id}" sub_stage="Culture Comparison: iPad Enabling" sub_stage_id="3" this_country="{this_country}" this_country_id="{this_country_id}"/>
                    <BlackboardCheckString name="JAP" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                        <Parallel failure_threshold="2" success_threshold="1">
                            <Sequence>
                                <SubTree ID="EMIPadQuestionAndWait" __shared_blackboard="false" choices="" ipad_ids="-1" question="Can you think of other differences?" question_feed="question_feed" question_result="question_result" question_type="2" timeout="80"/>
                                <Action ID="ConvertMessageField" field="/ipad_ids" input="${question_result}" output="ipad_ids"/>
                                <Action ID="ConvertMessageField" field="/answers" input="${question_result}" output="answers"/>
                                <SubTree ID="UnityProjectorSetChatMessage" __shared_blackboard="false" ipad_ids="{ipad_ids}" messages="{answers}"/>
                            </Sequence>
                            <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="Culture Comparison: JAP iPad Chat Enabling " stage_id="{stage_id}"/>
                        </Parallel>
                    </BlackboardCheckString>
                    <BlackboardCheckString name="AUS" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                        <Parallel failure_threshold="2" success_threshold="1">
                            <Sequence>
                                <SubTree ID="EMIPadQuestionAndWait" __shared_blackboard="false" choices="" ipad_ids="-1" question="Can you think of other differences?" question_feed="question_feed" question_result="question_result" question_type="2" timeout="80"/>
                                <Action ID="ConvertMessageField" field="/ipad_ids" input="${question_result}" output="ipad_ids"/>
                                <Action ID="ConvertMessageField" field="/answers" input="${question_result}" output="answers"/>
                                <SubTree ID="UnityProjectorSetChatMessage" __shared_blackboard="false" ipad_ids="{ipad_ids}" messages="{answers}"/>
                            </Sequence>
                            <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="Culture Comparison: AUS iPad Chat Enabling " stage_id="{stage_id}"/>
                        </Parallel>
                    </BlackboardCheckString>
                </Sequence>
                <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="Culture Comparison: Chat Interaction " stage_id="{stage_id}"/>
            </Parallel>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Culture Comparison: Pre Show Chat" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Awesome!" result="tts_result"/>
            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Lets check some of the answers" result="tts_result"/>
            <Fallback>
                <Sequence name="JAP">
                    <CompareStrings comparison_op="==" first="{this_country}" second="{country_2}"/>
                    <SubTree ID="UnityProjectorShowChat" __shared_blackboard="false" show_mode="3" time_between_msgs="1.0"/>
                </Sequence>
                <Sequence name="AUS">
                    <SubTree ID="UnityProjectorShowChat" __shared_blackboard="false" show_mode="3" time_between_msgs="1.0"/>
                </Sequence>
            </Fallback>
            <ForceSuccess>
                <Timeout msec="180000">
                    <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="{stage}"/>
                </Timeout>
            </ForceSuccess>
            <SubTree ID="UnityProjectorHideChat"/>
            <SubTree ID="TeleconferenceON" __shared_blackboard="false"/>
            <Sequence name="JAP">
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Culture Comparison: JAP Comment 2"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Culture Comparison: JAP Comment 2" num_sub_stages="{culture_comparison_n_substages}" stage="{stage}" stage_id="{stage_id}" sub_stage="JAP Comment 2" sub_stage_id="4" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <BlackboardCheckString name="JAP" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                    <Sequence>
                        <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                        <WaitSeconds duration="0.5"/>
                        <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Culture Comaprison: JAP Comment 2 Playing"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Wow! Tradie, sparky, bricky, chippy... They are all such &#10;friendly words!&#10;" result="tts_result"/>
                        <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                    </Sequence>
                </BlackboardCheckString>
            </Sequence>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Culture Comparison: JAP Comment Playing" sync_feed="sync_feed" sync_result="sync_result"/>
            <Sequence name="iPad 2">
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Culture Comparison: Final Question"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Culture Comparison: Final iPad interaction" num_sub_stages="{culture_comparison_n_substages}" stage="{stage}" stage_id="{stage_id}" sub_stage="Final iPad Display" sub_stage_id="6" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <BlackboardCheckString name="JAP" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                    <Parallel failure_threshold="2" success_threshold="1">
                        <Sequence>
                            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Aking 4 Slang to JAP"/>
                            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Are there any interesting slang terms for workers in Japan?&#10; Please shatre them with your iPads. " result="tts_result"/>
                            <WaitSeconds duration="1"/>
                            <SubTree ID="EMIPadQuestionAndWait" __shared_blackboard="false" choices="&#10;" ipad_ids="-1" question="Are there any interesting slang terms for workers in Japan?" question_feed="question_feed" question_result="question_result" question_type="2" timeout="80"/>
                            <Action ID="ConvertMessageField" field="/ipad_ids" input="${question_result}" output="ipad_ids"/>
                            <Action ID="ConvertMessageField" field="/answers" input="${question_result}" output="answers"/>
                            <SubTree ID="UnityProjectorSetChatMessage" __shared_blackboard="false" ipad_ids="{ipad_ids}" messages="{answers}"/>
                        </Sequence>
                        <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="Culture Comaprison: Final JAP Question 3" stage_id="{stage_id}"/>
                    </Parallel>
                </BlackboardCheckString>
                <BlackboardCheckString name="AUS" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                    <Parallel failure_threshold="2" success_threshold="1">
                        <Sequence>
                            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Culture Comparisn: AUS Asking for Aussie Slang"/>
                            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Can you share some other Aussie slang for workers into the chat for our Japanese students to learn? " result="tts_result"/>
                            <SubTree ID="EMIPadQuestionAndWait" __shared_blackboard="false" choices="" ipad_ids="-1" question="Can you share some other Aussie slang for workers for our Japanese students to learn?" question_feed="question_feed" question_result="question_result" question_type="2" timeout="80"/>
                            <Action ID="ConvertMessageField" field="/ipad_ids" input="${question_result}" output="ipad_ids"/>
                            <Action ID="ConvertMessageField" field="/answers" input="${question_result}" output="answers"/>
                            <SubTree ID="UnityProjectorSetChatMessage" __shared_blackboard="false" ipad_ids="{ipad_ids}" messages="{answers}"/>
                        </Sequence>
                        <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="Cultural Comparison: Final AUS Question 3" stage_id="{stage_id}"/>
                    </Parallel>
                </BlackboardCheckString>
            </Sequence>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Culture Comaprison: Waiting for iPad Questions" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="TeleconferenceOFF" __shared_blackboard="false"/>
            <WaitSeconds duration="1"/>
            <SubTree ID="UnityProjectorShowChat" __shared_blackboard="false" show_mode="2" time_between_msgs="1.0"/>
            <ForceSuccess>
                <Timeout msec="1800000">
                    <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="{stage_id}"/>
                </Timeout>
            </ForceSuccess>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Culture Comparison: Last Sync Before Gallery" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="UnityProjectorHideChat"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Culture Comparison: Video, Chat and Interaction Over"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="AGHGallery">
        <Sequence>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Gallery Starting"/>
            <SetBlackboard output_key="n_gallery_sub_stages" value="8"/>
            <SubTree ID="TeleconferenceON" __shared_blackboard="false"/>
            <WaitSeconds duration="1"/>
            <Sequence>
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Gallery: JAP Comment Initiated"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Gallery: Initial JAP Comment" num_sub_stages="{n_gallery_sub_stages}" stage="{stage}" stage_id="{stage_id}" sub_stage="Gallery: JAP Initial Interaction" sub_stage_id="1" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <BlackboardCheckString name="JAP" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                    <Sequence>
                        <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                        <WaitSeconds duration="0.5"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Thats it for our first module" result="tts_result"/>
                        <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                    </Sequence>
                </BlackboardCheckString>
            </Sequence>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Gallery: Waiting for JAP to finish Comment" sync_feed="sync_feed" sync_result="sync_result"/>
            <Sequence>
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Gallery: AUS Comment Initiated"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Gallery: Initial AUS Comment" num_sub_stages="{n_gallery_sub_stages}" stage="{stage}" stage_id="{stage_id}" sub_stage="Gallery: AUS Initial Interaction" sub_stage_id="2" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <BlackboardCheckString name="AUS" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                    <Sequence>
                        <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                        <WaitSeconds duration="0.5"/>
                        <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AUS Asking for their names again before Goodbye"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Could you remind me your names?" result="tts_result"/>
                    </Sequence>
                </BlackboardCheckString>
            </Sequence>
            <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="Gallery: Waiting for AUS to finish Comment"/>
            <BlackboardCheckString return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                <Sequence>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Great!" result="tts_result"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="I will try to remember them!" result="tts_result"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Gallery: Waiting for AUS to finish second comment" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="311"/>
            <Sequence>
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Gallery: Final JAP Comment"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Gallery: Final JAP Comment" num_sub_stages="{n_gallery_sub_stages}" stage="{stage}" stage_id="{stage_id}" sub_stage="Gallery: JAP Final Interaction" sub_stage_id="3" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <BlackboardCheckString name="JAP" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                    <Sequence>
                        <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                        <WaitSeconds duration="0.5"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Next time we are going to use&#10;the gallery feature on our&#10;ipads to share some photos." result="tts_result"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Be sure to tag your upload&#10;using the format shown on&#10;screen" result="tts_result"/>
                        <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                    </Sequence>
                </BlackboardCheckString>
            </Sequence>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Gallery: Waiting for JAP to finish Comment" sync_feed="sync_feed" sync_result="sync_result"/>
            <Sequence>
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Gallery: Final AUS Comment"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Gallery: Final AUS Comment" num_sub_stages="{n_gallery_sub_stages}" stage="{stage}" stage_id="{stage_id}" sub_stage="Gallery: AUS Final Interaction" sub_stage_id="4" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <BlackboardCheckString name="AUS" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                    <Sequence>
                        <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                        <WaitSeconds duration="0.5"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="We can share them next&#10;week and find out more&#10;about life in Australia and&#10;Japan!" result="tts_result"/>
                        <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                    </Sequence>
                </BlackboardCheckString>
            </Sequence>
            <SubTree ID="EMSyncPointAndSkipButton" __shared_blackboard="false" bt_id="{bt_id}" msg_skip_ipad="Gallery: Waiting for JAP to finish Comment" msg_to_sync="Gallery: AUS Final Comment Sync Msg" stage_id="{stage_id}"/>
            <SubTree ID="TeleconferenceOFF" __shared_blackboard="false"/>
            <Sequence name="Video Playback">
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Gallery Video Starting"/>
                <Parallel failure_threshold="2" success_threshold="1">
                    <SubTree ID="UnityProjectorShowVideoAndWait" __shared_blackboard="false" video_file="PhotoUpload_Episode1"/>
                    <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="Gallery Video Playing" stage_id="{stage_id}"/>
                </Parallel>
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Gallery Video Over"/>
            </Sequence>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Gallery: Waiting for remote video to be Over" sync_feed="sync_feed" sync_result="sync_result"/>
            <Sequence>
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Gallery First Picture Petition"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Gallery: First Petition Comment" num_sub_stages="{n_gallery_sub_stages}" stage="{stage}" stage_id="{stage_id}" sub_stage="Gallery: Firts Picture Petition Haru" sub_stage_id="5" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Please, check your iPads and please share a picture of your home" result="tts_result"/>
            </Sequence>
            <Fallback>
                <Sequence name="iPad Request 1">
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Gallery: Request Image 1"/>
                    <SubTree ID="EMIPadRequestImageAndWait" __shared_blackboard="false" feedback="ipad_image_feedback" ipad_ids="-1" message="Upload a picture of your home" result="ipad_image_result" tags="school_lunch" timeout="-1"/>
                </Sequence>
                <Sequence>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="ERRO: PICTURE NOT UPLOADED"/>
                </Sequence>
            </Fallback>
            <Sequence>
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Gallery Second Picture Petition"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Gallery: Second Petition Comment" num_sub_stages="{n_gallery_sub_stages}" stage="{stage}" stage_id="{stage_id}" sub_stage="Gallery: Second Picture Petition Haru" sub_stage_id="6" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Great!" result="tts_result"/>
                <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Now one of your neighbourhood " result="tts_result"/>
            </Sequence>
            <Fallback>
                <Sequence name="iPad Request 2">
                    <SubTree ID="EMIPadRequestImageAndWait" __shared_blackboard="false" feedback="ipad_image_feedback" ipad_ids="-1" message="Upload a picture of your neighbourhood" result="ipad_image_result" tags="school_sports" timeout="-1"/>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Gallery: Requesting Image 2"/>
                </Sequence>
                <Sequence>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="ERROR: Picture nt uploaded"/>
                </Sequence>
            </Fallback>
            <Sequence>
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Gallery Third Picture Petition"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Gallery: Second Petition Comment" num_sub_stages="{n_gallery_sub_stages}" stage="{stage}" stage_id="{stage_id}" sub_stage="Gallery: Third Picture Petition Haru" sub_stage_id="7" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="And last, a picture of your transport to school" result="tts_result"/>
            </Sequence>
            <Fallback>
                <Sequence name="iPad Request 3">
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Gallery: Requesting Image 3"/>
                    <SubTree ID="EMIPadRequestImageAndWait" __shared_blackboard="false" feedback="ipad_image_feedback" ipad_ids="-1" message="Upload a picture of your trasport to school" result="ipad_image_result" tags="transpo" timeout="-1"/>
                </Sequence>
                <Sequence>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="ERROR: Picture not uploaded"/>
                </Sequence>
            </Fallback>
            <Sequence>
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Gallery last comment"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Gallery:  Last Comment" num_sub_stages="{n_gallery_sub_stages}" stage="{stage}" stage_id="{stage_id}" sub_stage="Gallery: Last Haru Comment" sub_stage_id="8" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <SubTree ID="HaruSpeaksTTS" phrases="Thank you"/>
            </Sequence>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Gallery: Waiting For Remote Class to Finish Uploading the pictures" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="UnityProjectorStopVideo"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Gallery Over"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="AGHKanji2">
        <Sequence>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Kanji 2 Starting"/>
            <SubTree ID="TeleconferenceON" __shared_blackboard="false"/>
            <SetBlackboard output_key="n_substages_kanji_2" value="5"/>
            <Sequence>
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Kanji 2: AUS First Comment"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Kanji 2: AUS initial comment" num_sub_stages="{n_substages_kanji_2}" stage="{stage}" stage_id="{stage_id}" sub_stage="Kanji 2: AUS initial comment" sub_stage_id="1" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <BlackboardCheckString name="AUS" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                    <Sequence>
                        <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                        <WaitSeconds duration="0.5"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="And now, lets learn some more&#10;Kanji" result="tts_result"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="This time practising&#10;the four roles in an ant&#10;community" result="tts_result"/>
                        <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                    </Sequence>
                </BlackboardCheckString>
            </Sequence>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Kanji 2: First Sync Point Btween Comment" sync_feed="sync_feed" sync_result="sync_result"/>
            <Sequence>
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Kanji 2: JAP First Comment"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Kanji 2: JAP initial comment" num_sub_stages="{n_substages_kanji_2}" stage="{stage}" stage_id="{stage_id}" sub_stage="Kanji 2: JAP initial comment" sub_stage_id="2" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <BlackboardCheckString name="JAP" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                    <Sequence>
                        <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                        <WaitSeconds duration="0.5"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Remember to follow the&#10;correct stroke order" result="tts_result"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Lets draw!" result="tts_result"/>
                        <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                    </Sequence>
                </BlackboardCheckString>
            </Sequence>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Kanji 2: Fisrt Sync Point Reached" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="TeleconferenceOFF" __shared_blackboard="false"/>
            <Sequence>
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Kanji 2: Video 1 and Ipad Draw"/>
                <Parallel failure_threshold="2" success_threshold="1">
                    <Parallel failure_threshold="2" success_threshold="2">
                        <Sequence>
                            <SubTree ID="UnityProjectorShowVideo" __shared_blackboard="false" video_file="KanjiStrokeOrderFullscreen_Queen"/>
                            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Video Success"/>
                        </Sequence>
                        <Sequence>
                            <SubTree ID="EMIPadKanjiWriteAndWait" __shared_blackboard="false" feedback="kanji_feedback" ipad_ids="1" message="Follow along the Kanji" result="kanji_result" timeout="-1"/>
                            <Action ID="ConvertMessageField" field="/ipad_ids" input="${kanji_result}" output="ipads_ids"/>
                            <Action ID="ConvertMessageField" field="/kanjis_path" input="${kanji_result}" output="kanji_paths"/>
                            <SubTree ID="UnityProjectorSetDraw" __shared_blackboard="false" draws="{kanji_paths}" draws_are_paths="true" image_tags="{kanji_paths}" ipad_ids="{ipads_ids}"/>
                            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Drawing Success"/>
                        </Sequence>
                    </Parallel>
                    <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="Kanji 2: Video and Drawing " stage_id="3"/>
                </Parallel>
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Kanji 2: Exiting First Drawing and Video"/>
            </Sequence>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Kanji 2: Waiting for AUS to finish comment" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="UnityProjectorStopVideo"/>
            <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="611"/>
            <Sequence>
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Kanji 2: Trying to show first Kaniji"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Kanji 2: Display of Kanjis" num_sub_stages="{n_substages_kanji_2}" stage="{stage}" stage_id="{stage_id}" sub_stage="Kanji 2: Display of  Kanjis" sub_stage_id="3" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <WaitSeconds duration="2" name="Delay for remote "/>
                <SubTree ID="UnityProjectorShowDraw" __shared_blackboard="false" draw_delay="0" ipad_id_local="1" ipad_id_remote="1" show_mode="3"/>
            </Sequence>
            <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="{stage_id}"/>
            <SubTree ID="UnityProjectorHideDraw"/>
            <Sequence>
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Kanji 2:  Starting Second Khanji Worker and Draw"/>
                <Parallel failure_threshold="2" success_threshold="1">
                    <Parallel failure_threshold="2" success_threshold="2">
                        <Sequence>
                            <SubTree ID="UnityProjectorShowVideo" __shared_blackboard="false" video_file="KanjiStrokeOrderFullscreen_Worker"/>
                            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Second Video Shown Success"/>
                        </Sequence>
                        <Sequence>
                            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Starting Drawing "/>
                            <SubTree ID="EMIPadKanjiWriteAndWait" __shared_blackboard="false" feedback="kanji_feedback" ipad_ids="1" message="Follow Along the Kanji" result="kanji_result" timeout="-1"/>
                            <Action ID="ConvertMessageField" field="/ipad_ids" input="${kanji_result}" output="ipads_ids"/>
                            <Action ID="ConvertMessageField" field="/kanjis_path" input="${kanji_result}" output="kanji_paths"/>
                            <SubTree ID="UnityProjectorSetDraw" __shared_blackboard="false" draws="{kanji_paths}" draws_are_paths="true" image_tags="{kanji_paths}" ipad_ids="{ipads_ids}"/>
                            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Second Drawing Success"/>
                        </Sequence>
                    </Parallel>
                    <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="Kanji 2: Second Khanji and Draw" stage_id="{stage_id}"/>
                </Parallel>
            </Sequence>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Kanji 2: Second display done" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="UnityProjectorStopVideo"/>
            <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="611"/>
            <Sequence>
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Kanji 2: Displaying Second Kanji Results"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Kanji 2: Display of Second Kanjis" num_sub_stages="{n_substages_kanji_2}" stage="{stage}" stage_id="{stage_id}" sub_stage="Kanji 2 : Display of Second Kanji" sub_stage_id="3" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <WaitSeconds duration="2"/>
                <SubTree ID="UnityProjectorShowDraw" __shared_blackboard="false" draw_delay="0" ipad_id_local="1" ipad_id_remote="1" show_mode="3"/>
            </Sequence>
            <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="{stage_id}"/>
            <SubTree ID="UnityProjectorHideDraw"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Kanji 2: Projection of Kanjis Over"/>
            <SubTree ID="TeleconferenceON" __shared_blackboard="false"/>
            <Sequence>
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Kanji 2: Final AUS Comment"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Kanji 2: Final AUS Comment" num_sub_stages="{n_substages_kanji_2}" stage="{stage}" stage_id="{stage_id}" sub_stage="Kanji 2: Final Comment AUS" sub_stage_id="4" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <BlackboardCheckString name="AUS" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                    <Sequence>
                        <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                        <WaitSeconds duration="0.5"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="I only just learnt that the&#10;stroke order for Kanji is&#10;really important" result="tts_result"/>
                        <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                    </Sequence>
                </BlackboardCheckString>
            </Sequence>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Kanji 2: Post AUS Post Kanji Comment" sync_feed="sync_feed" sync_result="sync_result"/>
            <Sequence>
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Kanji 2: Final JAP Comment"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Kanji 2: Final JAP Comment" num_sub_stages="{n_substages_kanji_2}" stage="{stage}" stage_id="{stage_id}" sub_stage="Kanji 2: Final Comment JAP" sub_stage_id="5" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <BlackboardCheckString name="JAP" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                    <Sequence>
                        <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                        <WaitSeconds duration="0.5"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Woww" result="tts_result"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="You are all so good at&#10;this!" result="tts_result"/>
                        <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                    </Sequence>
                </BlackboardCheckString>
            </Sequence>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Kanji 2:  Waiting for Final Comments" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="611"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Successful display of both ends Kanjis Conference should Still be ON. Kanji 2 Over"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="AGHQueensAndDrones">
        <Sequence>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Ants Lesson 1: Starting Queens and Drones Part"/>
            <SetBlackboard output_key="queens_drones_n_stages" value="3"/>
            <SubTree ID="TeleconferenceOFF" __shared_blackboard="false"/>
            <Sequence name="Queens Video">
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Ants Lesson 1: Queens Video Starting"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Ants Lesson: Video Queens" num_sub_stages="{queens_drones_n_stages}" stage="{stage}" stage_id="{stage_id}" sub_stage="Ants Lesson: Queens Video" sub_stage_id="1" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <Parallel failure_threshold="2" success_threshold="1">
                    <SubTree ID="UnityProjectorShowVideoAndWait" __shared_blackboard="false" video_file="Storytelling_AntRoles_Sequence8"/>
                    <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="Ants Lesson 1: Queens Video Playing" stage_id="{stage_id}"/>
                </Parallel>
            </Sequence>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Ants Lesson 1: Waiting for Post Video Sync" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="UnityProjectorStopVideo"/>
            <SubTree ID="TeleconferenceON" __shared_blackboard="false"/>
            <WaitSeconds duration="2"/>
            <Sequence name="AUS Queen Comment">
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Ants Lesson: Queens Video AUS question"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Ants Lesson 1: AUS Queens Video question" num_sub_stages="{queens_drones_n_stages}" stage="{stage}" stage_id="{stage_id}" sub_stage="Ants Lesson 1: AUS question Queens video" sub_stage_id="2" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <BlackboardCheckString name="AUS" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                    <Sequence>
                        <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="If you were an ant&#10;what role would you&#10;choose? Worker or Soldier?" result="tts_result"/>
                    </Sequence>
                </BlackboardCheckString>
            </Sequence>
            <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="Ants Lesson 1: Waiting for AUS question"/>
            <BlackboardCheckString name="AUS" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                <Sequence>
                    <Parallel failure_threshold="1" success_threshold="2">
                        <SubTree ID="HaruLCDVideosAndWait" end_time="0" feedback="lcd_feed" left_eye="l_eye_Harumoji_Queen.mov" loop="0" result="lcd_result" right_eye="r_eye_Harumoji_Queen.mov" start_time="0"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Thats great! Both roles are very interesting." result="tts_result"/>
                    </Parallel>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AUS qustion about roles Over"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Ants Lesson 1: Post Queens Video, Waiting for AUS Question" sync_feed="sync_feed" sync_result="sync_result"/>
            <Sequence>
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Ants Lesson 1: JAP Queen or drone question"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Ants Lesson 1: JAP Queens or Drone Video question" num_sub_stages="{queens_drones_n_stages}" stage="{stage}" stage_id="{stage_id}" sub_stage="Ants Lesson 1: JAP Queen or Drone Question" sub_stage_id="3" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <BlackboardCheckString name="Japan" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                    <Sequence>
                        <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                        <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Ants Lesson 1: JAP Queens and Drones Question Starting"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="What about you? What would you rather be? A drone ant or a queen ant?" result="tts_result"/>
                    </Sequence>
                </BlackboardCheckString>
            </Sequence>
            <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="Ants Lesson 1: Waiting for JAP to finish asking Queen or Drone"/>
            <BlackboardCheckString return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                <Sequence>
                    <Parallel failure_threshold="1" success_threshold="2">
                        <SubTree ID="HaruLCDVideosAndWait" end_time="0" feedback="lcd_feed" left_eye="l_eye_Harumoji_Queen.mov" loop="0" result="lcd_result" right_eye="r_eye_Harumoji_Queen.mov" start_time="0"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Thats great! " result="tts_result"/>
                    </Parallel>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Ants Lesson 1: JAP Queens and Drones Question Over"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Ants Lesson 1: Final sync point" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Ants Lesson 1: Over, Teleconference Still On"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="AGHQueensChat">
        <Sequence>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Queens Chat Part Starting"/>
            <SetBlackboard output_key="n_substages_queen_chat" value="3"/>
            <Sequence>
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Queens Chat: AUS comment Starting"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Queens Chat: AUS comment" num_sub_stages="{n_substages_queen_chat}" stage="{stage}" stage_id="{stage_id}" sub_stage="Queens Chat: AUS Comment" sub_stage_id="1" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <BlackboardCheckString name="AUS" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                    <Sequence>
                        <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                        <WaitSeconds duration="0.5"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="I would be the queen&#10;because I really like her&#10;crown" result="tts_result"/>
                        <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                    </Sequence>
                </BlackboardCheckString>
            </Sequence>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Queens Chat: Waiting for AUS to finish Comment" sync_feed="sync_feed" sync_result="sync_result"/>
            <BlackboardCheckString name="JAP" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                <Sequence>
                    <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                    <WaitSeconds duration="0.5"/>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Queens Chat: JAP Question Started"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="What about you?" result="tts_result"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Do you know what you want&#10;to do when you leave school?" result="tts_result"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="Queens Chat: Waiting for JAP to finish Conversation"/>
            <BlackboardCheckString name="JAP" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                <Sequence>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Those are wonderful pahts " result="tts_result"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Queens Chat: Waiting for JAP to finish comment" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="TeleconferenceOFF" __shared_blackboard="false"/>
            <WaitSeconds duration="1"/>
            <SubTree ID="HaruSpeaksTTS" phrases="Check your iPads and lets share your answers with our new friends"/>
            <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="903"/>
            <Sequence name="IPAD CHAT">
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Queens Chat: Starting chat display on Unity Projector"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Queens Chat: Chat enabled" num_sub_stages="{n_substages_queen_chat}" stage="{stage}" stage_id="{stage_id}" sub_stage="Queens Chat: Display Projector" sub_stage_id="3" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <BlackboardCheckString name="JAP" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                    <Parallel failure_threshold="2" success_threshold="1">
                        <Sequence>
                            <SubTree ID="EMIPadQuestionAndWait" __shared_blackboard="false" choices="" ipad_ids="-1" question="What do you know what you want&#10;to do when you leave school&#10;?" question_feed="question_feed" question_result="question_result" question_type="2" timeout="80"/>
                            <Action ID="ConvertMessageField" field="/ipad_ids" input="${question_result}" output="ipad_ids"/>
                            <Action ID="ConvertMessageField" field="/answers" input="${question_result}" output="answers"/>
                            <SubTree ID="UnityProjectorSetChatMessage" __shared_blackboard="false" ipad_ids="{ipad_ids}" messages="{answers}"/>
                        </Sequence>
                        <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="Queens Chat: Waiting for AUS sync" stage_id="{stage_id}"/>
                    </Parallel>
                </BlackboardCheckString>
                <BlackboardCheckString name="AUS" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                    <Parallel failure_threshold="2" success_threshold="1">
                        <Sequence>
                            <SubTree ID="EMIPadQuestionAndWait" __shared_blackboard="false" choices="" ipad_ids="-1" question="What do you know what you want&#10;to do when you leave school&#10;?" question_feed="question_feed" question_result="question_result" question_type="2" timeout="80"/>
                            <Action ID="ConvertMessageField" field="/ipad_ids" input="${question_result}" output="ipad_ids"/>
                            <Action ID="ConvertMessageField" field="/answers" input="${question_result}" output="answers"/>
                            <SubTree ID="UnityProjectorSetChatMessage" __shared_blackboard="false" ipad_ids="{ipad_ids}" messages="{answers}"/>
                        </Sequence>
                        <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="Queens Chat: Waiting for JAP sync" stage_id="{stage_id}"/>
                    </Parallel>
                </BlackboardCheckString>
            </Sequence>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Queens Chat: Waiting for Remote Class to Finish Answering" sync_feed="sync_feed" sync_result="sync_result"/>
            <WaitSeconds duration="1"/>
            <Fallback name="Show Chat">
                <Sequence name="Japan">
                    <CompareStrings comparison_op="==" first="{this_country}" name="Japan" second="{country_2}"/>
                    <SubTree ID="UnityProjectorShowChat" __shared_blackboard="false" show_mode="3" time_between_msgs="1.0"/>
                </Sequence>
                <Sequence name="Austraia">
                    <SubTree ID="UnityProjectorShowChat" __shared_blackboard="false" show_mode="3" time_between_msgs="1.0"/>
                </Sequence>
            </Fallback>
            <ForceSuccess>
                <Timeout msec="180000">
                    <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="{stage}"/>
                </Timeout>
            </ForceSuccess>
            <SubTree ID="UnityProjectorHideChat"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Queens Chat Finished, Teleconference Still On"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="AGHStoryBegin">
        <Sequence name="AGH Story Begin">
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Begin Begins"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Beginning of AGH Story Begin Stage. Turnning teleconference OFF" num_sub_stages="8" stage="{stage}" stage_id="{stage_id}" sub_stage="Begin" sub_stage_id="1" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="TeleconferenceOFF" __shared_blackboard="false"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Showing AGH Begin video in projector" num_sub_stages="8" stage="{stage}" stage_id="{stage_id}" sub_stage="Begin Video" sub_stage_id="2" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <Parallel failure_threshold="1" success_threshold="1">
                <SubTree ID="UnityProjectorShowVideoAndWait" __shared_blackboard="false" video_file="02_TAAG_STORY_BEGINS_IMAGE_AND_AUDIO"/>
                <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="AGH Story: Skip 02 STORY BEGINS" stage_id="{stage_id}"/>
            </Parallel>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Begin: Wait sync point after video"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Wait for the other class to finish the video" num_sub_stages="8" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait Other Video" sub_stage_id="3" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="AGH Story Stage: Begin: Waiting sync point after video" stage_id="{stage_id}"/>
            <SubTree ID="UnityProjectorStopVideo"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Begin: Sync point passed"/>
            <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
            <SubTree ID="TeleconferenceON" __shared_blackboard="false"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="JAP robot speaks" num_sub_stages="8" stage="{stage}" stage_id="{stage_id}" sub_stage="JAP Robot" sub_stage_id="4" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <BlackboardCheckString name="Japan" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                <Sequence>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Begin: JAP TTS"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="I like that Grasshopper’s waistcoat!" result="tts_result"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Begin: Wait sync point for JAP TTS"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for JAP robot to finish" num_sub_stages="8" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait JAP Robot" sub_stage_id="5" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Sync Msg Wait JAP Robot" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Begin: Sync point passed"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="AUS robot speaks" num_sub_stages="8" stage="{stage}" stage_id="{stage_id}" sub_stage="AUS Robot" sub_stage_id="6" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
            <BlackboardCheckString name="Australia" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                <Sequence>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Begin: AUS TTS"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Very Dapper!" result="tts_result"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Begin: Wait sync point for AUS TTS"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for AUS robot to finish" num_sub_stages="8" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait AUS Robot" sub_stage_id="7" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="AGH Story Stage Begin AUS TTS" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Begin: Sync point passed"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="End of AGH Story Begin Stage. Following with AGH story busy ants" num_sub_stages="8" stage="{stage}" stage_id="{stage_id}" sub_stage="End" sub_stage_id="8" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <MathOperationInt first="{stage_id}" operator="+" output="stage_id" second="1"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Begin Ends"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="AGHStoryBusyAnts">
        <Sequence name="AGH Story Busy Ants">
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Busy Ants: Begins"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Begininng of AGH Story Busy Ants Stage. Turnning teleconference OFF" num_sub_stages="9" stage="{stage}" stage_id="{stage_id}" sub_stage="Begin" sub_stage_id="1" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <WaitSeconds duration="1" name="Wait before Teleco OFF"/>
            <SubTree ID="TeleconferenceOFF" __shared_blackboard="false"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Showing AGH Busy Ants video in projector" num_sub_stages="9" stage="{stage}" stage_id="{stage_id}" sub_stage="Busy Ants Video" sub_stage_id="2" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <Parallel failure_threshold="2" success_threshold="1">
                <SubTree ID="UnityProjectorShowVideoAndWait" __shared_blackboard="false" video_file="03_TAAG_BUSY_ANTS_IMAGE_AND_AUDIO"/>
                <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="AGH Story: Skip 03 BUSY ANTS" stage_id="{stage_id}"/>
            </Parallel>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Busy Ants: Wait sync point after video"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Wait for the other class to finish the video" num_sub_stages="9" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait Other Video" sub_stage_id="3" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="AGH Story Stage Busy Ants Video" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="UnityProjectorStopVideo"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Busy Ants: Sync point passed"/>
            <SubTree ID="TeleconferenceON" __shared_blackboard="false"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="AUS ants work interaction" num_sub_stages="9" stage="{stage}" stage_id="{stage_id}" sub_stage="AUS Ants Work" sub_stage_id="4" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
            <BlackboardCheckString name="Australia" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                <Sequence>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="You know the saying teamwork makes for dream work? " result="tts_result"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Well that definitely applies to ants." result="tts_result"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Their survival is dependent on their ability to work together. " result="tts_result"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Who do you think are busier? " result="tts_result"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Bees or ants?" result="tts_result"/>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Busy Ants: AUS Wait speech"/>
                    <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for AUS students to answer ants work related question" num_sub_stages="9" stage="{stage}" stage_id="{stage_id}" sub_stage="AUS Ants Work Wait Speech" sub_stage_id="5" this_country="{this_country}" this_country_id="{this_country_id}"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Busy Ants: Wait sync point for AUS interaction"/>
            <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="AGH Story Stage Busy Ants AUS Interaction"/>
            <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for AUS ants work interaction to finish" num_sub_stages="9" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait AUS Ants Work" sub_stage_id="6" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Busy Ants: Sync point passed"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="JAP robot speaks" num_sub_stages="9" stage="{stage}" stage_id="{stage_id}" sub_stage="JAP Robot" sub_stage_id="7" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <BlackboardCheckString name="Japan" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                <Sequence>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Busy Ants: JAP TTS"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Hmmm…" result="tts_result"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases=" I can't decide." result="tts_result"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="All I know is that they are both heaps busier than me!" result="tts_result"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Busy Ants: Wait sync point for JAP TTS"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for JAP robot to finish" num_sub_stages="9" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait JAP Robot" sub_stage_id="8" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="AGH Story Stage Busy Ants JAP TTS" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Busy Ants: Sync point passed"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="End of AGH Story Busy Ants Stage. Following with AGH story come chat with me" num_sub_stages="9" stage="{stage}" stage_id="{stage_id}" sub_stage="End" sub_stage_id="9" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <MathOperationInt first="{stage_id}" operator="+" output="stage_id" second="1"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Busy Ants: Ends"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="AGHStoryComeChatWithMe">
        <Sequence name="AGH Story Come Chat With Me">
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Come Chat With Me: Begins"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Begininng of AGH Story Come Chat With Me Stage. Turnning teleconference OFF" num_sub_stages="11" stage="{stage}" stage_id="{stage_id}" sub_stage="Begin" sub_stage_id="1" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <WaitSeconds duration="2" name="Wait before Teleco OFF"/>
            <SubTree ID="TeleconferenceOFF" __shared_blackboard="false"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Showing AGH Story Come Chat With Me video in projector" num_sub_stages="11" stage="{stage}" stage_id="{stage_id}" sub_stage="Come Chat With Me Video" sub_stage_id="2" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <Parallel failure_threshold="2" success_threshold="1">
                <SubTree ID="UnityProjectorShowVideoAndWait" __shared_blackboard="false" video_file="04_TAAG_COME_CHAT_WITH_ME_IMAGE_AND_AUDIO"/>
                <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="AGH Story: Skip 04 COME CHAT" stage_id="{stage_id}"/>
            </Parallel>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Come Chat With Me: Wait sync point after video"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Wait for the othe class to finish the video" num_sub_stages="11" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait Other Video" sub_stage_id="3" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="AGH Story Stage Come Chat With Me Video" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="UnityProjectorStopVideo"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Come Chat With Me: Sync passed"/>
            <SubTree ID="TeleconferenceON" __shared_blackboard="false"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="AUS robot speaks" num_sub_stages="11" stage="{stage}" stage_id="{stage_id}" sub_stage="AUS Robot" sub_stage_id="4" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
            <BlackboardCheckString name="Australia" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                <Sequence>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Come Chat With Me: AUS TTS"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="I’d much rather be in air conditioning than working in the hot sun." result="tts_result"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Come Chat With Me: Wait sync point for AUS TTS"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for AUS robot to finish" num_sub_stages="11" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait AUS Robot" sub_stage_id="5" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="AGH Story Stage Come Chat With Me AUS TTS" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Come Chat With Me: Sync passed"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="JAP movies interaction" num_sub_stages="11" stage="{stage}" stage_id="{stage_id}" sub_stage="JAP Movies" sub_stage_id="6" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <BlackboardCheckString name="Japan" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                <Sequence>
                    <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                    <WaitSeconds duration="{tts_wait}" name="Wait before TTS"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="I guess it’s important they work now so they can spend the winter inside, catching up on robot films like ‘Robots’... 'Terminator'... ‘Ex Machina’.... Wall-E... Star Wars…. there are so many good ones." result="tts_result"/>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Come Chat With Me: JAP movie interaction"/>
                    <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for JAP students to answer movies related question" num_sub_stages="11" stage="{stage}" stage_id="{stage_id}" sub_stage="JAP Movies Dialog" sub_stage_id="7" this_country="{this_country}" this_country_id="{this_country_id}"/>
                    <MathOperationInt first="{num_ipads}" operator="-" output="jap_ipad_num" second="1"/>
                    <SubTree ID="GetRandomIpadData" __shared_blackboard="false" ipad_id="jap_random_ipad" ipad_register_result="{ipad_register_result}" ipad_user_json="params_result" number_of_ipads="{jap_ipad_num}"/>
                    <Parallel failure_threshold="2" success_threshold="1">
                        <SubTree ID="EMUnderstandEvent" __shared_blackboard="false" dialog_response="dialog_response" dialog_result="dialog_result" event_name="command-ask-about-movie" event_params="{params_result}" person_id="{jap_random_ipad}" timeout="0"/>
                        <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="AGH Story Stage: Come Chat With Me: Waiting sync point for JAP movie dialog" stage_id="{stage_id}"/>
                    </Parallel>
                    <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Come Chat With Me: Wait sync point for JAP movie interaction"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for JAP movies interaction to finish" num_sub_stages="11" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait JAP Movies" sub_stage_id="8" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="AGH Story Stage Come Chat With Me JAP Movie Interaction" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Come Chat With Me: Sync passed"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="AUS robot speaks" num_sub_stages="11" stage="{stage}" stage_id="{stage_id}" sub_stage="AUS Robot" sub_stage_id="9" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <BlackboardCheckString name="Australia" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                <Sequence>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Come Chat With Me: AUS second TTS"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="There should be a Robot Oscars!" result="tts_result"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Come Chat With Me: Wait sync point for AUS  second TTS"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for AUS robot to finish" num_sub_stages="11" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait AUS Robot" sub_stage_id="10" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="AGH Story Stage Come Chat With Me AUS Second TTS" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Come Chat With Me: Sync passed"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="End of AGH Story Come Chat With Me Stage. Following with AGH story do you think" num_sub_stages="11" stage="{stage}" stage_id="{stage_id}" sub_stage="End" sub_stage_id="11" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <MathOperationInt first="{stage_id}" operator="+" output="stage_id" second="1"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Come Chat With Me: Ends"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="AGHStoryDoYouThink">
        <Sequence name="AGH Story Do You Think">
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Do You Think: Begins"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Begininng of AGH Story Do You Think Stage. Turnning teleconference OFF" num_sub_stages="10" stage="{stage}" stage_id="{stage_id}" sub_stage="Begin" sub_stage_id="1" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <WaitSeconds duration="2" name="Wait before Teleco OFF"/>
            <SubTree ID="TeleconferenceOFF" __shared_blackboard="false"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Showing AGH Story Do You Think video in projector" num_sub_stages="10" stage="{stage}" stage_id="{stage_id}" sub_stage="Do You Think Video" sub_stage_id="2" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <Parallel failure_threshold="2" success_threshold="1">
                <SubTree ID="UnityProjectorShowVideoAndWait" __shared_blackboard="false" video_file="05_TAAG_DO_YOU_THINK_IMAGE_AND_AUDIO"/>
                <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="AGH Story: Skip 05 DO YOU THINK" stage_id="{stage_id}"/>
            </Parallel>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Do You Think: Wait sync point after video"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Wait for the other class to finish the video" num_sub_stages="10" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait Other Video" sub_stage_id="3" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="AGH Story Stage Do You Think Video" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="UnityProjectorStopVideo"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Do You Think: Sync passed"/>
            <SubTree ID="TeleconferenceON" __shared_blackboard="false"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="JAP robot speaks" num_sub_stages="10" stage="{stage}" stage_id="{stage_id}" sub_stage="JAP Robot" sub_stage_id="4" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <BlackboardCheckString name="Japan" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                <Sequence>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Do You Think: JAP TTS"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="I’m not sure what is going to happen here." result="tts_result"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Do You Think: Wait sync point for JAP TTS"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for JAP robot to finish" num_sub_stages="10" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait JAP Robot" sub_stage_id="5" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <Parallel failure_threshold="2" success_threshold="1">
                <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="AGH Story Stage: Do You Think: Waiting sync point for JAP TTS" stage_id="{stage_id}"/>
                <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="AGH Story Stage Do You Think JAP TTS" sync_feed="sync_feed" sync_result="sync_result"/>
            </Parallel>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Do You Think: Sync passed"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="AUS robot speaks" num_sub_stages="10" stage="{stage}" stage_id="{stage_id}" sub_stage="AUS Robot" sub_stage_id="6" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
            <BlackboardCheckString name="Australia" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                <Sequence>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Do You Think: AUS TTS"/>
                    <WaitSeconds duration="{tts_wait}" name="Wait before TTS"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="What do you all think? Do you relate to the ant or to the grasshopper in this story?" result="tts_result"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Do You Think: Wait sync point for AUS TTS"/>
            <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="Sync Msg that isn't repeated twice as placeholder"/>
            <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for AUS robot to finish" num_sub_stages="10" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait AUS Robot" sub_stage_id="7" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Do You Think: Converstation finished"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Do You Think: Wait sync point for conversation in other class"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for students in the other class to have a conversation related to what AUS robot asked" num_sub_stages="10" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait Other Students Conversation" sub_stage_id="9" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="AGH Story Stage Do You Think Wait Speech" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Do You Think: Sync passed"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="End of AGH Story Do You Think Stage. Following with AGH story winter" num_sub_stages="10" stage="{stage}" stage_id="{stage_id}" sub_stage="End" sub_stage_id="10" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <MathOperationInt first="{stage_id}" operator="+" output="stage_id" second="1"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Do You Think: Ends"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="AGHStoryIntro">
        <Sequence name="Story Intro">
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Intro Begins"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Begining of AGH Story Intro Stage. Turnning teleconference OFF" num_sub_stages="18" stage="{stage}" stage_id="{stage_id}" sub_stage="Begin" sub_stage_id="1" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <WaitSeconds duration="2" name="Wait before Teleco OFF"/>
            <SubTree ID="TeleconferenceOFF" __shared_blackboard="false"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Showing AGH Intro video in projector" num_sub_stages="18" stage="{stage}" stage_id="{stage_id}" sub_stage="Intro Video" sub_stage_id="2" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <Parallel failure_threshold="2" success_threshold="1">
                <SubTree ID="UnityProjectorShowVideoAndWait" __shared_blackboard="false" video_file="01_TAAG_HARU_INTRO_IMAGE_AND_AUDIO"/>
                <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="AGH Story: Skip 01 INTRO" stage_id="{stage_id}"/>
            </Parallel>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Story Intro First Part" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="UnityProjectorStopVideo"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Intro: Wait sync point after first part of intro"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Wait for the other class to finish the video" num_sub_stages="18" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait Other Video" sub_stage_id="3" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Intro: Sync point passed"/>
            <SubTree ID="TeleconferenceON" __shared_blackboard="false"/>
            <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="JAP robot speaks" num_sub_stages="18" stage="{stage}" stage_id="{stage_id}" sub_stage="JAP Robot" sub_stage_id="4" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <BlackboardCheckString name="Japan" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                <Sequence>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Intro: JAP TTS"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                    <WaitSeconds duration="0.5"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="This story is set in summer. Spring is my favourite season but I do love Summer too." result="tts_result"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Intro: Wait sync point for JAP TTS"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for JAP robot to finish" num_sub_stages="18" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait JAP Robot" sub_stage_id="5" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Story Intro First Part JAP First TTS" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Intro: Sync point passed"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="AUS weather interaction" num_sub_stages="18" stage="{stage}" stage_id="{stage_id}" sub_stage="AUS Weather" sub_stage_id="6" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <BlackboardCheckString name="Australia" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                <Sequence>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Intro: AUS weather TTS"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                    <WaitSeconds duration="{tts_wait}" name="Wait before TTS"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="I also enjoy summer time, just so long as it’s not so hot that it overheats my main frame. Do you like Summer?" result="tts_result"/>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Intro: AUS weather Understand dialog"/>
                    <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for AUS students to answer weather related question" num_sub_stages="18" stage="{stage}" stage_id="{stage_id}" sub_stage="AUS Weather Dialog" sub_stage_id="7" this_country="{this_country}" this_country_id="{this_country_id}"/>
                    <MathOperationInt first="{num_ipads}" operator="-" output="jap_num_ipads" second="1"/>
                    <SubTree ID="GetRandomIpadData" __shared_blackboard="false" ipad_id="jap_random_ipad" ipad_register_result="{ipad_register_result}" ipad_user_json="dialog_params" number_of_ipads="{jap_num_ipads}"/>
                    <Parallel failure_threshold="2" success_threshold="1">
                        <SubTree ID="EMUnderstandEvent" __shared_blackboard="false" dialog_response="dialog_response" dialog_result="dialog_result" event_name="command-ask-for-weather" event_params="{dialog_params}" person_id="{jap_random_ipad}" timeout="0"/>
                        <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="AGH Story Stage: Intro: Waiting weather dialog" stage_id="{stage_id}"/>
                    </Parallel>
                    <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Intro: Wait sync point for AUS weather interaction"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for AUS weather interaction to finish" num_sub_stages="18" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait AUS Weather" sub_stage_id="8" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Story Intro First Part AUS weather interaction" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Intro: Sync point passed"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="JAP weather interaction" num_sub_stages="18" stage="{stage}" stage_id="{stage_id}" sub_stage="JAP Weather" sub_stage_id="9" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <BlackboardCheckString name="Japan" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                <Sequence>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Intro: JAP weather TTS"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                    <WaitSeconds duration="0.5" name="Wait before TTS"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="It seems like some people like it hot and some people like it cold." result="tts_result"/>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Intro: JAP weather Wait speech"/>
                    <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for JAP students to comment on robot sentence" num_sub_stages="18" stage="{stage}" stage_id="{stage_id}" sub_stage="JAP Weather Speech" sub_stage_id="10" this_country="{this_country}" this_country_id="{this_country_id}"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Intro: Wait sync point for JAP weather interaction"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for JAP weather interaction to finish" num_sub_stages="18" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait JAP Weather" sub_stage_id="11" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Story Intro First Part JAP weather interaction" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Intro: Sync point passed"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="AUS robot speaks" num_sub_stages="18" stage="{stage}" stage_id="{stage_id}" sub_stage="AUS Robot" sub_stage_id="12" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <BlackboardCheckString name="Australia" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                <Sequence>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Intro: AUS TTS"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                    <WaitSeconds duration="{tts_wait}" name="Wait before TTS"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Cool, I think you can divide people into those that like the heat and those that like the cold. Let's have a look at the story" result="tts_result"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Intro: Wait sync point for AUS TTS"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for AUS robot to finish" num_sub_stages="18" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait AUS Robot" sub_stage_id="13" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Story Intro First Part AUS Second TTS" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Intro: Sync point passed"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="AUS insect interaction" num_sub_stages="18" stage="{stage}" stage_id="{stage_id}" sub_stage="AUS Insect" sub_stage_id="14" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <BlackboardCheckString name="Australia" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                <Sequence>
                    <MathOperationInt first="{num_ipads}" operator="-" output="aus_num_ipads" second="1"/>
                    <SubTree ID="GetRandomIpadData" __shared_blackboard="false" ipad_id="aus_random_id" ipad_register_result="{ipad_register_result}" ipad_user_json="dialog_params" number_of_ipads="{aus_num_ipads}"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                    <Parallel failure_threshold="2" success_threshold="1">
                        <SubTree ID="EMUnderstandEvent" __shared_blackboard="false" dialog_response="dialog_response" dialog_result="dialog_result" event_name="command-ask-for-insect" event_params="{dialog_params}" person_id="{aus_random_id}" timeout="0"/>
                        <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="AGH Story Stage: Intro: Waiting ask-insect dialog" stage_id="{stage_id}"/>
                    </Parallel>
                    <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Intro: Wait sync point for AUS insect interaction"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for AUS insect interaction" num_sub_stages="18" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait AUS Insect" sub_stage_id="15" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Story Intro Second Part AUS Insect Interaction" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Intro: Sync point passed"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="JAP insect interaction" num_sub_stages="18" stage="{stage}" stage_id="{stage_id}" sub_stage="JAP Insect" sub_stage_id="16" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <BlackboardCheckString name="Japan" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                <Sequence>
                    <MathOperationInt first="{num_ipads}" operator="-" output="jap_num_ipads" second="1"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Intro: JAP insect interaction"/>
                    <SubTree ID="GetRandomIpadData" __shared_blackboard="false" ipad_id="jap_random_id" ipad_register_result="{ipad_register_result}" ipad_user_json="dialog_params" number_of_ipads="{jap_num_ipads}"/>
                    <Action ID="AddKeyValueToJson" input_json="{empty_json}" input_key="insect_name" input_value="grasshopper" output="insect_json"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                    <Parallel failure_threshold="2" success_threshold="1">
                        <SubTree ID="EMUnderstandEvent" __shared_blackboard="false" dialog_response="dialog_response" dialog_result="dialog_result" event_name="command-ask-for-insect" event_params="{insect_json}" person_id="{jap_random_id}" timeout="0"/>
                        <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="AGH Story Stage: Intro: Waiting ask-insect dialog" stage_id="{stage_id}"/>
                    </Parallel>
                    <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Intro: Wait sync point for JAP insect interaction"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for JAP insect interaction" num_sub_stages="18" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait JAP Insect" sub_stage_id="17" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Story Intro Second Part JAP Insect Interaction" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Intro: Sync point passed"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="End of AGH Story Intro Stage. Following with AGH Story Begin stage" num_sub_stages="18" stage="{stage}" stage_id="{stage_id}" sub_stage="End" sub_stage_id="18" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <MathOperationInt first="{stage_id}" operator="+" output="stage_id" second="1"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Intro End"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="AGHStoryNextYear">
        <Sequence name="AGH Story Next Year">
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Next Year: Begins"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Begininng of AGH Next Year Stage. Turnning teleconference OFF" num_sub_stages="15" stage="{stage}" stage_id="{stage_id}" sub_stage="Begin" sub_stage_id="1" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <WaitSeconds duration="1" name="Wait before Teleco OFF"/>
            <SubTree ID="TeleconferenceOFF" __shared_blackboard="false"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Showing AGH Story Next Year video in projector" num_sub_stages="15" stage="{stage}" stage_id="{stage_id}" sub_stage="Next Year Video" sub_stage_id="2" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <Parallel failure_threshold="2" success_threshold="1">
                <SubTree ID="UnityProjectorShowVideoAndWait" __shared_blackboard="false" video_file="08_TAAG_NEXT_YEAR_IMAGE_AND_AUDIO"/>
                <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="AGH Story: Skip 08 NEXT YEAR" stage_id="{stage_id}"/>
            </Parallel>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Next Year: Wait sync point after video"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Wait for the other class to finish the video" num_sub_stages="15" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait Other Video" sub_stage_id="3" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <Parallel failure_threshold="2" success_threshold="1">
                <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="AGH Story Stage Next Year Video" sync_feed="sync_feed" sync_result="sync_result"/>
                <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="AGH Story Stage: Next Year: Wait sync point after video" stage_id="{stage_id}"/>
            </Parallel>
            <SubTree ID="UnityProjectorStopVideo"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Next Year: Sync passed"/>
            <SubTree ID="TeleconferenceON" __shared_blackboard="false"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="JAP robot speaks" num_sub_stages="15" stage="{stage}" stage_id="{stage_id}" sub_stage="JAP Robot" sub_stage_id="4" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <BlackboardCheckString name="Japan" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                <Sequence>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Next Year: JAP TTS"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="The Grasshopper taught the ants to loosen up a bit and have fun." result="tts_result"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Next Year: Wait sync point for JAP TTS"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for JAP robot to finish" num_sub_stages="15" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait JAP Robot" sub_stage_id="5" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="AGH Story Stage Next Year JAP TTS" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Next Year: Sync passed"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="AUS robot speaks" num_sub_stages="15" stage="{stage}" stage_id="{stage_id}" sub_stage="AUS Robot" sub_stage_id="6" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
            <BlackboardCheckString name="Australia" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                <Sequence>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Next Year: AUS TTS"/>
                    <WaitSeconds duration="{tts_wait}" name="Wait before TTS"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="And the ants taught the grasshopper to be a bit more prepared and that work is easier if you do it together.  What do you think?" result="tts_result"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Next Year: Wait sync point for AUS TTS"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for AUS robot to finish" num_sub_stages="15" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait AUS Robot" sub_stage_id="7" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="AGH Story Stage Next Year AUS TTS"/>
            <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Next Year: Sync passed"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Next Year: Wait for conversation"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for students in this class to have a conversation related to what AUS robot asked" num_sub_stages="15" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait Students Conversation" sub_stage_id="8" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Next Year: Conversation finished"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Next Year: Wait sync point for conversation in other class"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for students in the other class to have a conversation related to what AUS robot asked" num_sub_stages="15" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait Other Students Conversation" sub_stage_id="9" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="AGH Story Stage Next Year Wait Speech" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Next Year: Sync passed"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="JAP robot interaction" num_sub_stages="15" stage="{stage}" stage_id="{stage_id}" sub_stage="JAP Interaction" sub_stage_id="10" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
            <BlackboardCheckString name="Japan" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                <Sequence name="Sequenec">
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Next Year: JAP second TTS"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Maybe the grasshopper will teach the ants some style. I do love his waistcoat! Do you all think it would suit me? " result="tts_result"/>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Next Year: Wait for conversation"/>
                    <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for JAP students to answer robot question" num_sub_stages="15" stage="{stage}" stage_id="{stage_id}" sub_stage="JAP Interaction Speech" sub_stage_id="11" this_country="{this_country}" this_country_id="{this_country_id}"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Next Year: Wait sync point for JAP interaction"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for JAP interaction to finish" num_sub_stages="15" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait JAP Interaction" sub_stage_id="12" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="AGH Story Stage Next Year JAP interaction"/>
            <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Next Year: Sync passed"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="AUS robot speaks" num_sub_stages="15" stage="{stage}" stage_id="{stage_id}" sub_stage="AUS Robot" sub_stage_id="13" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <BlackboardCheckString name="Australia" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                <Sequence>
                    <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="I think you would look rather smart in it!" result="tts_result"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Next Year: Wait sync point for AUS second TTS"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for AUS robot to finish" num_sub_stages="15" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait AUS Robot" sub_stage_id="14" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="AGH Story Stage Next Year AUS Second TTS" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Next Year: Sync passed"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="End of AGH Story Next Year Stage. Following with AGH Story the end stage" num_sub_stages="15" stage="{stage}" stage_id="{stage_id}" sub_stage="End" sub_stage_id="15" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <MathOperationInt first="{stage_id}" operator="+" output="stage_id" second="1"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Next Year: Ends"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="AGHStoryStage">
        <Sequence name="AGH Story Stage">
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage Begins"/>
            <SubTree ID="AGHStoryIntro" __shared_blackboard="true"/>
            <SubTree ID="AGHStoryBegin" __shared_blackboard="true"/>
            <SubTree ID="AGHStoryBusyAnts" __shared_blackboard="true"/>
            <SubTree ID="AGHStoryComeChatWithMe" __shared_blackboard="true"/>
            <SubTree ID="AGHStoryDoYouThink" __shared_blackboard="true"/>
            <SubTree ID="AGHStoryWinter" __shared_blackboard="true"/>
            <SubTree ID="AGHStoryNextYear" __shared_blackboard="true"/>
            <SubTree ID="AGHStoryTheEnd" __shared_blackboard="true"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage Ends"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="AGHStoryTheEnd">
        <Sequence name="AGH Story The End">
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: The End: Begins"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Begininng of AGH The End Stage. Turnning teleconference OFF" num_sub_stages="8" stage="{stage}" stage_id="{stage_id}" sub_stage="Begin" sub_stage_id="1" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <WaitSeconds duration="1" name="Wait before Teleco OFF"/>
            <SubTree ID="TeleconferenceOFF" __shared_blackboard="false"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Showing AGH The End video in projector" num_sub_stages="8" stage="{stage}" stage_id="{stage_id}" sub_stage="The End Video" sub_stage_id="2" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <Parallel failure_threshold="2" success_threshold="1">
                <SubTree ID="UnityProjectorShowVideoAndWait" __shared_blackboard="false" video_file="09_TAAG_THE_END_IMAGE_AND_AUDIO"/>
                <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="AGH Story: Skip 09 THE END" stage_id="{stage_id}"/>
            </Parallel>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: The End: Wait sync point after video"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for the other class to finish the video" num_sub_stages="8" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait Other Video" sub_stage_id="3" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="AGH Story Stage The End Video" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="UnityProjectorStopVideo"/>
            <SubTree ID="TeleconferenceON" __shared_blackboard="false"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: The End: Sync passed"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="JAP robot speaks" num_sub_stages="8" stage="{stage}" stage_id="{stage_id}" sub_stage="JAP Robot" sub_stage_id="4" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <BlackboardCheckString name="Japan" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                <Sequence>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: The End: JAP TTS"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="A fabulous story if I do say so myself. I love it for lots of reasons but especially because it shows that everyone has something to offer once you get to know them." result="tts_result"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: The End: Wait sync point for JAP TTS"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for JAP robot to finish" num_sub_stages="8" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait JAP Robot" sub_stage_id="5" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="AGH Story Stage The End JAP TTS" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: The End: Sync passed"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="AUS robot speaks" num_sub_stages="8" stage="{stage}" stage_id="{stage_id}" sub_stage="AUS Robot" sub_stage_id="6" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <BlackboardCheckString name="Australia" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                <Sequence>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: The End: AUS TTS"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                    <WaitSeconds duration="{tts_wait}" name="Wait before TTS"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Anyway, that's the end of our Rant about ants.  Lets see whats next" result="tts_result"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: The End: Wait sync point for AUS TTS"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for AUS robot to finish" num_sub_stages="8" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait AUS Robot" sub_stage_id="7" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="AGH Story Stage The End AUS TTS" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: The End: Sync passed"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="End of AGH Story The End Stage. Following with kanji 1 stage" num_sub_stages="8" stage="{stage}" stage_id="{stage_id}" sub_stage="End" sub_stage_id="8" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <MathOperationInt first="{stage_id}" operator="+" output="stage_id" second="1"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: The End: Ends"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="AGHStoryWinter">
        <Sequence name="AGH Story Winter">
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Winter: Begins"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Begininng of AGH Winter Stage. Turnning teleconference OFF" num_sub_stages="13" stage="{stage}" stage_id="{stage_id}" sub_stage="Begin" sub_stage_id="1" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <WaitSeconds duration="2" name="Wait before Teleco OFF"/>
            <SubTree ID="TeleconferenceOFF" __shared_blackboard="false"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Showing AGH Winter video in projector" num_sub_stages="13" stage="{stage}" stage_id="{stage_id}" sub_stage="Winter Video" sub_stage_id="2" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <Parallel failure_threshold="2" success_threshold="1">
                <Parallel failure_threshold="1" success_threshold="2">
                    <SubTree ID="UnityProjectorShowVideoAndWait" __shared_blackboard="false" video_file="06_TAAG_WHEN_THE_WINTER_CAME_IMAGE_AND_AUDIO"/>
                    <Sequence>
                        <WaitSeconds duration="3"/>
                        <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="111"/>
                    </Sequence>
                </Parallel>
                <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="AGH Story: Skip 06 WINTER" stage_id="{stage_id}"/>
            </Parallel>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Showing AGH Winter Question video in projector" num_sub_stages="13" stage="{stage}" stage_id="{stage_id}" sub_stage="Winter Question Video" sub_stage_id="3" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="UnityProjectorShowVideoAndWait" __shared_blackboard="false" video_file="07_TAAG_QUESTION_MARK_IMAGE_AND_AUDIO"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Winter: Wait sync point after video"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for the other class to finish the videos" num_sub_stages="13" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait Other Videos" sub_stage_id="4" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="AGH Story Stage Winter Video" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="UnityProjectorStopVideo"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Winter: Sync passed"/>
            <SubTree ID="TeleconferenceON" __shared_blackboard="false"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="JAP robot speaks" num_sub_stages="13" stage="{stage}" stage_id="{stage_id}" sub_stage="JAP Robot" sub_stage_id="5" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
            <BlackboardCheckString name="Japan" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                <Sequence>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Winter: JAP TTS"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="I've heard that making mistakes is crucial to learning but I don’t know how the grasshopper didn’t think to collect food." result="tts_result"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Winter: Wait sync point for JAP TTS"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for JAP robot to finish" num_sub_stages="13" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait JAP Robot" sub_stage_id="6" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="AGH Story Stage Winter JAP TTS" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Winter: Sync passed"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="AUS robot speaks" num_sub_stages="13" stage="{stage}" stage_id="{stage_id}" sub_stage="AUS Robot" sub_stage_id="7" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
            <BlackboardCheckString name="Australia" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                <Sequence>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Winter: AUS TTS"/>
                    <WaitSeconds duration="{tts_wait}" name="Wait before TTS"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="I've seen how many cooking shows there are so I thought that food is all that organic creatures think about! How often do you think about food?" result="tts_result"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Winter: Wait sync point for AUS TTS"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for AUS robot to finish" num_sub_stages="13" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait AUS Robot" sub_stage_id="8" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="SyncMsg Winter Ready Button"/>
            <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Winter: Conversation finished"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Winter: Wait sync point for conversation in other class"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for students in the other class to have a conversation related to what AUS robot asked" num_sub_stages="13" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait Other Students Conversation" sub_stage_id="10" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Winter: Sync passed"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="JAP robot speaks" num_sub_stages="13" stage="{stage}" stage_id="{stage_id}" sub_stage="JAP Robot" sub_stage_id="11" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="EMSyncPointAndSkipButton" __shared_blackboard="false" bt_id="{bt_id}" msg_skip_ipad="Food Question: Waiting for Both ends to finish talking about food" msg_to_sync="Food Question: Sync Point" stage_id="{stage_id}"/>
            <BlackboardCheckString name="Japan" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                <Sequence>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Winter: JAP second TTS"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="I certainly can’t relate to food. I get fed nothing but code!" result="tts_result"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Winter: Wait sync point for JAP second TTS"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for JAP robot to finish" num_sub_stages="13" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait JAP Robot" sub_stage_id="12" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="AGH Story Stage Winter AUS Second TTS" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Winter: Sync passed"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="End of AGH Story Winter Stage. Following with AGH story next year" num_sub_stages="13" stage="{stage}" stage_id="{stage_id}" sub_stage="End" sub_stage_id="13" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <MathOperationInt first="{stage_id}" operator="+" output="stage_id" second="1"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Story Stage: Winter: Ends"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="ASRWaitSpeakingStarts">
        <Action ID="WaitSpeakingStartsAction" action="/strawberry_ros_speech_detection_node/wait_starts_speaking" mics_id="{mics_id}" serialized_feedback="feedback" serialized_result="result" state="state" timeout="{start_timeout}"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="ASRWaitSpeakingStops">
        <Action ID="WaitSpeakingStopsAction" action="/strawberry_ros_speech_detection_node/wait_stops_speaking" hard_timeout="{total_speaking_timeout}" mics_id="{mics_id}" serialized_feedback="feedback" serialized_result="result" soft_timeout="{in_between_timeout}" state="state"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="Add1ToStageID">
        <Sequence>
            <MathOperationInt first="{stage_id}" operator="+" output="stage_id" second="1"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="AntsLessonStage">
        <Sequence name="AGH Ants Lesson Stage">
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Ants Lesson Begins"/>
            <SubTree ID="AGHAntsLessonIntro" __shared_blackboard="true"/>
            <SubTree ID="AGHQueensAndDrones" __shared_blackboard="true"/>
            <SubTree ID="AGHQueensChat" __shared_blackboard="true"/>
            <SubTree ID="AGHKanji2" __shared_blackboard="true"/>
            <SubTree ID="AGHCultureComparison" __shared_blackboard="true"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="AGH Ants Lesson Ends"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="AvatarCreationStage">
        <Sequence>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Avatar Stage: Starting"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Avatar Stage: Video Creation" num_sub_stages="7" stage="{stage}" stage_id="{stage_id}" sub_stage="Video Intro" sub_stage_id="1" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SetBlackboard output_key="cont_video" value="0"/>
            <Parallel failure_threshold="1" success_threshold="3">
                <Loop>
                    <SubTree ID="UnityProjectorShowVideoAndWait" __shared_blackboard="false" video_file="AvatarCreation_Howto"/>
                </Loop>
                <WaitSeconds duration="{stop_video_time}"/>
                <Sequence>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Avatar Stage: Explanation Video"/>
                    <Sequence>
                        <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Avatar Stage: Comments"/>
                        <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Avatar Stage: Avatar Creation" num_sub_stages="7" stage="{stage}" stage_id="{stage_id}" sub_stage="Avatar section" sub_stage_id="2" this_country="{this_country}" this_country_id="{this_country_id}"/>
                        <SubTree ID="lookAtChildren" __shared_blackboard="false" table_height="{table_height}" table_horizontal="{table_horizontal}" table_proximity="{table_proximity}"/>
                        <Sequence>
                            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="On your iPad, you will find avatar creation settings to make your own fun little avatar! " result="tts_result"/>
                            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="This avatar will represent you in the chat and the Gallery. " result="tts_result"/>
                            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="You can choose wich head, what color shirt and background you think represents you best." result="tts_result"/>
                        </Sequence>
                    </Sequence>
                    <WaitSeconds duration="1"/>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Avatar Stage: Comments Over"/>
                    <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Avatar Stage: Avatar Enabling" num_sub_stages="7" stage="{stage}" stage_id="{stage_id}" sub_stage="Avatar Creation" sub_stage_id="3" this_country="{this_country}" this_country_id="{this_country_id}"/>
                    <Sequence>
                        <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Avatar Stage: Comments 2"/>
                        <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Avatar Stage: Second Comment " num_sub_stages="7" stage="{stage}" stage_id="{stage_id}" sub_stage="Comment 2" sub_stage_id="4" this_country="{this_country}" this_country_id="{this_country_id}"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="I think I am either The panda or The flower. Which one do you think suits me best?" result="tts_result"/>
                        <WaitMilliseconds duration="500"/>
                    </Sequence>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Avatar Stage: Second Comments Over"/>
                    <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Avatar Stage: Waiting for the other class to finish" num_sub_stages="7" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait Othe IPad Avatar" sub_stage_id="5" this_country="{this_country}" this_country_id="{this_country_id}"/>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Avatar Stage: User Registration FInished"/>
                    <MathOperationInt first="{cont_video}" operator="+" output="cont_video" second="1"/>
                </Sequence>
                <Sequence>
                    <Parallel failure_threshold="2" success_threshold="2">
                        <SubTree ID="EMIPadUserRegistrationAndWait" __shared_blackboard="false" feedback="ipad_register_feedback" ipad_ids="-1" result="ipad_register_result" timeout="-1"/>
                        <Sequence>
                            <Inverter>
                                <WhileSuccess>
                                    <Inverter>
                                        <CompareStrings comparison_op="==" first="{cont_video}" second="1"/>
                                    </Inverter>
                                </WhileSuccess>
                            </Inverter>
                        </Sequence>
                        <Loop>
                            <Sequence>
                                <WaitSeconds duration="1"/>
                                <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="808"/>
                                <WaitSeconds duration="1.5"/>
                                <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="410"/>
                            </Sequence>
                        </Loop>
                    </Parallel>
                    <Sequence>
                        <Action ID="ConvertMessageField" field="/user_names" input="{ipad_register_result}" output="user_names_field"/>
                        <Action ID="GetJsonSize" input="{user_names_field}" output="num_ipads"/>
                        <Fallback>
                            <BlackboardCheckInt return_on_mismatch="FAILURE" value_A="{num_ipads}" value_B="3">
                                <SetBlackboard output_key="photosharing_layout_mode" value="5"/>
                            </BlackboardCheckInt>
                            <BlackboardCheckInt return_on_mismatch="FAILURE" value_A="{num_ipads}" value_B="4">
                                <SetBlackboard output_key="photosharing_layout_mode" value="3"/>
                            </BlackboardCheckInt>
                            <SetBlackboard output_key="photosharing_layout_mode" value="3"/>
                        </Fallback>
                    </Sequence>
                    <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Avatar Stage: Registration finished" sync_feed="sync_feed" sync_result="sync_result"/>
                </Sequence>
            </Parallel>
            <SubTree ID="UnityProjectorStopVideo"/>
            <WaitSeconds duration="{stop_video_time}"/>
            <Action ID="UnityProjectorCommandProfilesConfiguration" animation_mode="1" animation_time="{transition_time}" coupled="0" display_number="0" do_animation="true" latch="0" layout_mode="0" queue_size="1" return_default="false" topic="/unity_projector/user_profiles/configuration"/>
            <WaitSeconds duration="{stop_video_time}"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Avatar Stage: Show students avatars on the projector" num_sub_stages="7" stage="{stage}" stage_id="{stage_id}" sub_stage="Avatar Projector" sub_stage_id="6" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="lookAtTV" __shared_blackboard="false" screen_height="{screen_height}" screen_horizontal="{screen_horizontal}" screen_proximity="{screen_proximity}"/>
            <ForceSuccess>
                <Sequence>
                    <CompareStrings comparison_op="!=" first="" second="{ipad_register_result}"/>
                    <Action ID="ConvertMessageField" field="/avatars_path" input="{ipad_register_result}" output="ipad_avatars"/>
                    <Action ID="ConvertMessageField" field="/ipad_ids" input="{ipad_register_result}" output="ipad_ids"/>
                    <Action ID="ConvertMessageField" field="/user_names" input="{ipad_register_result}" output="ipad_user_names"/>
                    <IfThenElse>
                        <CompareStrings comparison_op="==" first="{this_country}" second="{country_1}"/>
                        <SetBlackboard output_key="kids_1" value="{ipad_user_names}"/>
                        <SetBlackboard output_key="kids_2" value="{ipad_user_names}"/>
                    </IfThenElse>
                    <SubTree ID="UnityProjectorSetProfiles" __shared_blackboard="false" avatars="{ipad_avatars}" avatars_are_paths="true" ipad_ids="{ipad_ids}" user_names="{ipad_user_names}"/>
                </Sequence>
            </ForceSuccess>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Avatar Stage: Third Comment" num_sub_stages="7" stage="{stage}" stage_id="{stage_id}" sub_stage="Comment 3" sub_stage_id="7" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <Sequence>
                <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Now you can have a look at your avatar that you created." result="tts_result"/>
                <SubTree ID="UnityProjectorShowProfiles"/>
                <WaitSeconds duration="1"/>
                <SubTree ID="lookAtTV" __shared_blackboard="false" screen_height="{screen_height}" screen_horizontal="{screen_horizontal}" screen_proximity="{screen_proximity}"/>
                <WaitSeconds duration="0.5"/>
                <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="This really looks good!" result="tts_result"/>
                <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="613"/>
                <Parallel failure_threshold="2" success_threshold="1">
                    <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="Avatar Stage: Show avatar finished"/>
                    <Loop>
                        <Sequence>
                            <WaitSeconds duration="1"/>
                            <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="808"/>
                            <WaitSeconds duration="1"/>
                        </Sequence>
                    </Loop>
                </Parallel>
            </Sequence>
            <SubTree ID="UnityProjectorShowOffProfiles"/>
            <WaitSeconds duration="{stop_video_time}"/>
            <SubTree ID="lookAtChildren" __shared_blackboard="false" table_height="{table_height}" table_horizontal="{table_horizontal}" table_proximity="{table_proximity}"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Avatar Stage: finished"/>
            <SubTree ID="Add1ToStageID" __shared_blackboard="true"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Avatar Stage: Over"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="AvatarCreationStage_one_screen">
        <Sequence>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Avatar Stage: Starting"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Avatar Stage: Video Creation" num_sub_stages="7" stage="{stage}" stage_id="{stage_id}" sub_stage="Video Intro" sub_stage_id="1" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SetBlackboard output_key="cont_video" value="0"/>
            <Parallel failure_threshold="1" success_threshold="3">
                <Loop>
                    <SubTree ID="UnityProjectorShowVideoAndWait" __shared_blackboard="false" video_file="AvatarCreation_Howto"/>
                </Loop>
                <WaitSeconds duration="{stop_video_time}"/>
                <Sequence>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Avatar Stage: Explanation Video"/>
                    <Sequence>
                        <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Avatar Stage: Comments"/>
                        <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Avatar Stage: Avatar Creation" num_sub_stages="7" stage="{stage}" stage_id="{stage_id}" sub_stage="Avatar section" sub_stage_id="2" this_country="{this_country}" this_country_id="{this_country_id}"/>
                        <SubTree ID="lookAtChildren" __shared_blackboard="false" table_height="{table_height}" table_horizontal="{table_horizontal}" table_proximity="{table_proximity}"/>
                        <Sequence>
                            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="On your iPad, you will find avatar creation settings to make your own fun little avatar! " result="tts_result"/>
                            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="This avatar will represent you in the chat and the Gallery. " result="tts_result"/>
                            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="You can choose wich head, what color shirt and background you think represents you best." result="tts_result"/>
                        </Sequence>
                    </Sequence>
                    <WaitSeconds duration="1"/>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Avatar Stage: Comments Over"/>
                    <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Avatar Stage: Avatar Enabling" num_sub_stages="7" stage="{stage}" stage_id="{stage_id}" sub_stage="Avatar Creation" sub_stage_id="3" this_country="{this_country}" this_country_id="{this_country_id}"/>
                    <Sequence>
                        <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Avatar Stage: Comments 2"/>
                        <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Avatar Stage: Second Comment " num_sub_stages="7" stage="{stage}" stage_id="{stage_id}" sub_stage="Comment 2" sub_stage_id="4" this_country="{this_country}" this_country_id="{this_country_id}"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="I think I am either The panda or The flower. Which one do you think suits me best?" result="tts_result"/>
                        <WaitMilliseconds duration="500"/>
                    </Sequence>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Avatar Stage: Second Comments Over"/>
                    <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Avatar Stage: Waiting for the other class to finish" num_sub_stages="7" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait Othe IPad Avatar" sub_stage_id="5" this_country="{this_country}" this_country_id="{this_country_id}"/>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Avatar Stage: User Registration FInished"/>
                    <MathOperationInt first="{cont_video}" operator="+" output="cont_video" second="1"/>
                </Sequence>
                <Sequence>
                    <Parallel failure_threshold="2" success_threshold="2">
                        <SubTree ID="EMIPadUserRegistrationAndWait" __shared_blackboard="false" feedback="ipad_register_feedback" ipad_ids="-1" result="ipad_register_result" timeout="-1"/>
                        <Sequence>
                            <Inverter>
                                <WhileSuccess>
                                    <Inverter>
                                        <CompareStrings comparison_op="==" first="{cont_video}" second="1"/>
                                    </Inverter>
                                </WhileSuccess>
                            </Inverter>
                        </Sequence>
                        <Loop>
                            <Sequence>
                                <WaitSeconds duration="1"/>
                                <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="808"/>
                                <WaitSeconds duration="1.5"/>
                                <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="410"/>
                            </Sequence>
                        </Loop>
                    </Parallel>
                    <Sequence>
                        <Action ID="ConvertMessageField" field="/user_names" input="{ipad_register_result}" output="user_names_field"/>
                        <Action ID="GetJsonSize" input="{user_names_field}" output="num_ipads"/>
                        <Fallback>
                            <BlackboardCheckInt return_on_mismatch="FAILURE" value_A="{num_ipads}" value_B="3">
                                <SetBlackboard output_key="photosharing_layout_mode" value="5"/>
                            </BlackboardCheckInt>
                            <BlackboardCheckInt return_on_mismatch="FAILURE" value_A="{num_ipads}" value_B="4">
                                <SetBlackboard output_key="photosharing_layout_mode" value="3"/>
                            </BlackboardCheckInt>
                            <SetBlackboard output_key="photosharing_layout_mode" value="3"/>
                        </Fallback>
                    </Sequence>
                    <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Avatar Stage: Registration finished" sync_feed="sync_feed" sync_result="sync_result"/>
                </Sequence>
            </Parallel>
            <SubTree ID="UnityProjectorStopVideo"/>
            <WaitSeconds duration="{stop_video_time}"/>
            <Action ID="UnityProjectorCommandProfilesConfiguration" animation_mode="1" animation_time="{transition_time}" coupled="0" display_number="0" do_animation="true" latch="0" layout_mode="0" queue_size="1" return_default="false" topic="/unity_projector/user_profiles/configuration"/>
            <WaitSeconds duration="{stop_video_time}"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Avatar Stage: Show students avatars on the projector" num_sub_stages="7" stage="{stage}" stage_id="{stage_id}" sub_stage="Avatar Projector" sub_stage_id="6" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="lookAtTV" __shared_blackboard="false" screen_height="{screen_height}" screen_horizontal="{screen_horizontal}" screen_proximity="{screen_proximity}"/>
            <ForceSuccess>
                <Sequence>
                    <CompareStrings comparison_op="!=" first="" second="{ipad_register_result}"/>
                    <Action ID="ConvertMessageField" field="/avatars_path" input="{ipad_register_result}" output="ipad_avatars"/>
                    <Action ID="ConvertMessageField" field="/ipad_ids" input="{ipad_register_result}" output="ipad_ids"/>
                    <Action ID="ConvertMessageField" field="/user_names" input="{ipad_register_result}" output="ipad_user_names"/>
                    <IfThenElse>
                        <CompareStrings comparison_op="==" first="{this_country}" second="{country_1}"/>
                        <SetBlackboard output_key="kids_1" value="{ipad_user_names}"/>
                        <SetBlackboard output_key="kids_2" value="{ipad_user_names}"/>
                    </IfThenElse>
                    <SubTree ID="UnityProjectorSetProfiles" __shared_blackboard="false" avatars="{ipad_avatars}" avatars_are_paths="true" ipad_ids="{ipad_ids}" user_names="{ipad_user_names}"/>
                </Sequence>
            </ForceSuccess>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Avatar Stage: Third Comment" num_sub_stages="7" stage="{stage}" stage_id="{stage_id}" sub_stage="Comment 3" sub_stage_id="7" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <Sequence>
                <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Now you can have a look at your avatar that you created." result="tts_result"/>
                <SubTree ID="UnityProjectorShowProfiles"/>
                <WaitSeconds duration="1"/>
                <SubTree ID="lookAtTV" __shared_blackboard="false" screen_height="{screen_height}" screen_horizontal="{screen_horizontal}" screen_proximity="{screen_proximity}"/>
                <WaitSeconds duration="0.5"/>
                <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="This really looks good!" result="tts_result"/>
                <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="613"/>
                <Parallel failure_threshold="2" success_threshold="1">
                    <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="Avatar Stage: Show avatar finished"/>
                    <Loop>
                        <Sequence>
                            <WaitSeconds duration="1"/>
                            <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="808"/>
                            <WaitSeconds duration="1"/>
                        </Sequence>
                    </Loop>
                </Parallel>
            </Sequence>
            <SubTree ID="UnityProjectorShowOffProfiles"/>
            <WaitSeconds duration="{stop_video_time}"/>
            <SubTree ID="lookAtChildren" __shared_blackboard="false" table_height="{table_height}" table_horizontal="{table_horizontal}" table_proximity="{table_proximity}"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Avatar Stage: finished"/>
            <SubTree ID="Add1ToStageID" __shared_blackboard="true"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Avatar Stage: Over"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="BehaviorTree">
        <Fallback>
            <Sequence>
                <Sequence>
                    <Sequence>
                        <Action ID="LoadYamlFile" file_path="/home/haru/haru_interactions_ws/src/imitation_game/trees/config/tv_and_children_positions.yaml" output="yaml_result"/>
                        <Action ID="ConvertMessageField" field="/screen_height" input="{yaml_result}" output="screen_height"/>
                        <Action ID="ConvertMessageField" field="/table_height" input="{yaml_result}" output="table_height"/>
                        <Action ID="ConvertMessageField" field="/table_horizontal" input="{yaml_result}" output="table_horizontal"/>
                        <Action ID="ConvertMessageField" field="/table_proximity" input="{yaml_result}" output="table_proximity"/>
                        <Action ID="ConvertMessageField" field="/screen_horizontal" input="{yaml_result}" output="screen_horizontal"/>
                        <WaitSeconds duration="1"/>
                        <Action ID="ConvertMessageField" field="/screen_proximity" input="{yaml_result}" output="screen_proximity"/>
                        <Action ID="InfoLog" message="${table_horizontal}"/>
                    </Sequence>
                    <SubTree ID="UnityProjectorShowImage" __shared_blackboard="false" image_file="/home/haru/haru_interactions_ws/src/imitation_game/pictures/imitation.png"/>
                    <RetryUntilSuccessful num_attempts="-1">
                        <Sequence>
                            <SetBlackboard output_key="people" value=""/>
                            <SetBlackboard output_key="people_header" value=""/>
                            <Action ID="StrawberryMonitorPeople" consume_msgs="1" queue_size="1" serialized_output="people_vector" topic="/strawberry/people"/>
                            <WaitSeconds duration="1"/>
                            <Action ID="ConvertMessageField" field="/people/0" input="{people_vector}" output="check_empty"/>
                            <Action ID="ConvertMessageField" field="/people" input="{people_vector}" output="people"/>
                            <Action ID="ConvertMessageField" field="/header" input="{people_vector}" output="people_header"/>
                        </Sequence>
                    </RetryUntilSuccessful>
                    <SubTree ID="lookAtChildren" __shared_blackboard="false" table_height="{table_height}" table_horizontal="{table_horizontal}" table_proximity="{table_proximity}"/>
                </Sequence>
                <Sequence>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="&lt;routine&gt;wave&lt;/routine&gt;&lt;spurt audio='g0001_408'&gt;Heeeeeeey!&lt;/spurt&gt;&#10;&lt;break type=&quot;3&quot; time=&quot;1.5&quot;/&gt; My name is Haru" result="tts_result"/>
                    <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="929"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="&lt;usel genre='question'&gt; Would you like to play the Imitation Game with me?&lt;/usel&gt;" result="tts_result"/>
                    <SubTree ID="StrawberryEnableASR"/>
                    <WaitSeconds duration="1"/>
                    <RetryUntilSuccessful num_attempts="-1">
                        <Parallel failure_threshold="1" success_threshold="2">
                            <Fallback>
                                <ForceFailure>
                                    <WaitMilliseconds duration="250"/>
                                </ForceFailure>
                                <SubTree ID="StrawberryGetASR" asr_result="asr" asr_result_conf="asrC" asr_result_msg="asrM"/>
                            </Fallback>
                            <Fallback>
                                <SubTree ID="IsHaruRoutinePlaying"/>
                                <SubTree ID="HaruExecuteRoutine" routines="3"/>
                            </Fallback>
                        </Parallel>
                    </RetryUntilSuccessful>
                    <Action ID="InfoLog" message="${asr}"/>
                    <Sequence>
                        <SubTree ID="HaruNlpYesNo" answer="answer" transcription="${asr}"/>
                        <Action ID="InfoLog" message="${answer}"/>
                        <CompareStrings comparison_op="==" first="${answer}" second="Yes"/>
                    </Sequence>
                    <SubTree ID="StrawberryDisableASR"/>
                </Sequence>
                <Sequence>
                    <SubTree ID="HaruExecuteRoutine" routines="7"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="&lt;usel genre=&quot;highnrg&quot;&gt;Awesome!&lt;/usel&gt; Let me explain how this game works.&lt;break type=&quot;3&quot; time=&quot;1.5&quot;/&gt; &lt;voice emotion='calm'&gt;&lt;spurt audio='g0001_006'&gt;clear throat&lt;/spurt&gt;I am going to perform an action, and then you try to copy me. &lt;/voice&gt; " result="tts_result"/>
                    <SubTree ID="HaruExecuteRoutine" routines="7"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="&lt;break type=&quot;3&quot; time=&quot;1.0&quot;/&gt;Got it?" result="tts_result"/>
                </Sequence>
                <WhileSuccess>
                    <Sequence>
                        <Sequence>
                            <WaitSeconds duration="5"/>
                            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Get ready. Here I go!" result="tts_result"/>
                            <SubTree ID="UnityProjectorShowImage" __shared_blackboard="false" image_file="/home/haru/haru_interactions_ws/src/imitation_game/pictures/myTurn.png"/>
                        </Sequence>
                        <Sequence>
                            <RandomSequenceValue delimiter=";" output="first_routine" sequence="610;826;690;952;609;600"/>
                            <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="${first_routine}"/>
                            <WaitSeconds duration="1"/>
                            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="&lt;usel genre=&quot;highnrg&quot;&gt;OK. Now it is your turn&lt;/usel&gt;&lt;break type=&quot;3&quot; time=&quot;1.0&quot; /&gt; Let us see your best Haru impression, you have 5 seconds." result="tts_result"/>
                            <Action ID="PublishStdString" data="file:///home/haru/haru_interactions_ws/src/imitation_game/pictures/imitation_pages/timer_imitate/show_camera.html" latch="0" name="Set URL of page to show" queue_size="1" topic="/unity_projector/browser/set"/>
                            <Action ID="PublishStdBool" data="true" latch="0" name="Show web browser" queue_size="1" topic="/unity_projector/browser/show"/>
                            <Sequence>
                                <RandomSequenceValue delimiter=";" output="listening_feedback_routine" sequence="129;131;528"/>
                                <SubTree ID="HaruExecuteRoutine" routines="${listening_feedback_routine}"/>
                                <WaitSeconds duration="3"/>
                                <ForceSuccess>
                                    <SubTree ID="HaruTakePhoto" image_name="user_face" path="/home/haru/haru_interactions_ws/src/imitation_game/pictures/imitation_pages/gestures_screenshot/images/"/>
                                </ForceSuccess>
                                <RetryUntilSuccessful num_attempts="-1">
                                    <Sequence>
                                        <Action ID="HaruMonitorBrowser" consume_msgs="0" queue_size="1" serialized_output="json" topic="/idmind_tabletop/browser_action"/>
                                        <Action ID="ConvertMessageField" field="/data" input="{json}" output="browser_status"/>
                                        <CompareStrings comparison_op="==" first="{browser_status}" second="done"/>
                                    </Sequence>
                                </RetryUntilSuccessful>
                                <Sequence>
                                    <SubTree ID="lookAtTV" __shared_blackboard="false" screen_height="{screen_height}" screen_horizontal="{screen_horizontal}" screen_proximity="{screen_proximity}"/>
                                    <ConcatenateStrings first="file:///home/haru/haru_interactions_ws/src/imitation_game/pictures/imitation_pages/gestures_screenshot/gestures_screenshot.html?routine=" output="url" second="${first_routine}"/>
                                    <Action ID="PublishStdString" data="${url}" latch="0" queue_size="1" topic="/unity_projector/browser/set"/>
                                    <WaitSeconds duration="6"/>
                                    <SubTree ID="lookAtChildren" __shared_blackboard="false" table_height="{table_height}" table_horizontal="{table_horizontal}" table_proximity="{table_proximity}"/>
                                </Sequence>
                            </Sequence>
                        </Sequence>
                        <Sequence>
                            <RandomSequenceValue delimiter=";" output="second_routine" sequence="1042;801;543;606"/>
                            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="&lt;routine&gt;surprise&lt;/routine&gt;&lt;spurt audio='g0001_354 '&gt;Uh-huh&lt;/spurt&gt; that’s pretty good. &lt;break type=&quot;3&quot; time=&quot;1.5&quot; /&gt;&lt;usel genre='question'&gt;But can you do this?&lt;/usel&gt;;&lt;routine&gt;surprise&lt;/routine&gt;&lt;usel genre=&quot;highnrg&quot;&gt;That is not bad! &lt;break type=&quot;3&quot; time=&quot;1.5&quot; /&gt;&lt;/usel&gt;&lt;usel genre='question'&gt;But what if I did this instead?&lt;/usel&gt;;&lt;routine&gt;cheeky&lt;/routine&gt;&lt;usel genre=&quot;highnrg&quot;&gt;&lt;spurt audio='g0001_002'&gt;tut tut&lt;/spurt&gt;Not bad, not bad.&lt;break type=&quot;3&quot; time=&quot;1.0&quot; /&gt; But let us see how good you really are.&lt;/usel&gt; " result="tts_result"/>
                            <SubTree ID="UnityProjectorShowImage" __shared_blackboard="false" image_file="/home/haru/haru_interactions_ws/src/imitation_game/pictures/myTurn.png"/>
                            <Action ID="PublishStdBool" data="false" latch="0" queue_size="1" topic="/unity_projector/browser/show"/>
                            <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="${second_routine}"/>
                        </Sequence>
                        <Sequence>
                            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="&lt;usel genre=&quot;cheeky&quot;&gt;I bet you did not think I could do that. &lt;break type=&quot;3&quot; time=&quot;1.5&quot; /&gt;Let us see if you can match it&lt;/usel&gt;;&lt;usel genre=&quot;cheeky&quot;&gt;You were not expecting that, were you? &lt;break type=&quot;3&quot; time=&quot;1.5&quot; /&gt;Your turn!&lt;/usel&gt;;&lt;voice emotion='happy'&gt; Pretty impressive, right?&lt;break type=&quot;3&quot; time=&quot;1.5&quot; /&gt;Most robots can not do that!&lt;/voice&gt;.&lt;break type=&quot;3&quot; time=&quot;1.0&quot; /&gt; &lt;usel genre='question'&gt;Can you?&lt;/usel&gt;;&lt;usel genre=&quot;cheeky&quot;&gt;&lt;spurt audio='g0001_052'&gt;gasp&lt;/spurt&gt;Wow. &lt;break type=&quot;3&quot; time=&quot;1.0&quot; /&gt;Where did that come from?&lt;break type=&quot;3&quot; time=&quot;1.0&quot; /&gt; I surprise myself sometimes. &lt;break type=&quot;3&quot; time=&quot;1.5&quot; /&gt;Can you do that?&lt;/usel&gt;;&lt;usel genre=&quot;highnrg&quot;&gt;That took me a long time to learn,&lt;break type=&quot;3&quot; time=&quot;0.5&quot; /&gt; but my hard work paid off&lt;break type=&quot;3&quot; time=&quot;1.5&quot; /&gt;Now you try!&lt;/usel&gt;" result="tts_result"/>
                            <Action ID="PublishStdString" data="file:///home/haru/haru_interactions_ws/src/imitation_game/pictures/imitation_pages/timer_imitate/show_camera.html" latch="0" queue_size="1" topic="/unity_projector/browser/set"/>
                            <Action ID="PublishStdBool" data="true" latch="0" queue_size="1" topic="/unity_projector/browser/show"/>
                            <Sequence>
                                <RandomSequenceValue delimiter=";" output="listening_feedback_routine" sequence="129;131;528"/>
                                <SubTree ID="HaruExecuteRoutine" routines="${listening_feedback_routine}"/>
                                <WaitSeconds duration="3"/>
                                <ForceSuccess>
                                    <SubTree ID="HaruTakePhoto" image_name="user_face" path="/home/haru/haru_interactions_ws/src/imitation_game/pictures/imitation_pages/gestures_screenshot/images/"/>
                                </ForceSuccess>
                                <RetryUntilSuccessful num_attempts="-1">
                                    <Sequence>
                                        <Action ID="HaruMonitorBrowser" consume_msgs="0" queue_size="1" serialized_output="json" topic="/idmind_tabletop/browser_action"/>
                                        <Action ID="ConvertMessageField" field="/data" input="{json}" output="browser_status"/>
                                        <CompareStrings comparison_op="==" first="{browser_status}" second="done"/>
                                    </Sequence>
                                </RetryUntilSuccessful>
                                <Sequence>
                                    <SubTree ID="lookAtTV" __shared_blackboard="false" screen_height="{screen_height}" screen_horizontal="{screen_horizontal}" screen_proximity="{screen_proximity}"/>
                                    <ConcatenateStrings first="file:///home/haru/haru_interactions_ws/src/imitation_game/pictures/imitation_pages/gestures_screenshot/gestures_screenshot.html?routine=" output="url" second="${second_routine}"/>
                                    <Action ID="PublishStdString" data="${url}" latch="0" queue_size="1" topic="/unity_projector/browser/set"/>
                                    <WaitSeconds duration="6"/>
                                    <SubTree ID="lookAtChildren" __shared_blackboard="false" table_height="{table_height}" table_horizontal="{table_horizontal}" table_proximity="{table_proximity}"/>
                                </Sequence>
                            </Sequence>
                            <SubTree ID="HaruExecuteRoutine" routines="613"/>
                            <Action ID="PublishStdBool" data="false" latch="0" queue_size="1" topic="/unity_projector/browser/show"/>
                            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="&lt;usel genre=&quot;highnrg&quot;&gt;Not bad, not bad. &lt;break type=&quot;3&quot; time=&quot;1.0&quot; /&gt;Let us switch things up.  &lt;break type=&quot;3&quot; time=&quot;0.5&quot; /&gt;You do something, and I will try and imitate you.&lt;break type=&quot;3&quot; time=&quot;1.0&quot; /&gt; Ready? &lt;break type=&quot;3&quot; time=&quot;1.0&quot; /&gt;Go!&lt;/usel&gt;" result="tts_result"/>
                            <Action ID="PublishStdString" data="file:///home/haru/haru_interactions_ws/src/imitation_game/pictures/imitation_pages/timer_imitate/show_camera.html" latch="0" queue_size="1" topic="/unity_projector/browser/set"/>
                            <Action ID="PublishStdBool" data="true" latch="0" queue_size="1" topic="/unity_projector/browser/show"/>
                            <Sequence>
                                <RandomSequenceValue delimiter=";" output="listening_feedback_routine" sequence="129;131;528"/>
                                <SubTree ID="HaruExecuteRoutine" routines="${listening_feedback_routine}"/>
                                <WaitSeconds duration="3"/>
                                <ForceSuccess>
                                    <SubTree ID="HaruTakePhoto" image_name="user_face" path="/home/haru/haru_interactions_ws/src/imitation_game/pictures/imitation_pages/gestures_screenshot/images/"/>
                                </ForceSuccess>
                                <RetryUntilSuccessful num_attempts="-1">
                                    <Sequence>
                                        <Action ID="HaruMonitorBrowser" consume_msgs="0" queue_size="1" serialized_output="json" topic="/idmind_tabletop/browser_action"/>
                                        <Action ID="ConvertMessageField" field="/data" input="{json}" output="browser_status"/>
                                        <CompareStrings comparison_op="==" first="{browser_status}" second="done"/>
                                    </Sequence>
                                </RetryUntilSuccessful>
                            </Sequence>
                        </Sequence>
                        <Sequence>
                            <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="102"/>
                            <Action ID="PublishStdBool" data="false" latch="0" queue_size="1" topic="/unity_projector/browser/show"/>
                            <SubTree ID="HaruSpeakExpressive" text="Okay. Here is my impression of you. "/>
                            <SubTree ID="UnityProjectorShowImage" __shared_blackboard="false" image_file="/home/haru/haru_interactions_ws/src/imitation_game/pictures/myTurn.png"/>
                            <RandomSequenceValue delimiter=";" output="third_routine" sequence="1034;1006;613;200;620"/>
                            <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="${third_routine}"/>
                            <SubTree ID="lookAtTV" __shared_blackboard="false" screen_height="{screen_height}" screen_horizontal="{screen_horizontal}" screen_proximity="{screen_proximity}"/>
                            <ConcatenateStrings first="file:///home/haru/haru_interactions_ws/src/imitation_game/pictures/imitation_pages/gestures_screenshot/gestures_screenshot.html?routine=" output="url" second="${third_routine}"/>
                            <Action ID="PublishStdBool" data="true" latch="0" queue_size="1" topic="/unity_projector/browser/show"/>
                            <Action ID="PublishStdString" data="${url}" latch="0" queue_size="1" topic="/unity_projector/browser/set"/>
                            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="&lt;usel genre=&quot;happy&quot;&gt;What did you think? &lt;break type=&quot;3&quot; time=&quot;0.5&quot; /&gt;Pretty good, right?&lt;/usel&gt;;&lt;spurt audio='g0001_038'&gt;oh negative&lt;/spurt&gt;&lt;usel genre=&quot;sad&quot;&gt;OK. &lt;break type=&quot;3&quot; time=&quot;0.5&quot; /&gt;That was not my best work.&lt;/usel&gt; &lt;break type=&quot;3&quot; time=&quot;1.0&quot; /&gt;&lt;usel genre=&quot;cheeky&quot;&gt;But you were not really being fair!&lt;/usel&gt;&#10;;&lt;usel genre=&quot;highnrg&quot;&gt;Nailed it! &lt;/usel&gt; &lt;break type=&quot;3&quot; time=&quot;1.0&quot; /&gt;&lt;usel genre=&quot;whiny&quot;&gt;But now I am dizzy.&lt;/usel&gt; &lt;break type=&quot;3&quot; time=&quot;1.0&quot; /&gt;&lt;usel genre=&quot;serious&quot;&gt;Anyway...&lt;/usel&gt;;&lt;usel genre=&quot;highnrg&quot;&gt;That’s you. &lt;break type=&quot;3&quot; time=&quot;1.0&quot; /&gt;That’s what you look like to me.&lt;/usel&gt;;&lt;usel genre=&quot;highnrg&quot;&gt;You should see your face.!&lt;/usel&gt;&lt;spurt audio='g0001_050'&gt;ha ha (sarcastic)&lt;/spurt&gt;&lt;break type=&quot;3&quot; time=&quot;1.5&quot; /&gt; &lt;usel genre=&quot;cheeky&quot;&gt;You are stunned at how well I captured your essence.&lt;/usel&gt;" result="tts_result"/>
                            <WaitSeconds duration="3"/>
                            <SubTree ID="lookAtChildren" __shared_blackboard="false" table_height="{table_height}" table_horizontal="{table_horizontal}" table_proximity="{table_proximity}"/>
                            <SubTree ID="HaruExecuteRoutine" routines="616"/>
                        </Sequence>
                        <Sequence>
                            <WaitSeconds duration="2"/>
                            <SubTree ID="UnityProjectorShowImage" __shared_blackboard="false" image_file="/home/haru/haru_interactions_ws/src/imitation_game/pictures/ending_imitation.png"/>
                            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="&lt;routine&gt;yes&lt;/routine&gt;&lt;usel genre=&quot;highnrg&quot;&gt;I think I did a great job. &lt;break type=&quot;3&quot; time=&quot;1.0&quot; /&gt;I win! &lt;/usel&gt;&lt;spurt audio='g0001_036'&gt;yay&lt;/spurt&gt;&lt;break type=&quot;3&quot; time=&quot;1.0&quot; /&gt;&lt;usel genre=&quot;highnrg&quot;&gt;But you put in a good effort.&lt;/usel&gt; " result="tts_result"/>
                            <SubTree ID="HaruExecuteRoutine" routines="627"/>
                            <Fallback>
                                <Sequence>
                                    <WaitSeconds duration="2"/>
                                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Do you want to play again?" result="tts_result"/>
                                    <SubTree ID="StrawberryEnableASR"/>
                                    <RetryUntilSuccessful num_attempts="-1">
                                        <Parallel failure_threshold="1" success_threshold="2">
                                            <Fallback>
                                                <ForceFailure>
                                                    <WaitMilliseconds duration="250"/>
                                                </ForceFailure>
                                                <SubTree ID="StrawberryGetASR" asr_result="asr" asr_result_conf="asrC" asr_result_msg="asrM"/>
                                            </Fallback>
                                            <Fallback>
                                                <SubTree ID="IsHaruRoutinePlaying"/>
                                                <SubTree ID="HaruExecuteRoutine" routines="3"/>
                                            </Fallback>
                                        </Parallel>
                                    </RetryUntilSuccessful>
                                    <Sequence>
                                        <SubTree ID="HaruNlpYesNo" answer="transcript" transcription="${asr}"/>
                                        <Action ID="InfoLog" message="${transcript}"/>
                                        <CompareStrings comparison_op="==" first="${transcript}" second="Yes"/>
                                    </Sequence>
                                    <SubTree ID="StrawberryDisableASR"/>
                                </Sequence>
                                <ForceFailure>
                                    <Sequence>
                                        <SubTree ID="HaruSpeakExpressive" text="If you want a rematch, come back anytime."/>
                                        <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="612"/>
                                    </Sequence>
                                </ForceFailure>
                            </Fallback>
                        </Sequence>
                    </Sequence>
                </WhileSuccess>
            </Sequence>
            <Sequence>
                <SubTree ID="HaruProjectorStop"/>
                <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="&lt;routine&gt;wave&lt;/routine&gt;Bye bye" result="tts_result"/>
            </Sequence>
        </Fallback>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="CallingStage">
        <Sequence>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Calling Stage: Starting"/>
            <Sequence>
                <Action ID="UnityProjectorCommandVideoPlayerConfiguration" animation_time="{transition_time}" coupled="0" display_number="0" do_animation="true" info_avatar_file="" info_name="" info_tag="" latch="0" pose_mode="0" queue_size="1" return_default="false" show_info="false" size_mode="0" topic="/unity_projector/video_player/configuration"/>
                <Action ID="UnityProjectorCommandVideoPlayerConfiguration" animation_time="{transition_time}" coupled="0" display_number="1" do_animation="true" info_avatar_file="" info_name="" info_tag="" latch="0" pose_mode="0" queue_size="1" return_default="false" show_info="false" size_mode="0" topic="/unity_projector/video_player_2/configuration"/>
            </Sequence>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Calling Stage: Video Configured"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Calling Stage: Displaying Call" num_sub_stages="2" stage="{stage}" stage_id="{stage_id}" sub_stage="Begging" sub_stage_id="1" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <Parallel failure_threshold="1" success_threshold="1">
                <Parallel failure_threshold="2" success_threshold="2">
                    <Loop>
                        <SubTree ID="UnityProjectorShowVideoAndWait" __shared_blackboard="false" video_file="Australia_Japan_Map_TalkingRoom_PR_new"/>
                    </Loop>
                    <Loop>
                        <SubTree ID="UnityProjectorShowVideoAndWait_2" __shared_blackboard="false" video_file2="Australia_Japan_Map_TalkingRoom_PR_new"/>
                    </Loop>
                </Parallel>
                <Parallel failure_threshold="1" success_threshold="1">
                    <Sequence>
                        <WaitSeconds duration="0.5"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Let me now connect you to your peers ….&#10;" result="tts_result"/>
                        <Loop>
                            <Sequence>
                                <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="410"/>
                                <WaitSeconds duration="2"/>
                                <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="808"/>
                                <WaitSeconds duration="2"/>
                            </Sequence>
                        </Loop>
                    </Sequence>
                    <Sequence>
                        <WaitSeconds duration="2"/>
                        <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="{stage}"/>
                    </Sequence>
                </Parallel>
            </Parallel>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Calling Stage: Video Call Video Displayed and HAru Comment Done"/>
            <SubTree ID="lookAtTV" __shared_blackboard="false" screen_height="{screen_height}" screen_horizontal="{screen_horizontal}" screen_proximity="{screen_proximity}"/>
            <SubTree ID="UnityProjectorStopVideo"/>
            <SubTree ID="UnityProjectorStopVideo_2"/>
            <SubTree ID="Add1ToStageID" __shared_blackboard="true"/>
            <WaitSeconds duration="{stop_video_time}" name="WaitSecond"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Calling Stage: Over"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="CallingStage_one_screen">
        <Sequence>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Calling Stage: Starting"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Calling Stage: Video Configured"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Calling Stage: Displaying Call" num_sub_stages="2" stage="{stage}" stage_id="{stage_id}" sub_stage="Begging" sub_stage_id="1" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <Parallel failure_threshold="1" success_threshold="1">
                <Loop>
                    <SubTree ID="UnityProjectorShowVideoAndWait" __shared_blackboard="false" video_file="Australia_Japan_Map_TalkingRoom_PR_new"/>
                </Loop>
                <Parallel failure_threshold="1" success_threshold="1">
                    <Sequence>
                        <WaitSeconds duration="0.5"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Let me now connect you to your peers ….&#10;" result="tts_result"/>
                        <Loop>
                            <Sequence>
                                <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="410"/>
                                <WaitSeconds duration="2"/>
                                <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="808"/>
                                <WaitSeconds duration="2"/>
                            </Sequence>
                        </Loop>
                    </Sequence>
                    <Sequence>
                        <WaitSeconds duration="2"/>
                        <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="{stage}"/>
                    </Sequence>
                </Parallel>
            </Parallel>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Calling Stage: Video Call Video Displayed and HAru Comment Done"/>
            <SubTree ID="lookAtTV" __shared_blackboard="false" screen_height="{screen_height}" screen_horizontal="{screen_horizontal}" screen_proximity="{screen_proximity}"/>
            <SubTree ID="UnityProjectorStopVideo"/>
            <SubTree ID="Add1ToStageID" __shared_blackboard="true"/>
            <WaitSeconds duration="{stop_video_time}" name="WaitSecond"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Calling Stage: Over"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="DialogWithStudentbyID">
        <Sequence>
            <Concatenate3Strings first="/user_names/" output="person_name_field" second="{user_id}" string_3="/data"/>
            <Action ID="ConvertMessageField" field="{person_name_field}" input="{ipad_register_result}" output="person_name"/>
            <Action ID="InitializeJson" output="dialog_params"/>
            <Action ID="AddKeyValueToJson" input_json="{dialog_params}" input_key="person_name" input_value="{person_name}" output="dialog_params"/>
            <Action ID="AddKeyValueToJson" input_json="{dialog_params}" input_key="tags" input_value="{tag}" output="{dialog_params}"/>
            <Action ID="AddKeyValueToJson" input_json="{dialog_params}" input_key="tag_verb" input_value="eat" output="{dialog_params}"/>
            <SubTree ID="EMUnderstandEvent" __shared_blackboard="false" dialog_response="dialog_response" dialog_result="dialog_result" event_name="command-ask-about-photo" event_params="{dialog_params}" person_id="1" timeout="0"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="EMBTExchangeInfo">
        <Action ID="BTCommandExchangeInfoAction" action="/behavior_tree/exchange_info" bt_id="{bt_id}" info_data="{data}" info_type="{data_type}" serialized_feedback="exchange_feedback" serialized_result="exchange_result" state="exchange_state"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="EMBTSyncPoint">
        <Action ID="BTCommandHandShakeAction" action="/behavior_tree/handshake" bt_id="{bt_id}" message="{message}" serialized_feedback="sync_feed" serialized_result="sync_result" state="sync_state"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="EMDialogEvent">
        <Sequence>
            <Fallback name="arg person_id to iterable json array person_ids">
                <Action ID="SplitStringToJsonArray" delimiter=";" json_size="" name="Case: Multiple person IDs" output_json="person_ids" sequence="{person_id}"/>
                <Sequence name="Case: only one person ID">
                    <Action ID="InitializeJson" output="person_ids"/>
                    <Action ID="AddArrayToJson" input_json="{person_ids}" input_key="" input_value="{person_id}" output_json="person_ids" override="1"/>
                </Sequence>
            </Fallback>
            <SetBlackboard output_key="dialog_response" value=""/>
            <SetBlackboard output_key="dialog_result" value=""/>
            <Parallel failure_threshold="2" success_threshold="2">
                <Sequence>
                    <OnlyOnce>
                        <WaitMilliseconds duration="400" name="Wait for the dialog subscriber creation"/>
                    </OnlyOnce>
                    <Decorator ID="ForEachLoop" break_on_child_failure="false" input="{person_ids}" output_element="id" output_index="index">
                        <Sequence>
                            <Action ID="ConvertJsonToString" input="{id}" output="id_str"/>
                            <SubTree ID="StrawberrySetDialogEvent" event_name="${event_name}" parameters="${event_params}" person_id="{id_str}" result="result" success="success"/>
                        </Sequence>
                    </Decorator>
                </Sequence>
                <Timeout msec="${timeout_msec}" name="10 seconds to proccess the event  ">
                    <Inverter>
                        <WhileSuccess>
                            <Inverter>
                                <Sequence name="Get Dialog">
                                    <SubTree ID="StrawberryGetDialog" dialog_response="dialog_response_tmp" dialog_result="dialog_result_tmp"/>
                                    <SubTree ID="StrawberryGetDialogIntent" dialog_intent="dialog_intent" dialog_intent_confidence="dialog_intent_conf" dialog_result="{dialog_result_tmp}"/>
                                    <Action ID="ConvertMessageField" field="/person_id" input="{dialog_result_tmp}" name="Get person ID" output="dialog_person_id"/>
                                    <SetBlackboard output_key="found" value="0"/>
                                    <Decorator ID="ForEachLoop" break_on_child_failure="false" input="{person_ids}" output_element="id" output_index="index">
                                        <Sequence>
                                            <Action ID="ConvertJsonToString" input="{id}" output="id_str"/>
                                            <CompareNumbers comparison_op="==" first="{id_str}" name="Check the result is from the same person_id" second="{dialog_person_id}"/>
                                            <SetBlackboard output_key="found" value="1"/>
                                        </Sequence>
                                    </Decorator>
                                    <CheckBool input="{found}"/>
                                    <CompareStrings comparison_op="==" first="${event_name}" name="Check the intent is the event name" second="{dialog_intent}"/>
                                    <SetBlackboard output_key="dialog_response" value="${dialog_response_tmp}"/>
                                    <SetBlackboard output_key="dialog_result" value="${dialog_result_tmp}"/>
                                </Sequence>
                            </Inverter>
                        </WhileSuccess>
                    </Inverter>
                </Timeout>
            </Parallel>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="EMIPadInteractionState">
        <Sequence>
            <SubTree ID="EMIPadLocalInteractionState" __shared_blackboard="false" description="{description}" num_sub_stages="{num_sub_stages}" stage="{stage}" stage_id="{stage_id}" sub_stage="{sub_stage}" sub_stage_id="{sub_stage_id}" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="EMIPadRemoteInteractionState" __shared_blackboard="false" description="{description}" num_sub_stages="{num_sub_stages}" stage="{stage}" stage_id="{stage_id}" sub_stage="{sub_stage}" sub_stage_id="{sub_stage_id}" this_country="{this_country}" this_country_id="{this_country_id}"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="EMIPadKanjiWriteAndWait">
        <Action ID="EMCommandIPadKanjiWriteAction" action="/haru_ipad_kanji_write_action_server" ipad_ids.data="{ipad_ids}" message.data="{message}" serialized_feedback="feedback" serialized_result="result" state="state" timeout.data="{timeout}"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="EMIPadLocalInteractionState">
        <Action ID="EMCommandIPadInteractionState" country.data="{this_country}" country_id.data="{this_country_id}" description.data="{description}" header.frame_id="{this_country}" header.seq="1" latch="0" number_of_sub_stages.data="{num_sub_stages}" queue_size="1" stage.data="{stage}" stage_id.data="{stage_id}" sub_stage.data="{sub_stage}" sub_stage_id.data="{sub_stage_id}" topic="/local/interaction_state"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="EMIPadQuestionAndWait">
        <Action ID="EMCommandIPadQuestionAction" action="/haru_ipad_question_action_server" choices.data="{choices}" ipad_ids.data="{ipad_ids}" question.data="{question}" serialized_feedback="question_feed" serialized_result="question_result" state="question_state" timeout.data="{timeout}" user_input_type.data="{question_type}"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="EMIPadRemoteInteractionState">
        <Action ID="EMCommandIPadInteractionState" country.data="{this_country}" country_id.data="{this_country_id}" description.data="{description}" header.frame_id="{this_country}" header.seq="1" latch="0" number_of_sub_stages.data="{num_sub_stages}" queue_size="1" stage.data="{stage}" stage_id.data="{stage_id}" sub_stage.data="{sub_stage}" sub_stage_id.data="{sub_stage_id}" topic="/remote/interaction_state"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="EMIPadRequestImageAndWait">
        <Action ID="EMCommandIPadRequestImageAction" action="/haru_ipad_request_image_action_server" available_tags.data="{tags}" ipad_ids.data="{ipad_ids}" message.data="{message}" serialized_feedback="feedback" serialized_result="result" state="state" timeout.data="{timeout}"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="EMIPadSyncPointButton">
        <Action ID="EMCommandIPadSyncPointButtonAction" action="/haru_ipad_sync_point_button_action_server" serialized_feedback="feedback" serialized_result="result" state="state"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="EMIPadTeacherSkipAndWait">
        <Action ID="EMCommandIPadSkipSectionAction" action="/haru_ipad_skip_section_action_server" serialized_feedback="skip_feedback" serialized_result="skip_result" stage_description.data="{stage_description}" stage_id.data="{stage_id}" state="skip_state"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="EMIPadUserRegistrationAndWait">
        <Action ID="EMCommandIPadUserRegistrationAction" action="/haru_ipad_user_registration_action_server" ipad_ids.data="{ipad_ids}" serialized_feedback="feedback" serialized_result="result" state="state" timeout.data="{timeout}"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="EMSyncPoint">
        <Sequence>
            <ConcatenateStrings first="{stage}" output="first_sync_msg" second=" Sync Before iPad Button"/>
            <ConcatenateStrings first="{stage}" output="second_sync_msg" second=" Sync After iPad Button"/>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="{first_sync_msg}" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="EMIPadSyncPointButton"/>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="{second_sync_msg}" sync_feed="sync_feed" sync_result="sync_result"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="EMSyncPointAndSkipButton">
        <Parallel failure_threshold="2" success_threshold="1">
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="{msg_to_sync}" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="{msg_skip_ipad}" stage_id="{stage_id}"/>
        </Parallel>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="EMUnderstandEvent">
        <ForceSuccess>
            <Sequence>
                <Fallback name="arg person_id to iterable json array person_ids">
                    <Action ID="SplitStringToJsonArray" delimiter=";" json_size="" name="Case: Multiple person IDs" output_json="person_ids" sequence="{person_id}"/>
                    <Sequence name="Case: only one person ID">
                        <Action ID="InitializeJson" output="person_ids"/>
                        <Action ID="AddArrayToJson" input_json="{person_ids}" input_key="" input_value="{person_id}" output_json="person_ids" override="1"/>
                    </Sequence>
                </Fallback>
                <Action ID="DebugLog" message="Entered an Unverstand-type interaction subtree." name="Log that we are in Understand-type situation"/>
                <SetBlackboard output_key="dialog_response" value=""/>
                <Action ID="DebugLog" message="Trying to trigger a dialog event..." name="Indicate that a Dialog event is being raised"/>
                <SubTree ID="EMDialogEvent" __shared_blackboard="false" dialog_response="dialog_response_tmp" dialog_result="dialog_result" event_name="{event_name}" event_params="{event_params}" person_id="{person_id}" timeout_msec="0"/>
                <Action ID="DebugLog" message="Trying to trigger a dialog event...done." name="Log success"/>
                <Action ID="DebugLog" message="Trying to send speech from dialog event to TTS..." name="Log that TTS is being used"/>
                <SetBlackboard output_key="question" value="{dialog_response_tmp}"/>
                <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="{dialog_response_tmp}" result="tts_result"/>
                <Parallel failure_threshold="1" success_threshold="2">
                    <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="4"/>
                    <KeepRunningUntilFailure name="Loop while Dialog doesn't set conversation_finished to True">
                        <Sequence name="Keep this running until Dialog returns conversaion_finished or timeout ">
                            <SubTree ID="StrawberryEnableASRById" __shared_blackboard="false" person_id="{person_id}"/>
                            <SetBlackboard output_key="dialog_response" value=""/>
                            <SubTree ID="StrawberryEnableASRById" __shared_blackboard="false" person_id="{person_id}"/>
                            <Fallback>
                                <Timeout msec="{timeout}">
                                    <Inverter>
                                        <WhileSuccess>
                                            <Inverter>
                                                <Sequence>
                                                    <SubTree ID="StrawberryGetDialog" dialog_response="dialog_response_tmp" dialog_result="dialog_result_understand_event"/>
                                                    <Action ID="ConvertMessageField" field="/person_id" input="{dialog_result_understand_event}" output="dialog_person_id"/>
                                                    <SetBlackboard output_key="found" value="0"/>
                                                    <Decorator ID="ForEachLoop" break_on_child_failure="false" input="{person_ids}" output_element="id" output_index="index">
                                                        <Sequence>
                                                            <Action ID="ConvertJsonToString" input="{id}" output="id_str"/>
                                                            <CompareNumbers comparison_op="==" first="{id_str}" second="{dialog_person_id}"/>
                                                            <SetBlackboard output_key="found" value="1"/>
                                                        </Sequence>
                                                    </Decorator>
                                                    <CheckBool input="{found}"/>
                                                </Sequence>
                                            </Inverter>
                                        </WhileSuccess>
                                    </Inverter>
                                </Timeout>
                                <ForceSuccess>
                                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Ok, let's continue now. " result="tts_result"/>
                                </ForceSuccess>
                            </Fallback>
                            <SetBlackboard output_key="dialog_result" value=""/>
                            <Fallback>
                                <BlackboardCheckString return_on_mismatch="FAILURE" value_A="{question}" value_B="{dialog_response_tmp}">
                                    <Action ID="InfoLog" message="Same question and dialog"/>
                                </BlackboardCheckString>
                                <Sequence>
                                    <SubTree ID="StrawberryDisableAllASR"/>
                                    <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="322"/>
                                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="{dialog_response_tmp}" result="tts_result"/>
                                </Sequence>
                            </Fallback>
                            <SetBlackboard output_key="conversation_finished" value=""/>
                            <Action ID="ConvertMessageField" field="/conversation_finished" input="{dialog_result_understand_event}" output="conversation_finished"/>
                            <Inverter>
                                <CheckBool input="${conversation_finished}"/>
                            </Inverter>
                        </Sequence>
                    </KeepRunningUntilFailure>
                </Parallel>
                <Action ID="DebugLog" message="Understand-type interaction ending." name="Log that the subtree is ending"/>
            </Sequence>
        </ForceSuccess>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="ExecuteTreeAndWait">
        <Action ID="ExecuteRemoteTree" action="/behavior_tree/load_tree_action" state="state" tree_file.data="{tree_file}"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="ExplanationStage">
        <Sequence name="Explanation Stage">
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Explanation Stage: Beginning"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Explanation Stage: Sending Home"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Beginning of Explanation Stage. Sending robot to initial position" num_sub_stages="5" stage="{stage}" stage_id="{stage_id}" sub_stage="Begin" sub_stage_id="1" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <WaitSeconds duration="2" name="Waiting GoHome"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Explanation Stage: Sending Home Over"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Explanation Stage: Initiating Explanation"/>
            <Parallel failure_threshold="2" name="Skip " success_threshold="1">
                <Sequence>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Explanation Stage: First Video and Comment Starting"/>
                    <Parallel failure_threshold="1" name="Unity video along TTS" success_threshold="3">
                        <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Video and TTS explaining the class method" num_sub_stages="5" stage="{stage}" stage_id="{stage_id}" sub_stage="Explanation Learning" sub_stage_id="2" this_country="{this_country}" this_country_id="{this_country_id}"/>
                        <SubTree ID="UnityProjectorShowVideoAndWait" __shared_blackboard="false" video_file="01_Explanation_Learning"/>
                        <Sequence>
                            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="It is called the talking room so that we can talk about a whole lot of things and get to know each other." result="tts_result"/>
                            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases=" By the end of this we will all have new friends." result="tts_result"/>
                            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="I am sooo happy to get out of the lab and meet new people. " result="tts_result"/>
                            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="And I love talking!" result="tts_result"/>
                            <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="903"/>
                        </Sequence>
                    </Parallel>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Explanation Stage: First Video Over "/>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Explanation Stage: Second Video and Comment Starting"/>
                    <Sequence>
                        <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Video and TTS explaning the iPad features" num_sub_stages="5" stage="{stage}" stage_id="{stage_id}" sub_stage="Explanation Features" sub_stage_id="3" this_country="{this_country}" this_country_id="{this_country_id}"/>
                        <SubTree ID="UnityProjectorShowVideoAndWait" __shared_blackboard="false" video_file="02_Explanation_Features"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Wow... I think the Gallery is going to be one of my favourite things!" result="tts_result"/>
                        <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="611"/>
                    </Sequence>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Explanation Stage: Second Video Over "/>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Explanation Stage: Privacy Video Starting"/>
                    <Parallel failure_threshold="1" name="Unity video along TTS" success_threshold="3">
                        <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Video and TTS explaning the privacy policies" num_sub_stages="5" stage="{stage}" stage_id="{stage_id}" sub_stage="Explanation Privacy" sub_stage_id="4" this_country="{this_country}" this_country_id="{this_country_id}"/>
                        <SubTree ID="UnityProjectorShowVideoAndWait" __shared_blackboard="false" video_file="03_Explanation_Privacy"/>
                        <Sequence>
                            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Your information is yours, not mine. I need data in order to make me a better robot, and to make our interactions more engaging, but it is really important that you protect your privacy." result="tts_result"/>
                            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Remember that this is The Talking Room, so if you are worried about anything, talk to us" result="tts_result"/>
                            <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="903"/>
                        </Sequence>
                    </Parallel>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Explanation Stage: Privacy Video Over"/>
                </Sequence>
                <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="Explanation Stage Unity video and robot talking" stage_id="{stage_id}"/>
            </Parallel>
            <SubTree ID="UnityProjectorStopVideo"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Explanation Stage: Explanation Videos and Comments Over"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="End of Explanation Stage. Following with Introduce Classes stage" num_sub_stages="5" stage="{stage}" stage_id="{stage_id}" sub_stage="End" sub_stage_id="5" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <MathOperationInt first="{stage_id}" operator="+" output="stage_id" second="1"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Explanation Stage Over"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="FarewellStage">
        <Sequence>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Farewell Stage: Starting"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Farewell Stage: Starting" num_sub_stages="3" stage="{stage}" stage_id="{stage_id}" sub_stage="Starting last teleconference" sub_stage_id="1" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <Action ID="UnityProjectorCommandStaticImageConfiguration" animation_mode="0" animation_time="1.0" coupled="0" display_number="0" do_animation="true" latch="0" position_mode="0" queue_size="1" return_default="false" size_mode="0" topic="/unity_projector/static_image/configure"/>
            <WaitSeconds duration="1"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Farewell Stage: Configuring Teleconference"/>
            <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
            <SubTree ID="UnityProjectorWherebyCameraON"/>
            <SubTree ID="UnityProjectorShowImage" __shared_blackboard="false" image_file="EP02_Farewell"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Farewell Stage: Starting goodbye Harus comments"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Farewell Stage: Goodbye Harus comments" num_sub_stages="3" stage="{stage}" stage_id="{stage_id}" sub_stage="Starting goodbye Harus comments" sub_stage_id="2" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="lookAtTV" __shared_blackboard="false" screen_height="{screen_height}" screen_horizontal="{screen_horizontal}" screen_proximity="{screen_proximity}"/>
            <BlackboardCheckString return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                <Sequence name="Mute JAPAN">
                    <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                </Sequence>
            </BlackboardCheckString>
            <BlackboardCheckString return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                <Sequence name="AUS Comment">
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Farewell Stage: AUS goodbye comment"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Thank you for sharing all your photos. " result="tts_result"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Nice to see the differences and similarities between Australian and Japanese Schools!&#10;" result="tts_result"/>
                    <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="903"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Farewell Stage: AUS goodbye comment done"/>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Farewell Stage: Waiting AUS goodbye comment" sync_feed="sync_feed" sync_result="sync_result"/>
            <BlackboardCheckString return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                <Sequence name="JAPAN Comment">
                    <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Farewell Stage: JAPAN goodbye comment"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="That concludes today’s episode." result="tts_result"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Excited to see you all next time! Bye for now!" result="tts_result"/>
                    <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="903"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Farewell Stage: Goodbye Harus comments finished"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Farewell Stage: Stage finished" num_sub_stages="3" stage="{stage}" stage_id="{stage_id}" sub_stage="Finish stage" sub_stage_id="3" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
            <Parallel failure_threshold="1" success_threshold="1">
                <Loop>
                    <Sequence>
                        <WaitSeconds duration="2"/>
                        <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="410"/>
                        <WaitSeconds duration="2"/>
                        <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="808"/>
                    </Sequence>
                </Loop>
                <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="Last Sync Msg and Demo Over"/>
            </Parallel>
            <Action ID="UnityProjectorCommandWherebyShow" latch="0" queue_size="1" show_teleconference="false" topic="/unity_projector/whereby/show"/>
            <WaitSeconds duration="{stop_video_time}"/>
            <SubTree ID="UnityProjectorWherebyCameraOFF"/>
            <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
            <SubTree ID="TeleconferenceOFF" __shared_blackboard="false"/>
            <Sequence>
                <SubTree ID="lookAtChildren" __shared_blackboard="false" table_height="{table_height}" table_horizontal="{table_horizontal}" table_proximity="{table_proximity}"/>
                <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Thank you all for your attention!" result="tts_result"/>
                <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="I hope you had fun and learnt something!" result="tts_result"/>
                <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="See you soon! " result="tts_result"/>
                <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="900"/>
            </Sequence>
            <SubTree ID="Add1ToStageID" __shared_blackboard="true"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Farewell Stage: Over"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="FindDialogEntity">
        <Sequence>
            <SetBlackboard output_key="entity_found" value="0"/>
            <Decorator ID="ForEachLoop" break_on_child_failure="false" input="{entities_list}" output_element="entity_type" output_index="">
                <Sequence>
                    <Action ID="ConvertMessageField" field="/display_name" input="{entity_type}" output="entity_type_name"/>
                    <FindSubstrings input="{entity_type_name}" substrings="{entities_name}"/>
                    <SetBlackboard output_key="entity_found" value="1"/>
                    <Action ID="ConvertMessageField" field="/entities" input="{entity_type}" output="entity_elements"/>
                    <Action ID="ConvertMessageField" field="/display_name" input="{entity_type}" output="entity_name"/>
                </Sequence>
            </Decorator>
            <CheckBool input="{entity_found}"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="FocusAndDialogVariablesWithSyncs">
        <Sequence>
            <Action ID="ConvertMessageField" field="/ipad_ids" input="{ipad_register_result}" output="ids_field"/>
            <Action ID="InfoLog" message="{ids_field}"/>
            <Action ID="InfoLog" message="{ipad_register_result}"/>
            <SetBlackboard output_key="cont" value="0"/>
            <SetBlackboard output_key="username_index" value="0"/>
            <Decorator ID="ForEachLoop" break_on_child_failure="false" input="{ids_field}" output_element="id_to_compare" output_index="id_index">
                <Fallback>
                    <Sequence>
                        <Action ID="ConvertMessageField" field="/data" input="{id_to_compare}" output="tentative_id"/>
                        <Action ID="InfoLog" message="{ipad_id}"/>
                        <Action ID="InfoLog" message="{tentative_id}"/>
                        <CompareNumbers comparison_op="==" first="{ipad_id}" second="{tentative_id}"/>
                        <SetBlackboard output_key="username_index" value="{cont}"/>
                    </Sequence>
                    <MathOperationInt first="{cont}" operator="+" output="cont" second="1"/>
                </Fallback>
            </Decorator>
            <Action ID="ConvertMessageField" field="/ipad_ids" input="{ipad_image_result}" output="ids_image_field"/>
            <SetBlackboard output_key="cont_image" value="0"/>
            <SetBlackboard output_key="image_index" value="0"/>
            <Decorator ID="ForEachLoop" break_on_child_failure="false" input="{ids_image_field}" output_element="{id_to_compare_image}" output_index="id_index_image">
                <Fallback>
                    <Sequence>
                        <Action ID="ConvertMessageField" field="/data" input="{id_to_compare_image}" output="tentative_id_image"/>
                        <CompareNumbers comparison_op="==" first="{ipad_id}" second="{tentative_id_image}"/>
                        <SetBlackboard output_key="image_index" value="{cont_image}"/>
                    </Sequence>
                    <MathOperationInt first="{cont_image}" operator="+" output="cont_image" second="1"/>
                </Fallback>
            </Decorator>
            <Concatenate3Strings first="/ipad_ids/" output="field" second="{image_index}" string_3="/data"/>
            <Action ID="ConvertMessageField" field="{field}" input="{ipad_image_result}" output="id"/>
            <Action ID="InfoLog" message="{id}"/>
            <Concatenate3Strings first="/tags/" output="field" second="{image_index}" string_3="/data"/>
            <Action ID="ConvertMessageField" field="{field}" input="{ipad_image_result}" output="tag"/>
            <Action ID="InfoLog" message="{tag}"/>
            <Concatenate3Strings first="/user_names/" output="field" second="{username_index}" string_3="/data"/>
            <Action ID="ConvertMessageField" field="{field}" input="{ipad_register_result}" output="username"/>
            <Action ID="InfoLog" message="{username}"/>
            <Action ID="InitializeJson" output="temp_dialog_params"/>
            <Action ID="AddKeyValueToJson" input_json="{temp_dialog_params}" input_key="tag" input_value="{tag}" output="temp_dialog_params"/>
            <Action ID="InfoLog" message="{temp_dialog_params}"/>
            <Action ID="AddKeyValueToJson" input_json="{temp_dialog_params}" input_key="person_name" input_value="{username}" output="temp_dialog_params"/>
            <Sequence>
                <BlackboardCheckString return_on_mismatch="SUCCESS" value_A="{tag}" value_B="school_lunch">
                    <Action ID="AddKeyValueToJson" input_json="{temp_dialog_params}" input_key="tag_verb" input_value="eat" output="dialog_params"/>
                </BlackboardCheckString>
                <BlackboardCheckString return_on_mismatch="SUCCESS" value_A="{tag}" value_B="school_sports">
                    <Action ID="AddKeyValueToJson" input_json="{temp_dialog_params}" input_key="tag_verb" input_value="play" output="dialog_params"/>
                </BlackboardCheckString>
                <BlackboardCheckString return_on_mismatch="SUCCESS" value_A="{tag}" value_B="transpo">
                    <Action ID="AddKeyValueToJson" input_json="{temp_dialog_params}" input_key="tag_verb" input_value="ride" output="dialog_params"/>
                </BlackboardCheckString>
            </Sequence>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="FocusOneAndDialog">
        <Sequence>
            <WaitSeconds duration="2"/>
            <Action ID="UnityProjectorCommandSharedContentViewFocusOne" do_animation="true" do_focus="true" highlight_a="255" highlight_b="53" highlight_g="255" highlight_r="231" latch="0" queue_size="1" side_selector="0" topic="unity_projector/shared_content_view/focus_one" user_id="{id}"/>
            <WaitSeconds duration="3"/>
            <SubTree ID="EMUnderstandEvent" __shared_blackboard="false" dialog_response="dialog_response" dialog_result="dialog_result" event_name="command-ask-about-photo" event_params="{dialog_params}" person_id="{id}" timeout="0"/>
            <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="{stage}"/>
            <Action ID="UnityProjectorCommandSharedContentViewFocusOne" do_animation="true" do_focus="false" highlight_a="255" highlight_b="53" highlight_g="255" highlight_r="231" latch="0" queue_size="1" side_selector="0" topic="unity_projector/shared_content_view/focus_one" user_id="{id}"/>
            <WaitSeconds duration="3"/>
            <Action ID="UnityProjectorCommandSharedContentViewShow" latch="0" queue_size="1" show="true" side_selector="0" topic="unity_projector/shared_content_view/show"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="FocusOneAndSyncWITHOUTDialog">
        <Sequence>
            <WaitSeconds duration="2"/>
            <WaitSeconds duration="3"/>
            <Action ID="UnityProjectorCommandSharedContentViewFocusOne" do_animation="true" do_focus="true" highlight_a="255" highlight_b="53" highlight_g="255" highlight_r="231" latch="0" queue_size="1" side_selector="1" topic="unity_projector/shared_content_view/focus_one" user_id="{id}"/>
            <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="{stage}"/>
            <WaitSeconds duration="3"/>
            <Action ID="UnityProjectorCommandSharedContentViewFocusOne" do_animation="true" do_focus="false" highlight_a="255" highlight_b="53" highlight_g="255" highlight_r="231" latch="0" queue_size="1" side_selector="1" topic="unity_projector/shared_content_view/focus_one" user_id="{id}"/>
            <Action ID="InfoLog" message="{id}"/>
            <Action ID="UnityProjectorCommandSharedContentViewShow" latch="0" queue_size="1" show="true" side_selector="0" topic="unity_projector/shared_content_view/show"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="GetRandomIpadData">
        <Sequence>
            <RandomInteger max="${number_of_ipads}" min="0" result="random_ipad"/>
            <Concatenate3Strings first="/user_names/" output="field" second="${random_ipad}" string_3="/data"/>
            <Action ID="ConvertMessageField" field="${field}" input="${ipad_register_result}" output="ipad_name"/>
            <Concatenate3Strings first="/ipad_ids/" output="field" second="${random_ipad}" string_3="/data"/>
            <Action ID="ConvertMessageField" field="${field}" input="${ipad_register_result}" output="ipad_id"/>
            <Action ID="InitializeJson" output="dialog_params"/>
            <Action ID="AddKeyValueToJson" input_json="{dialog_params}" input_key="person_name" input_value="{ipad_name}" output="ipad_user_json"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="GoodbyeStage">
        <Sequence>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="-- Good Bye Stage --"/>
            <SetBlackboard output_key="good_bye_n_substages" value="3"/>
            <SubTree ID="TeleconferenceON" __shared_blackboard="false"/>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Good Bye Stage Initialization" sync_feed="sync_feed" sync_result="sync_result"/>
            <Sequence name="AUS TTS">
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Good Bye Stage: AUS TTS I"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Good bye Stage: AUS TTS I" num_sub_stages="{good_bye_n_substages}" stage="{stage}" stage_id="{stage_id}" sub_stage="AUS TTS I" sub_stage_id="1" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <BlackboardCheckString name="Australia" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                    <Sequence>
                        <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                        <WaitSeconds duration="0.5"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="This conludes today's meeting. As they say in Australia, See you later alligator!" result="tts_result"/>
                        <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                    </Sequence>
                </BlackboardCheckString>
            </Sequence>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Good Bye Stage after AUS TTS I" sync_feed="sync_feed" sync_result="sync_result"/>
            <Sequence name="JAP TTS">
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Good Bye Stage: JAP TTS I"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Good bye Stage: JAP TTS I" num_sub_stages="{good_bye_n_substages}" stage="{stage}" stage_id="{stage_id}" sub_stage="JAP TTS I" sub_stage_id="2" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <BlackboardCheckString name="Japan" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                    <Sequence>
                        <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                        <WaitSeconds duration="0.5"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Or in Japan, Matara Raishuu. Until next time everyone" result="tts_result"/>
                        <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                    </Sequence>
                </BlackboardCheckString>
            </Sequence>
            <ForceSuccess>
                <Timeout msec="300000" name="5 min">
                    <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="Waiting to finish"/>
                </Timeout>
            </ForceSuccess>
            <SubTree ID="TeleconferenceOFF" __shared_blackboard="false"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="THE END" num_sub_stages="{good_bye_n_substages}" stage="{stage}" stage_id="{stage_id}" sub_stage="The End" sub_stage_id="3" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="642"/>
            <MathOperationInt first="{stage_id}" operator="+" output="stage_id" second="1"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Good Bye stage ends"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruAudioMusicPlayAndWait">
        <Action ID="HaruCommandAudioMusicAction" action="/idmind_tabletop/action_audio_music" end_time="{end_time}" fade="{fade_enable}" fade_duration="{fade_duration}" fade_out="{fade_out_enable}" fade_out_duration="{fade_out_duration}" file="{music_file}" loop="{loop}" serialized_feedback="feedback" serialized_result="result" start_time="{start_time}" state="state" volume="{volume}"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruAudioPlay">
        <Action ID="HaruCommandAudio" channel="{channel_id}" command="0" end_time="{end_time}" fade_in="{fade_enable}" fade_in_duration="{fade_duration}" fade_out="{fade_out_enable}" fade_out_duration="{fade_out_duration}" file="{audio_file}" latch="0" loop="{loop}" queue_size="1" start_time="{start_time}" topic="/idmind_tabletop/cmd_audio" volume="{volume}"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruAudioSpeechPlayAndWait">
        <Action ID="HaruCommandAudioSpeechAction" action="/idmind_tabletop/action_audio_speech" end_time="{end_time}" fade="{fade_enable}" fade_duration="{fade_duration}" fade_out="{fade_out_enable}" fade_out_duration="{fade_out_duration}" file="{speech_file}" loop="{loop}" serialized_feedback="feedback" serialized_result="result" start_time="{start_time}" state="state" volume="{volume}"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruAudioStop">
        <Action ID="HaruCommandAudio" channel="{channel_id}" command="1" end_time="0" fade_in="0" fade_in_duration="0" fade_out="{fade_out_enable}" fade_out_duration="{fade_out_duration}" file="" latch="0" loop="0" queue_size="1" start_time="0" topic="/idmind_tabletop/cmd_audio" volume="1"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruChangeAudioChannelVolume">
        <Sequence>
            <Action ID="HaruCommandConfigureAudioOnline" channel_id="${channel_id}" do_fade="${do_fade}" fade_duration="${fade_duration}" serialized_output="output" service="/idmind_tabletop/change_audio_channel_volume" volume="${volume}"/>
            <Action ID="ConvertMessageField" field="/info_msg" input="${output}" output="info_msg"/>
            <Action ID="ConvertMessageField" field="/success" input="${output}" output="success"/>
            <Fallback>
                <Sequence>
                    <CheckBool input="${success}"/>
                    <Action ID="InfoLog" message="${info_msg}"/>
                </Sequence>
                <ForceFailure>
                    <Action ID="ErrorLog" message="${info_msg}"/>
                </ForceFailure>
            </Fallback>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruCheckTelegramUserByID">
        <Sequence>
            <Action ID="HaruCommandTelegramCheckUserByID" serialized_output="output" service="/telegram_bot/check_user_by_id" user_id="{user_id}"/>
            <Action ID="ConvertMessageField" field="/success" input="{output}" output="success"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruCheckTelegramUserByName">
        <Sequence>
            <Action ID="HaruCommandTelegramCheckUserByName" serialized_output="output" service="/telegram_bot/check_user_by_name" user_name="{user_name}"/>
            <Action ID="ConvertMessageField" field="/success" input="{output}" output="success"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruCommandJoints">
        <Fallback>
            <Sequence>
                <CompareStrings comparison_op="==" first="${motor}" second="base"/>
                <Action ID="HaruCommandMotor" disable_eyes_roll_sync="0" latch="0" motor="0" play_time="${time}" position="${pos}" queue_size="1" relative="${rel}" topic="/idmind_tabletop/cmd_base_pos"/>
            </Sequence>
            <Sequence>
                <CompareStrings comparison_op="==" first="${motor}" second="head"/>
                <Action ID="HaruCommandMotor" disable_eyes_roll_sync="0" latch="0" motor="0" play_time="${time}" position="${pos}" queue_size="1" relative="${rel}" topic="/idmind_tabletop/cmd_head_pos"/>
            </Sequence>
            <Sequence>
                <CompareStrings comparison_op="==" first="${motor}" second="neck"/>
                <Action ID="HaruCommandMotor" disable_eyes_roll_sync="0" latch="0" motor="0" play_time="${time}" position="${pos}" queue_size="1" relative="${rel}" topic="/idmind_tabletop/cmd_neck_pos"/>
            </Sequence>
            <Sequence>
                <CompareStrings comparison_op="==" first="${motor}" second="roll"/>
                <Action ID="HaruCommandMotor" disable_eyes_roll_sync="0" latch="0" motor="0" play_time="${time}" position="${pos}" queue_size="1" relative="${rel}" topic="/idmind_tabletop/cmd_eyes_roll_pos"/>
            </Sequence>
            <Sequence>
                <CompareStrings comparison_op="==" first="${motor}" second="stroke"/>
                <Action ID="HaruCommandMotor" disable_eyes_roll_sync="0" latch="0" motor="0" play_time="${time}" position="${pos}" queue_size="1" relative="false" topic="/idmind_tabletop/cmd_eyes_stroke_pos"/>
            </Sequence>
        </Fallback>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruExecuteMultiRoutine">
        <Action ID="HaruCommandMultiRoutine" routine_command="${command}" service="/idmind_tabletop/execute_multi_routine"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruExecuteMultiRoutineAndWait">
        <Action ID="HaruCommandMultiRoutineAction" action="/idmind_tabletop/action_multi_routine" routine_command="{command}" serialized_feedback="feedback" serialized_result="result" state="state"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruExecuteRoutine">
        <Sequence>
            <RandomSequenceValue delimiter=";" name="RandomRoutine" output="routine_rnd" sequence="${routines}"/>
            <ConcatenateStrings first="Playing routine: " output="message" second="${routine_rnd}"/>
            <Action ID="InfoLog" message="${message}"/>
            <Action ID="HaruCommandRoutine" routine="${routine_rnd}" service="/idmind_tabletop/execute_routine"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruExecuteRoutineAndWait">
        <Sequence>
            <RandomSequenceValue delimiter=";" output="routine" sequence="{routines}"/>
            <Action ID="HaruCommandRoutineAction" action="/idmind_tabletop/action_routine" id="{routine}" serialized_feedback="feedback" serialized_result="result" state="state"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruGetClosestPerson">
        <Sequence>
            <SetBlackboard output_key="min_distance" value="99"/>
            <SetBlackboard output_key="found_person" value="false"/>
            <SetBlackboard output_key="closest_person" value=""/>
            <Action ID="ConvertMessageField" field="/frame_id" input="${people_header}" output="people_frame_id"/>
            <Decorator ID="ForEachLoop" break_on_child_failure="false" input="${people}" output_element="person_element" output_index="">
                <Sequence>
                    <SubTree ID="HaruGetPersonDistance" distance="new_distance" frame_id="{people_frame_id}" person="{person_element}"/>
                    <CompareNumbers comparison_op="&lt;" first="${new_distance}" second="${min_distance}"/>
                    <SetBlackboard output_key="min_distance" value="${new_distance}"/>
                    <SetBlackboard output_key="closest_person" value="${person_element}"/>
                    <SetBlackboard output_key="found_person" value="true"/>
                    <Action ID="InfoLog" message="FOUND PERSON!"/>
                </Sequence>
            </Decorator>
            <CheckBool input="${found_person}"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruGetClosestPersonFacingRobot">
        <Sequence>
            <SetBlackboard output_key="min_distance" value="99"/>
            <SetBlackboard output_key="found_person" value="false"/>
            <SetBlackboard output_key="closest_person" value=""/>
            <SetBlackboard output_key="result_angle" value="0.0"/>
            <Action ID="ConvertMessageField" field="/frame_id" input="${people_header}" output="people_frame_id"/>
            <Decorator ID="ForEachLoop" break_on_child_failure="false" input="${people}" output_element="person_element" output_index="">
                <Sequence>
                    <SubTree ID="HaruGetPersonHeadAngles" frame_id="{people_frame_id}" person="{person_element}" pitch="p" roll="r" yaw="y"/>
                    <Fallback>
                        <Sequence>
                            <CompareStrings comparison_op="==" first="${selected_angle}" second="roll"/>
                            <SetBlackboard output_key="result_angle" value="${r}"/>
                        </Sequence>
                        <Sequence>
                            <CompareStrings comparison_op="==" first="${selected_angle}" second="pitch"/>
                            <SetBlackboard output_key="result_angle" value="${p}"/>
                        </Sequence>
                        <SetBlackboard output_key="result_angle" value="${y}"/>
                    </Fallback>
                    <CompareNumbers comparison_op="&gt;" first="${result_angle}" second="${min_angle}"/>
                    <CompareStrings comparison_op="&lt;" first="${result_angle}" second="${max_angle}"/>
                    <SubTree ID="HaruGetPersonDistance" distance="new_distance" frame_id="{people_frame_id}" person="{person_element}"/>
                    <CompareNumbers comparison_op="&lt;" first="${new_distance}" second="${min_distance}"/>
                    <SetBlackboard output_key="min_distance" value="${new_distance}"/>
                    <SetBlackboard output_key="closest_person" value="${person_element}"/>
                    <SetBlackboard output_key="found_person" value="true"/>
                    <Action ID="InfoLog" message="FOUND PERSON!"/>
                </Sequence>
            </Decorator>
            <CheckBool input="${found_person}"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruGetFastestTF">
        <Sequence>
            <Action ID="HaruMonitorFastestTF" consume_msgs="0" queue_size="1" serialized_output="output" topic="/strawberry/fastest_tf"/>
            <Action ID="ConvertMessageField" field="/tf_frame_id" input="${output}" output="tf_frame_id"/>
            <Action ID="ConvertMessageField" field="/speed" input="${output}" output="speed"/>
            <Action ID="ConvertMessageField" field="/person_id" input="${output}" output="person_id"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruGetNewTelegramMsg">
        <Sequence>
            <Action ID="HaruCommandTelegramGetNewMsg" serialized_output="output" service="/telegram_bot/get_new_msg"/>
            <Action ID="ConvertMessageField" field="/total_msgs_num" input="${output}" output="num_msgs"/>
            <Action ID="ConvertMessageField" field="/unread_msgs_num" input="${output}" output="num_unread_msgs"/>
            <Action ID="ConvertMessageField" field="/msg/msg_id" input="${output}" output="msg_id"/>
            <Action ID="ConvertMessageField" field="/msg/msg_timestamp_sec" input="${output}" output="msg_timestamp"/>
            <Action ID="ConvertMessageField" field="/msg/chat_id" input="${output}" output="user_chat_id"/>
            <Action ID="ConvertMessageField" field="/msg/user_name" input="${output}" output="user_name"/>
            <Action ID="ConvertMessageField" field="/msg/user_firstname" input="${output}" output="user_firstname"/>
            <Action ID="ConvertMessageField" field="/msg/type" input="${output}" output="msg_type"/>
            <Action ID="ConvertMessageField" field="/msg/text" input="${output}" output="msg_text"/>
            <Action ID="ConvertMessageField" field="/msg/emoji" input="${output}" output="msg_emoji"/>
            <Action ID="ConvertMessageField" field="/msg/emoji_routine_id" input="${output}" output="msg_emoji_routine_id"/>
            <Action ID="ConvertMessageField" field="/msg/harumoji" input="${output}" output="msg_harumoji"/>
            <Action ID="ConvertMessageField" field="/msg/harumoji_routine_id" input="${output}" output="msg_harumoji_routine_id"/>
            <Action ID="ConvertMessageField" field="/msg/audio_file_path" input="${output}" output="msg_audio_file_path"/>
            <Action ID="ConvertMessageField" field="/msg/is_audio_transcribed" input="${output}" output="msg_is_audio_transcribed"/>
            <Action ID="ConvertMessageField" field="/msg/audio_transcription" input="${output}" output="msg_audio_transcription"/>
            <Action ID="ConvertMessageField" field="/msg/photo_file_path" input="${output}" output="msg_photo_file_path"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruGetPersonDistance">
        <Sequence>
            <SetBlackboard output_key="haru_tf" value="/idmind_tabletop/base"/>
            <Action ID="ConvertMessageField" field="/id" input="${person}" output="person_id"/>
            <ConcatenateStrings first="${frame_id}" output="tf_prestart" second="/skeletons/"/>
            <ConcatenateStrings first="${tf_prestart}" output="tf_start" second="${person_id}"/>
            <ConcatenateStrings first="${tf_start}" output="person_tf" second="/spine_mid"/>
            <Action ID="LookupTransform" output="transform" source_frame="${haru_tf}" target_frame="${person_tf}" use_last_available="true"/>
            <Action ID="GetTransformHorizontalDistance" input="${transform}" output="distance"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruGetPersonHeadAngles">
        <Sequence>
            <SetBlackboard output_key="haru_tf" value="/idmind_tabletop/base"/>
            <Action ID="ConvertMessageField" field="/id" input="${person}" output="person_id"/>
            <ConcatenateStrings first="${frame_id}" output="tf_prestart" second="/skeletons/"/>
            <ConcatenateStrings first="${tf_prestart}" output="tf_start" second="${person_id}"/>
            <ConcatenateStrings first="${tf_start}" output="person_tf" second="/head"/>
            <Action ID="LookupTransform" output="transform" source_frame="${haru_tf}" target_frame="${person_tf}" use_last_available="true"/>
            <Action ID="GetTransformAngles" input="${transform}" pitch="pitch" roll="roll" yaw="yaw"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruGetPersonSpeech">
        <Sequence>
            <Action ID="ConvertMessageField" field="/speech/speaker_confidence" input="${person}" output="speaker_confidence"/>
            <Action ID="ConvertMessageField" field="/speech/asr_result/transcript" input="${person}" output="transcript_text"/>
            <Action ID="ConvertMessageField" field="/speech/asr_result/confidence" input="${person}" output="transcript_confidence"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruGetQRInfo">
        <Sequence>
            <Action ID="HaruCommandGetQRReading" serialized_output="qr_database_info" service="/qr_database_node/get_full_qr_data" timeout="{timeout}"/>
            <Action ID="ConvertMessageField" field="/qr_reading" input="{qr_database_info}" output="qr_info"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruGetSpeakingPerson">
        <Sequence>
            <SetBlackboard output_key="max_confidence" value="0"/>
            <SetBlackboard output_key="found_person" value="false"/>
            <SetBlackboard output_key="speaking_person" value=""/>
            <Decorator ID="ForEachLoop" break_on_child_failure="false" input="${people}" output_element="person_element" output_index="">
                <Sequence>
                    <SubTree ID="HaruGetPersonSpeech" person="{person_element}" speaker_confidence="new_confidence" transcript_confidence="dummy" transcript_text="transcript"/>
                    <CompareStrings comparison_op="!=" first="${transcript}" second=""/>
                    <CompareNumbers comparison_op="&gt;=" first="${new_confidence}" second="${max_confidence}"/>
                    <SetBlackboard output_key="max_confidence" value="${new_confidence}"/>
                    <SetBlackboard output_key="speaking_person" value="${person_element}"/>
                    <SetBlackboard output_key="found_person" value="true"/>
                    <Action ID="InfoLog" message="FOUND SPEAKING PERSON!"/>
                </Sequence>
            </Decorator>
            <CheckBool input="${found_person}"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruGetTelegramUserList">
        <Sequence>
            <Action ID="HaruCommandTelegramGetUserList" serialized_output="output" service="/telegram_bot/get_user_list"/>
            <Action ID="ConvertMessageField" field="/users" input="${output}" output="user_list"/>
            <Action ID="ConvertMessageField" field="/success" input="${output}" output="success"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruGoHome">
        <Action ID="PublishStdEmpty" latch="0" queue_size="1" topic="/idmind_tabletop/cmd_motors_home"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruLCDVideos">
        <Action ID="HaruCommandLCD" backlight="0" command="0" disable_eyes_roll_sync="0" end_time="0" latch="0" left_eye_file="${left_eye}" loop="false" queue_size="1" right_eye_file="${right_eye}" skip_factor="0" start_time="0" topic="/idmind_tabletop/cmd_lcd" transparency="0" wait_to_finish="0"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruLCDVideosAndWait">
        <Action ID="HaruCommandLCDAction" action="/idmind_tabletop/action_lcd" end_time="{end_time}" left_eye_file="{left_eye}" loop="{loop}" right_eye_file="{right_eye}" serialized_feedback="feedback" serialized_result="result" start_time="{start_time}" state="state" wait_to_finish="0"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruLCDVideosStop">
        <Action ID="HaruCommandLCD" backlight="0" command="2" disable_eyes_roll_sync="0" end_time="0" latch="0" left_eye_file="" loop="0" queue_size="1" right_eye_file="" skip_factor="0" start_time="0" topic="/idmind_tabletop/cmd_lcd" transparency="0" wait_to_finish="0"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruLEDsEyesPlay">
        <Action ID="HaruCommandLEDs" action="1" brightness="1" file="${eyes_file}" fps="0" jump_factor="0" latch="0" loop="0" queue_size="1" topic="/idmind_tabletop/cmd_leds" type="1"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruLEDsMouthPlay">
        <Action ID="HaruCommandLEDs" action="1" brightness="1" file="${mouth_file}" fps="0" jump_factor="0" latch="0" loop="0" queue_size="1" topic="/idmind_tabletop/cmd_leds" type="0"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruLEDsStop">
        <Fallback>
            <Sequence>
                <CompareStrings comparison_op="==" first="eyes" second="${part}"/>
                <Action ID="HaruCommandLEDs" action="2" brightness="1" file="" fps="0" jump_factor="0" latch="0" loop="0" queue_size="1" topic="/idmind_tabletop/cmd_leds" type="1"/>
            </Sequence>
            <Sequence>
                <CompareStrings comparison_op="==" first="mouth" second="${part}"/>
                <Action ID="HaruCommandLEDs" action="2" brightness="1" file="" fps="0" jump_factor="0" latch="0" loop="0" queue_size="1" topic="/idmind_tabletop/cmd_leds" type="0"/>
            </Sequence>
        </Fallback>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruListensEveryone">
        <Action ID="StrawberrySetSpeechTarget" serialized_output="dummy" service="/strawberry/set_speech_target" target="-1"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruListensNobody">
        <Action ID="StrawberrySetSpeechTarget" serialized_output="dummy" service="/strawberry/set_speech_target" target="-2"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruListensPerson">
        <Sequence>
            <Action ID="ConvertMessageField" field="/id" input="${person}" output="person_id"/>
            <Action ID="StrawberrySetSpeechTarget" serialized_output="dummy" service="/strawberry/set_speech_target" target="${person_id}"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruLookAt">
        <Action ID="HaruCommandLookAt" base_control_vel="{base_control_vel}" disable_base="{disable_base}" disable_eyes="{disable_eyes}" disable_head="{disable_head}" disable_neck="{disable_neck}" objective.header.frame_id="odom" objective.header.seq="0" objective.point.x="{proximity}" objective.point.y="{horizontal}" objective.point.z="{high}" service="idmind_tabletop/look_at"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruMarkTelegramMsgAsRead">
        <Sequence>
            <Action ID="HaruCommandTelegramMarkAsRead" msg_id="${msg_id}" serialized_output="output" service="/telegram_bot/mark_as_read"/>
            <Action ID="ConvertMessageField" field="/success" input="${output}" output="success"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruNlpYesNo">
        <Sequence>
            <Action ID="HaruClassifyYesNoFromText" serialized_output="yesno_answer" service="/NlpClassifyYesNoFromText" transcription="{transcription}"/>
            <Action ID="ConvertMessageField" field="/predicted_intent" input="{yesno_answer}" output="answer"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruProjectorCloseWeb">
        <Sequence>
            <Action ID="PublishStdEmpty" latch="0" queue_size="1" topic="/idmind_tabletop/cmd_projector/web_browser/close"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruProjectorImage">
        <Action ID="HaruCommandProjector" backlight="0" command="0" end_time="${img_duration}" keep_last_frame="0" latch="0" loop="${always}" projector_file="${img_file}" queue_size="1" scale_type="${img_scale}" skip_factor="0" start_time="0" topic="/idmind_tabletop/cmd_projector" transparency="0" wait_to_finish="0"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruProjectorImageAndWait">
        <Action ID="HaruCommandProjectorAction" action="/idmind_tabletop/action_projector" end_time="{duration}" file="{image_file}" keep_last_frame="{keep_last}" loop="{loop}" scale_type="{image_scale}" serialized_feedback="feedback" serialized_result="result" start_time="0" state="state" wait_to_finish="0"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruProjectorShowLastWeb">
        <Action ID="PublishStdEmpty" latch="0" queue_size="1" topic="/idmind_tabletop/cmd_projector/web_browser/show"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruProjectorShowWeb">
        <Sequence>
            <Action ID="PublishStdString" data="{url}" latch="0" queue_size="1" topic="/idmind_tabletop/cmd_projector/web_browser/set_URL"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruProjectorStop">
        <Action ID="HaruCommandProjector" backlight="0" command="2" end_time="0" keep_last_frame="0" latch="0" loop="0" projector_file="" queue_size="1" scale_type="0" skip_factor="0" start_time="0" topic="/idmind_tabletop/cmd_projector" transparency="0" wait_to_finish="0"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruProjectorVideo">
        <Action ID="HaruCommandProjector" backlight="0" command="0" end_time="${end_time}" keep_last_frame="${keep_last}" latch="0" loop="${loop}" projector_file="${video_file}" queue_size="1" scale_type="${video_scale}" skip_factor="0" start_time="${start_time}" topic="/idmind_tabletop/cmd_projector" transparency="0" wait_to_finish="0"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruProjectorVideoAndWait">
        <Action ID="HaruCommandProjectorAction" action="/idmind_tabletop/action_projector" end_time="{end_time}" file="{video_file}" keep_last_frame="{keep_last}" loop="{loop}" scale_type="{video_scale}" serialized_feedback="feedback" serialized_result="result" start_time="{start_time}" state="state" wait_to_finish="0"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruReadQR">
        <Sequence>
            <Action ID="HaruCommandGetQRReading" serialized_output="qr_output" service="/scanner/read_qr" timeout="{timeout}"/>
            <Action ID="ConvertMessageField" field="/qr_reading" input="{qr_output}" output="qr_content"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruReceptionMainWebPage">
        <Sequence>
            <Action ID="HaruWebsiteShowGenericPage" serialized_output="output" service="/idmind_tabletop_website_node/show_main_page"/>
            <Action ID="ConvertMessageField" field="/success" input="{output}" output="success"/>
            <Action ID="ConvertMessageField" field="/website_url" input="{output}" output="success"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruReceptionMeetingWebPage">
        <Sequence>
            <Action ID="HaruWebsiteShowMeetingPage" hosts="{hosts}" meeting_end="{meeting_end}" meeting_name="{meeting_name}" meeting_start="{meeting_start}" room="{room}" serialized_output="output" service="/idmind_tabletop_website_node/show_meeting_page" visitor_name="{guest_name}"/>
            <Action ID="ConvertMessageField" field="/success" input="{output}" output="success"/>
            <Action ID="ConvertMessageField" field="/website_url" input="{output}" output="website_url"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruReceptionProfileWebPage">
        <Sequence>
            <Action ID="HaruWebsiteShowProfilePage" company="{company}" guest_name="{guest_name}" image_location="{image_path}" position="{position}" serialized_output="output" service="/idmind_tabletop_website_node/show_profile_page"/>
            <Action ID="ConvertMessageField" field="/success" input="{output}" output="success"/>
            <Action ID="ConvertMessageField" field="/website_url" input="{output}" output="website_url"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruReceptionQRWebPage">
        <Sequence>
            <Action ID="HaruWebsiteShowGenericPage" serialized_output="output" service="/idmind_tabletop_website_node/show_scanqr_page"/>
            <Action ID="ConvertMessageField" field="/success" input="{output}" output="success"/>
            <Action ID="ConvertMessageField" field="/website_url" input="{output}" output="website_url"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruReceptionWeatherWebPage">
        <Sequence>
            <Action ID="HaruWebsiteShowGenericPage" serialized_output="output" service="/idmind_tabletop_website_node/show_weather_page"/>
            <Action ID="ConvertMessageField" field="/success" input="{output}" output="success"/>
            <Action ID="ConvertMessageField" field="/website_url" input="{output}" output="website_url"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruReceptionWelcomeWebPage">
        <Sequence>
            <Action ID="HaruWebsiteShowGenericPage" serialized_output="output" service="/idmind_tabletop_website_node/show_welcome_page"/>
            <Action ID="ConvertMessageField" field="/success" input="{output}" output="success"/>
            <Action ID="ConvertMessageField" field="/website_url" input="{output}" output="website_url"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruReceptionWifiWebPage">
        <Sequence>
            <Action ID="HaruWebsiteShowWifiPage" network="{network}" password="{password}" serialized_output="output" service="/idmind_tabletop_website_node/show_wifi_page"/>
            <Action ID="ConvertMessageField" field="/success" input="{output}" output="success"/>
            <Action ID="ConvertMessageField" field="/website_url" input="{output}" output="website_url"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruSendTelegramAudio">
        <Sequence>
            <Action ID="HaruCommandTelegramSendAudio" chat_id="${chat_id}" file_path="${file_path}" serialized_output="output" service="/telegram_bot/send_audio"/>
            <Action ID="ConvertMessageField" field="/success" input="${output}" output="success"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruSendTelegramImage">
        <Sequence>
            <Action ID="HaruCommandTelegramSendImage" accepted="${accepted}" camera_topic_name="${camera_topic}" chat_id="${chat_id}" serialized_output="output" service="/telegram_bot/send_image"/>
            <Action ID="ConvertMessageField" field="/success" input="${output}" output="success"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruSendTelegramText">
        <Sequence>
            <Action ID="HaruCommandTelegramSendText" chat_id="${chat_id}" serialized_output="output" service="/telegram_bot/send_text" text="${text}"/>
            <Action ID="ConvertMessageField" field="/success" input="${output}" output="success"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruSetLanguage">
        <Action ID="HaruCommandSetLanguage" language="{language}" service="/idmind_tabletop/set_language"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruSetVoice">
        <Action ID="HaruCommandSetVoice" service="/idmind_tabletop/set_voice" voice="{voice}"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruSpeakExpressive">
        <Sequence>
            <Action ID="NLPTextToSSML" criteria_name="''" serialized_output="json" service="/nlp/text_to_ssml" text="${text}"/>
            <Action ID="InfoLog" message="${json}"/>
            <Action ID="ConvertMessageField" field="/ssml_text" input="${json}" output="exp_text"/>
            <Action ID="ConvertMessageField" field="/routine" input="{json}" output="exp_routine"/>
            <Parallel failure_threshold="1" success_threshold="2">
                <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="${exp_routine}"/>
                <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="${exp_text}" result="tts_result"/>
            </Parallel>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruSpeaksEmoTTSAndWait">
        <Sequence name="">
            <RandomSequenceValue delimiter=";" name="" output="sentence" sequence="{phrases}"/>
            <Concatenate5Strings first="&lt;usel genre=&quot;" name="" output="sentence_genre" second="{genre}" string_3="&quot;&gt; " string_4="{sentence}" string_5=" &lt;/usel&gt;"/>
            <Action ID="HaruCommandTTSAction" action="/idmind_tabletop/action_tts" message="{sentence_genre}" name="" serialized_feedback="feedback" serialized_result="result" state="state"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruSpeaksTTS">
        <Sequence>
            <RandomSequenceValue delimiter=";" output="tts_cmd" sequence="${phrases}"/>
            <ConcatenateStrings first="TTS speaking: " output="message" second="${tts_cmd}"/>
            <Action ID="InfoLog" message="${message}"/>
            <Action ID="HaruCommandTTS" latch="0" message="${tts_cmd}" queue_size="1" topic="/idmind_tabletop/cmd_tts"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruSpeaksTTSAndWait">
        <Sequence>
            <RandomSequenceValue delimiter=";" output="sentence" sequence="{phrases}"/>
            <Action ID="HaruCommandTTSAction" action="/idmind_tabletop/action_tts" message="{sentence}" serialized_feedback="feedback" serialized_result="result" state="state"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruSpeaksTTSAndWaitDEPRECATE">
        <Sequence>
            <RandomSequenceValue delimiter=";" output="tts_cmd" sequence="${phrases}"/>
            <Action ID="HaruCommandTTSService" message="${tts_cmd}" serialized_output="service_response" service="/idmind_tabletop/cmd_tts_blocking_srv"/>
            <Action ID="ConvertMessageField" field="/played" input="{service_response}" output="tts_played"/>
            <Action ID="InfoLog" message="${tts_played}"/>
            <CheckBool input="${tts_played}"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruStartTimeCount">
        <Action ID="HaruCommandCountTime" command.data="0" serialized_output="output" service="/timer_ros_node/trigger_timer" timer_id.data="{timer_id}"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruStopTimeCount">
        <Sequence>
            <Action ID="HaruCommandCountTime" command.data="1" serialized_output="output" service="/timer_ros_node/trigger_timer" timer_id.data="{timer_id}"/>
            <Action ID="ConvertMessageField" field="/time_elapsed/data" input="{output}" output="time_elapsed"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruStopsRoutines">
        <Action ID="CallEmptyService" service="/idmind_tabletop/stop_routines"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruStopsTracking">
        <Action ID="HaruCommandTrack" command="2" latch="0" queue_size="1" topic="/idmind_tabletop/cmd_track" track_frame=""/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruSwitchAudioDucking">
        <Sequence>
            <Action ID="HaruCommandSwitchAudioDucking" enable="{enable}" main_channel_id="{main_channel_id}" serialized_output="output" service="/idmind_tabletop/switch_audio_ducking"/>
            <Action ID="ConvertMessageField" field="/success" input="{output}" output="switch_success"/>
            <CheckBool input="{switch_success}"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruTakePhoto">
        <Sequence>
            <Action ID="InfoLog" message="Saving picture"/>
            <Action ID="CaptureImage" cmd="true" num_name="${image_name}" path="${path}" service="/image_cmd"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruTrackPerson">
        <Sequence>
            <Action ID="ConvertMessageField" field="/id" input="${person}" output="person_id"/>
            <Action ID="ConvertMessageField" field="/frame_id" input="${person_header}" output="person_frame_id"/>
            <ConcatenateStrings first="${person_frame_id}" output="track_frame_1" second="/skeletons/"/>
            <ConcatenateStrings first="${track_frame_1}" output="track_frame_2" second="${person_id}"/>
            <ConcatenateStrings first="${track_frame_2}" output="track_frame_3" second="/"/>
            <ConcatenateStrings first="${track_frame_3}" output="track_frame" second="${body_part}"/>
            <Action ID="HaruCommandTrack" command="0" latch="0" queue_size="1" topic="/idmind_tabletop/cmd_track" track_frame="${track_frame}"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruTrackPosition">
        <Action ID="HaruCommandTrack" command="0" latch="0" queue_size="1" topic="/idmind_tabletop/cmd_track" track_frame="${frame}"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HaruTrackVelocity">
        <Action ID="HaruCommandTrack" command="1" latch="0" queue_size="1" topic="/idmind_tabletop/cmd_track" track_frame="${frame}"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HarusContentStage">
        <Sequence>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Harus Content Stage: Sarting"/>
            <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Harus Content Stage: Configuration Done" num_sub_stages="2" stage="{stage}" stage_id="{stage_id}" sub_stage="Configuration" sub_stage_id="1" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Harus Contet Stage: First Sync Msg" sync_feed="sync_feed" sync_result="sync_result"/>
            <Action ID="UnityProjectorCommandVideoPlayerConfiguration" animation_time="{transition_time}" coupled="0" display_number="0" do_animation="true" info_avatar_file="Haru_japan" info_name="Haru_japan" info_tag="favourite_lunch" latch="0" pose_mode="0" queue_size="1" return_default="false" show_info="true" size_mode="4" topic="/unity_projector/video_player/configuration"/>
            <SubTree ID="UnityProjectorShowVideo" __shared_blackboard="false" video_file="TalkingAboutUs_HaruShare_1"/>
            <WaitSeconds duration="{stop_video_time}"/>
            <Sequence name="First Picture Haru">
                <BlackboardCheckString name="JAP" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                    <Sequence>
                        <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                        <WaitMilliseconds duration="500"/>
                        <Sequence name="JAP TTS">
                            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Harus Contet Stage: First JAP Comment"/>
                            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Harus Content Stage: Haru JAP Comment" num_sub_stages="2" stage="{stage}" stage_id="{stage_id}" sub_stage="JAP Comment" sub_stage_id="2" this_country="{this_country}" this_country_id="{this_country_id}"/>
                            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Here is a photo of me and my favourite lunch -microchips!" result="tts_result"/>
                            <Parallel failure_threshold="1" success_threshold="1">
                                <Sequence>
                                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Harus Content Stage: Haru JAP Understand Event"/>
                                    <MathOperationInt first="{num_ipads}" operator="-" output="jap_ipad_num" second="1"/>
                                    <SubTree ID="GetRandomIpadData" __shared_blackboard="false" ipad_id="ipad_id" ipad_register_result="{ipad_register_result}" ipad_user_json="dialog_params" number_of_ipads="{jap_ipad_num}"/>
                                    <SubTree ID="lookAtChildren" __shared_blackboard="false" table_height="{table_height}" table_horizontal="{table_horizontal}" table_proximity="{table_proximity}"/>
                                    <SubTree ID="EMUnderstandEvent" __shared_blackboard="false" dialog_response="dialog_response" dialog_result="dialog_result" event_name="command-tell-about-school-lunch" event_params="{dialog_params}" person_id="{ipad_id}" timeout="0"/>
                                </Sequence>
                                <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="Harus Content Stage: Haru JAP Understand Event Playing" stage_id="{stage_id}"/>
                            </Parallel>
                            <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="903"/>
                            <SubTree ID="lookAtTV" __shared_blackboard="false" screen_height="{screen_height}" screen_horizontal="{screen_horizontal}" screen_proximity="{screen_proximity}"/>
                        </Sequence>
                        <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                        <SubTree ID="EMSyncPointAndSkipButton" __shared_blackboard="false" bt_id="{bt_id}" msg_skip_ipad="Harus Content Stage: Waiting JAP Sync Point" msg_to_sync="Harus Content Stage: Waiting JAP Sync Point Sync Msg" stage_id="{stage_id}"/>
                    </Sequence>
                </BlackboardCheckString>
                <BlackboardCheckString return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                    <Sequence>
                        <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Harus Contet Stage: First JAP Comment"/>
                        <SubTree ID="lookAtTV" __shared_blackboard="false" screen_height="{screen_height}" screen_horizontal="{screen_horizontal}" screen_proximity="{screen_proximity}"/>
                        <Parallel failure_threshold="1" success_threshold="1">
                            <Loop>
                                <Sequence>
                                    <WaitSeconds duration="0.5"/>
                                    <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="907"/>
                                    <WaitSeconds duration="3"/>
                                    <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="808"/>
                                    <WaitSeconds duration="2"/>
                                    <WaitSeconds duration="10" name="Espera larga por tener el otro extremo comentario + emunderstand event"/>
                                </Sequence>
                            </Loop>
                            <SubTree ID="EMSyncPointAndSkipButton" __shared_blackboard="false" bt_id="{bt_id}" msg_skip_ipad="Harus Content Stage: Waiting JAP Sync Point" msg_to_sync="Harus Content Stage: Waiting JAP Sync Point Sync Msg" stage_id="{stage_id}"/>
                        </Parallel>
                    </Sequence>
                </BlackboardCheckString>
            </Sequence>
            <SubTree ID="UnityProjectorStopVideo"/>
            <WaitSeconds duration="{stop_video_time}"/>
            <Action ID="UnityProjectorCommandVideoPlayerConfiguration" animation_time="{transition_time}" coupled="0" display_number="0" do_animation="true" info_avatar_file="Haru_australia" info_name="Haru_australia" info_tag="favourite_sport" latch="0" pose_mode="0" queue_size="1" return_default="false" show_info="true" size_mode="4" topic="/unity_projector/video_player/configuration"/>
            <SubTree ID="UnityProjectorShowVideo" __shared_blackboard="false" video_file="TalkingAboutUs_HaruShare_2"/>
            <WaitSeconds duration="{stop_video_time}"/>
            <Sequence>
                <BlackboardCheckString name="AUS" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                    <Sequence>
                        <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                        <WaitMilliseconds duration="500"/>
                        <Sequence name="AUS TTS">
                            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Harus content Stage: First AUS Comment"/>
                            <SubTree ID="lookAtChildren" __shared_blackboard="false" table_height="{table_height}" table_horizontal="{table_horizontal}" table_proximity="{table_proximity}"/>
                            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Harus Content Stage: Haru AUS Comment" num_sub_stages="3" stage="{stage}" stage_id="{stage_id}" sub_stage="AUS Comment" sub_stage_id="3" this_country="{this_country}" this_country_id="{this_country_id}"/>
                            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="And here's me doing my favourite athletic sport, volleyball." result="tts_result"/>
                            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="It'd be easier if i actually had arms!" result="tts_result"/>
                        </Sequence>
                        <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                        <SubTree ID="EMSyncPointAndSkipButton" __shared_blackboard="false" bt_id="{bt_id}" msg_skip_ipad="Asutralian Joke Playing" msg_to_sync="Australian Joke Msg Sync" stage_id="{stage_id}"/>
                    </Sequence>
                </BlackboardCheckString>
                <BlackboardCheckString name="Japan laughs" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                    <Parallel failure_threshold="1" success_threshold="1">
                        <Sequence>
                            <WaitSeconds duration="0.5"/>
                            <Loop>
                                <Sequence>
                                    <WaitSeconds duration="1.5"/>
                                    <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="808"/>
                                    <WaitSeconds duration="2"/>
                                    <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="407"/>
                                </Sequence>
                            </Loop>
                        </Sequence>
                        <SubTree ID="EMSyncPointAndSkipButton" __shared_blackboard="false" bt_id="{bt_id}" msg_skip_ipad="Asutralian Joke Playing" msg_to_sync="Australian Joke Msg Sync" stage_id="{stage_id}"/>
                    </Parallel>
                </BlackboardCheckString>
            </Sequence>
            <Sequence>
                <BlackboardCheckString return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                    <Sequence>
                        <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                        <WaitMilliseconds duration="500"/>
                        <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="146"/>
                        <SubTree ID="lookAtChildren" __shared_blackboard="false" table_height="{table_height}" table_horizontal="{table_horizontal}" table_proximity="{table_proximity}"/>
                        <WaitMilliseconds duration="500"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="That was funny!" result="tts_result"/>
                        <SubTree ID="lookAtTV" __shared_blackboard="false" screen_height="{screen_height}" screen_horizontal="{screen_horizontal}" screen_proximity="{screen_proximity}"/>
                        <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                    </Sequence>
                </BlackboardCheckString>
                <Parallel failure_threshold="1" success_threshold="1">
                    <SubTree ID="EMSyncPointAndSkipButton" __shared_blackboard="false" bt_id="{bt_id}" msg_skip_ipad="After Japan laughs Meeting Point" msg_to_sync="After Japan laughs Meeting Point Sync Msg" stage_id="{stage_id}"/>
                    <Loop>
                        <Sequence>
                            <WaitSeconds duration="1.5"/>
                            <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="808"/>
                            <WaitMilliseconds duration="1000"/>
                            <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="407"/>
                        </Sequence>
                    </Loop>
                </Parallel>
            </Sequence>
            <Sequence>
                <BlackboardCheckString return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                    <Sequence>
                        <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                        <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Harus Content Stage: Haru AUS Understand Event"/>
                        <MathOperationInt first="{num_ipads}" operator="-" output="aus_ipad_num" second="1"/>
                        <SubTree ID="GetRandomIpadData" __shared_blackboard="false" ipad_id="ipad_id" ipad_register_result="{ipad_register_result}" ipad_user_json="dialog_params" number_of_ipads="{aus_ipad_num}"/>
                        <SubTree ID="lookAtChildren" __shared_blackboard="false" table_height="{table_height}" table_horizontal="{table_horizontal}" table_proximity="{table_proximity}"/>
                        <SubTree ID="EMUnderstandEvent" __shared_blackboard="false" dialog_response="dialog_response" dialog_result="dialog_result" event_name="command-tell-about-sport" event_params="{dialog_params}" person_id="{ipad_id}" timeout="0"/>
                        <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="903"/>
                        <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                        <SubTree ID="EMSyncPointAndSkipButton" __shared_blackboard="false" bt_id="{bt_id}" msg_skip_ipad="AUSTRALIA EMU POINT PICTURE" msg_to_sync="AUSTRALIA EMU POINT PICTURE" stage_id="{stage_id}"/>
                    </Sequence>
                </BlackboardCheckString>
                <BlackboardCheckString return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                    <Sequence>
                        <Parallel failure_threshold="1" success_threshold="1">
                            <Sequence>
                                <WaitSeconds duration="8" name="Espera larga para Emunderstand event"/>
                                <Loop>
                                    <Sequence>
                                        <WaitSeconds duration="1.5"/>
                                        <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="808"/>
                                        <WaitSeconds duration="2"/>
                                        <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="407"/>
                                    </Sequence>
                                </Loop>
                            </Sequence>
                            <SubTree ID="EMSyncPointAndSkipButton" __shared_blackboard="false" bt_id="{bt_id}" msg_skip_ipad="AUSTRALIA EMU POINT PICTURE" msg_to_sync="AUSTRALIA EMU POINT PICTURE" stage_id="{stage_id}"/>
                        </Parallel>
                    </Sequence>
                </BlackboardCheckString>
            </Sequence>
            <SubTree ID="EMSyncPointAndSkipButton" __shared_blackboard="false" bt_id="{bt_id}" msg_skip_ipad="Harus Contet Stage: Waiting Aus Sync Msg MOVING TO YOUR CONTENT " msg_to_sync="Harus Contet Stage: Waiting Aus Sync Msg MVING 2 your content" stage_id="{stage_id}"/>
            <SubTree ID="lookAtChildren" __shared_blackboard="false" table_height="{table_height}" table_horizontal="{table_horizontal}" table_proximity="{table_proximity}"/>
            <SubTree ID="Add1ToStageID" __shared_blackboard="true"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Harus Content Stage: Over"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="InitPhotosharingVariables">
        <Sequence>
            <Action ID="ConvertMessageField" field="/images_path" input="{ipad_image_result}" output="image_paths"/>
            <Action ID="ConvertMessageField" field="/tags" input="{ipad_image_result}" output="image_tags"/>
            <Action ID="ConvertMessageField" field="/ipad_ids" input="{ipad_image_result}" output="ipad_ids"/>
            <Action ID="ConvertRandomMessageField" field="/user_names" input="{ipad_image_result}" output="usernames"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="InitiationOFBTandVariables">
        <Sequence>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Initialization: Tree started"/>
            <Action ID="UnityProjectorCommandActivateDisplay" display_number="1" latch="0" queue_size="1" topic="/unity_projector/activate_display"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Initiation: Starting Variable Declaration"/>
            <SubTree ID="VariableDeclaration" __shared_blackboard="true"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Initiation: Finished Variable Declaration"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Initiation: Sending Home and Confirming Disabling of All ASR"/>
            <SubTree ID="HaruGoHome"/>
            <SubTree ID="StrawberryDisableAllASR"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Initiation: Sent Home and ASR deactivated Done"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Initiation: Creating Whereby Teleconference"/>
            <SubTree ID="EMSyncPointAndSkipButton" __shared_blackboard="false" bt_id="{bt_id}" msg_skip_ipad="Init Stage: Initial Wait Sync" msg_to_sync="Init Stage: Sync Msg One" stage_id="{stage_id}"/>
            <SubTree ID="UnityProjectorWherebyCreateMeeting" __shared_blackboard="false" meeting_duration="60"/>
            <WaitSeconds duration="5" name="Wait 5 secs Teleconference is created"/>
            <SubTree ID="TeleconferenceOFF" __shared_blackboard="false"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Initiation: Created Whereby Teleconference"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Initiation: Initiation Over"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="InitiationOFBTandVariables_one_screen">
        <Sequence>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Initialization: Tree started"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Initiation: Starting Variable Declaration"/>
            <SubTree ID="VariableDeclaration" __shared_blackboard="true"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Initiation: Finished Variable Declaration"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Initiation: Sending Home and Confirming Disabling of All ASR"/>
            <SubTree ID="HaruGoHome"/>
            <SubTree ID="StrawberryDisableAllASR"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Initiation: Sent Home and ASR deactivated Done"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Initiation: Creating Whereby Teleconference"/>
            <SubTree ID="EMSyncPointAndSkipButton" __shared_blackboard="false" bt_id="{bt_id}" msg_skip_ipad="Init Stage: Initial Wait Sync" msg_to_sync="Init Stage: Sync Msg One" stage_id="{stage_id}"/>
            <SubTree ID="UnityProjectorWherebyCreateMeeting" __shared_blackboard="false" meeting_duration="60"/>
            <WaitSeconds duration="5" name="Wait 5 secs Teleconference is created"/>
            <SubTree ID="TeleconferenceOFF" __shared_blackboard="false"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Initiation: Created Whereby Teleconference"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Initiation: Initiation Over"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="IntroduceClassesStage">
        <Sequence name="Introduce Classes Stage">
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Introduce Classes Stage: Beginning"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Beginnig of Introudce Classes Stage" num_sub_stages="7" stage="{stage}" stage_id="{stage_id}" sub_stage="Begin" sub_stage_id="1" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <Sequence>
                <Action ID="UnityProjectorCommandWherebyShow" latch="0" queue_size="1" show_teleconference="true" topic="/unity_projector/whereby/show"/>
                <SubTree ID="UnityProjectorWherebyCameraON"/>
            </Sequence>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Introduction Stage: Sent Home and Sync Image Ready"/>
            <SubTree ID="HaruSpeaksTTS" phrases="hello guys!"/>
            <WaitSeconds duration="1"/>
            <SubTree ID="lookAtChildren" __shared_blackboard="false" table_height="{table_height}" table_horizontal="{table_horizontal}" table_proximity="{table_proximity}"/>
            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="We will have students here from Japan and Australia. Not only do I get new friends but I also get them from around the world!" result="tts_result"/>
            <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="903"/>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Introduction Stage sync: Waving hello" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Introduce Classes Stage: Comment Done. Wait sync point for turnning teleconference on"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Wating for the other class to turn on the teleconference" num_sub_stages="7" stage="{stage}" stage_id="{stage_id}" sub_stage="Waiting" sub_stage_id="2" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Introduce Classes Stage: Sync point passed"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Introduce Classes Stage: Switching to synchronous mode"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Both classes are connected. Waiting for AUS students to introduce themselves" num_sub_stages="7" stage="{stage}" stage_id="{stage_id}" sub_stage="AUS Introduction" sub_stage_id="3" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <Sequence>
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Meeting Stage: Staring AUS Comment Names"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Meeting Stage: AUS Comment Names" num_sub_stages="5" stage="{stage}" stage_id="{stage_id}" sub_stage="AUS Names Question" sub_stage_id="3" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                <BlackboardCheckString name="AUS" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                    <Sequence>
                        <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Meeting Stage: AUS Names Question Starting"/>
                        <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                        <SubTree ID="lookAtChildren" __shared_blackboard="false" table_height="{table_height}" table_horizontal="{table_horizontal}" table_proximity="{table_proximity}"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Australian Children, can you tell me your names?" result="tts_result"/>
                        <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="903"/>
                    </Sequence>
                </BlackboardCheckString>
            </Sequence>
            <Parallel failure_threshold="1" success_threshold="1">
                <Loop>
                    <Sequence>
                        <WaitSeconds duration="3"/>
                        <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="407"/>
                        <WaitSeconds duration="2"/>
                        <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="808"/>
                    </Sequence>
                </Loop>
                <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="Meeting Stage: Waiting AUS Children names"/>
            </Parallel>
            <BlackboardCheckString return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                <Sequence>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Happy to meet you!" result="tts_result"/>
                    <WaitSeconds duration="1"/>
                    <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="501"/>
                    <WaitMilliseconds duration="0.5"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="EMSyncPointAndSkipButton" __shared_blackboard="false" bt_id="{bt_id}" msg_skip_ipad="Waiting for happy to see you Australian comment" msg_to_sync="Once gin this is a random sync Msg Happy to see you Australia" stage_id="{stage_id}"/>
            <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
            <SubTree ID="lookAtTV" __shared_blackboard="false" screen_height="{screen_height}" screen_horizontal="{screen_horizontal}" screen_proximity="{screen_proximity}"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Meeting Stage: AUS Names Done"/>
            <Sequence>
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Meeting Stage: Staring JAP Comment Names"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Meeting Stage: JAP Comment Names" num_sub_stages="5" stage="{stage}" stage_id="{stage_id}" sub_stage="JAP Names Question" sub_stage_id="4" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <BlackboardCheckString name="JAP" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                    <Sequence>
                        <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Meeting Stage: AUS Names Question Starting"/>
                        <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                        <SubTree ID="lookAtChildren" __shared_blackboard="false" table_height="{table_height}" table_horizontal="{table_horizontal}" table_proximity="{table_proximity}"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Children from Japan, can you tell me your names?" result="tts_result"/>
                        <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="903"/>
                    </Sequence>
                </BlackboardCheckString>
            </Sequence>
            <Parallel failure_threshold="1" success_threshold="1">
                <Loop>
                    <Sequence>
                        <WaitSeconds duration="1"/>
                        <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="407"/>
                        <WaitSeconds duration="2"/>
                        <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="808"/>
                    </Sequence>
                </Loop>
                <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="Meeting Stage: Waiting JAPAN Children names"/>
            </Parallel>
            <BlackboardCheckString return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                <Sequence>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="It is great that you all made it here today! " result="tts_result"/>
                    <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="501"/>
                    <WaitSeconds duration="0.5"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="EMSyncPointAndSkipButton" __shared_blackboard="false" bt_id="{bt_id}" msg_skip_ipad="Waiting for happy to see you Australian comment" msg_to_sync="Once gin this is a random sync Msg Happy to see you Australia" stage_id="{stage_id}"/>
            <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
            <SubTree ID="lookAtChildren" __shared_blackboard="false" table_height="{table_height}" table_horizontal="{table_horizontal}" table_proximity="{table_proximity}"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Meeting Stage: JAPAN Names Done"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Introduce Classes Stage: Sync point passed After Jap Comment"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="End of Introduce Classes Stage. Following with User Registration stage" num_sub_stages="7" stage="{stage}" stage_id="{stage_id}" sub_stage="End" sub_stage_id="7" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <MathOperationInt first="{stage_id}" operator="+" output="stage_id" second="1"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Introduce Classes Stage Ends"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="IsHaruAudioPlaying">
        <ReactiveSequence>
            <RetryUntilSuccessful num_attempts="10">
                <Fallback>
                    <Action ID="HaruMonitorAudio" consume_msgs="0" queue_size="1" serialized_output="audio_status_msg" topic="/idmind_tabletop/audio_status"/>
                    <ForceFailure>
                        <WaitMilliseconds duration="200"/>
                    </ForceFailure>
                </Fallback>
            </RetryUntilSuccessful>
            <Sequence>
                <Action ID="GetMessageField" field="/status" input="${audio_status_msg}" output="audio_status"/>
                <Action ID="ConvertJsonToUint64" input="${audio_status}" output="audio_status_uint"/>
                <CompareNumbers comparison_op="==" first="${audio_status_uint}" second="0"/>
            </Sequence>
        </ReactiveSequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="IsHaruLCDPlaying">
        <ReactiveSequence>
            <RetryUntilSuccessful num_attempts="10">
                <Fallback>
                    <Action ID="HaruMonitorLCD" consume_msgs="0" queue_size="1" serialized_output="lcd_status_msg" topic="/idmind_tabletop/lcd_status"/>
                    <ForceFailure>
                        <WaitMilliseconds duration="200"/>
                    </ForceFailure>
                </Fallback>
            </RetryUntilSuccessful>
            <Sequence>
                <Action ID="GetMessageField" field="/status" input="${lcd_status_msg}" output="lcd_status"/>
                <Action ID="ConvertJsonToUint64" input="${lcd_status}" output="lcd_status_uint"/>
                <CompareNumbers comparison_op="==" first="${lcd_status_uint}" second="0"/>
            </Sequence>
        </ReactiveSequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="IsHaruProjectorPlaying">
        <ReactiveSequence>
            <RetryUntilSuccessful num_attempts="10">
                <Fallback>
                    <Action ID="HaruMonitorProjector" consume_msgs="0" queue_size="1" serialized_output="projector_status_msg" topic="/idmind_tabletop/projector_status"/>
                    <ForceFailure>
                        <WaitMilliseconds duration="200"/>
                    </ForceFailure>
                </Fallback>
            </RetryUntilSuccessful>
            <Sequence>
                <Action ID="ConvertMessageField" field="/status" input="${projector_status_msg}" output="projector_status"/>
                <CompareNumbers comparison_op="==" first="${projector_status}" second="0"/>
            </Sequence>
        </ReactiveSequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="IsHaruRoutinePlaying">
        <ReactiveSequence>
            <RetryUntilSuccessful num_attempts="10">
                <Fallback>
                    <Action ID="HaruMonitorRoutine" consume_msgs="0" queue_size="1" serialized_output="routine_status_msg" topic="/idmind_tabletop/routine_status"/>
                    <ForceFailure>
                        <WaitMilliseconds duration="200"/>
                    </ForceFailure>
                </Fallback>
            </RetryUntilSuccessful>
            <Sequence>
                <Action ID="GetMessageField" field="/progress" input="${routine_status_msg}" output="routine_status"/>
                <Action ID="ConvertJsonToDouble" input="${routine_status}" output="routine_status_double"/>
                <CompareNumbers comparison_op="&lt;" first="${routine_status_double}" second="1.0"/>
            </Sequence>
        </ReactiveSequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="IsHaruSpeaking">
        <ReactiveSequence>
            <RetryUntilSuccessful num_attempts="10">
                <Fallback>
                    <Action ID="HaruMonitorTTS" consume_msgs="0" queue_size="1" serialized_output="_tts_status_msg" topic="/idmind_tabletop/tts_status"/>
                    <ForceFailure>
                        <WaitMilliseconds duration="200"/>
                    </ForceFailure>
                </Fallback>
            </RetryUntilSuccessful>
            <Sequence>
                <Action ID="GetMessageField" field="/status" input="${_tts_status_msg}" output="_tts_status"/>
                <Action ID="ConvertJsonToDouble" input="${_tts_status}" output="_tts_status_double"/>
                <CompareNumbers comparison_op="==" first="${_tts_status_double}" second="2"/>
            </Sequence>
        </ReactiveSequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="IsHaruTracking">
        <ReactiveSequence>
            <RetryUntilSuccessful num_attempts="10">
                <Fallback>
                    <Action ID="HaruMonitorTrack" consume_msgs="0" queue_size="1" serialized_output="track_status_msg" topic="/idmind_tabletop/track_status"/>
                    <ForceFailure>
                        <WaitMilliseconds duration="100"/>
                    </ForceFailure>
                </Fallback>
            </RetryUntilSuccessful>
            <Action ID="ConvertMessageField" field="/tracking" input="${track_status_msg}" output="track_status"/>
            <CheckBool input="${track_status}"/>
        </ReactiveSequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="IstCleanupText">
        <Sequence>
            <Action ID="TextCleanupApiCallAction" action="/ist_cleanup_py" sentence="{sentence}" serialized_feedback="feedback" serialized_result="result" state="state"/>
            <Action ID="ConvertMessageField" field="/cleaned_sentence" input="{result}" output="cleaned_sentence"/>
            <Action ID="ConvertMessageField" field="/input_flag" input="{result}" output="input_flag"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="IstSendToHaru">
        <Sequence>
            <Action ID="IstApiCallAction" action="/ist_server_py" sentence="{sentence}" serialized_feedback="feedback" serialized_result="result" state="state" to_filter="{to_filter}"/>
            <Action ID="ConvertMessageField" field="/answer_haru" input="{result}" output="answer_haru"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="IstSteeredSendToHaru">
        <Sequence>
            <Action ID="IstSteeredApiCallAction" action="/ist_server_py" emotion_wished="{emotion_wished}" sentence="{sentence}" serialized_feedback="feedback" serialized_result="result" state="state" to_filter="{to_filter}"/>
            <Action ID="ConvertMessageField" field="/answer_haru" input="{result}" output="answer_haru"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="JAPSharedPicsStage">
        <Sequence>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="JAP Shared Pics Stage: Starting"/>
            <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
            <Sequence>
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="JAP Shared Pics Stage: First Comment"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="JAP Shared Pics Stage: First Comment" num_sub_stages="7" stage="{stage}" stage_id="{stage_id}" sub_stage="First Comment" sub_stage_id="1" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Let us go now to your shared photos." result="tts_result"/>
            </Sequence>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="JAP Shared Pics Stage: Show photos" num_sub_stages="7" stage="{stage}" stage_id="{stage_id}" sub_stage="Show user photos" sub_stage_id="2" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <BlackboardCheckString name="AUS" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                <Sequence>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="JAP Shared Pics Stage: Second Comment AUS"/>
                    <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="JAP Shared Pics Stage: Second Comment AUS" num_sub_stages="7" stage="{stage}" stage_id="{stage_id}" sub_stage="Second comment AUS" sub_stage_id="3" this_country="{this_country}" this_country_id="{this_country_id}"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Let us start with the guys in Japan!" result="tts_result"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                    <SubTree ID="lookAtTV" __shared_blackboard="false" screen_height="{screen_height}" screen_horizontal="{screen_horizontal}" screen_proximity="{screen_proximity}"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="EMSyncPointAndSkipButton" __shared_blackboard="false" bt_id="{bt_id}" msg_skip_ipad="JAP Shared Pics Stage: Waiting AUS Comment" msg_to_sync="JAP Shared Pics Stage: Waiting AUS Comment Sync Msg" stage_id="{stage_id}"/>
            <BlackboardCheckString return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                <Sequence>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="JAP Shared Pics Stage: Second Comment JAP"/>
                    <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="JAP Shared Pics Stage: Second Comment JAP" num_sub_stages="7" stage="{stage}" stage_id="{stage_id}" sub_stage="Second Comment JAP" sub_stage_id="4" this_country="{this_country}" this_country_id="{this_country_id}"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Okey! We will go first!" result="tts_result"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                    <SubTree ID="lookAtTV" __shared_blackboard="false" screen_height="{screen_height}" screen_horizontal="{screen_horizontal}" screen_proximity="{screen_proximity}"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="EMSyncPointAndSkipButton" __shared_blackboard="false" bt_id="{bt_id}" msg_skip_ipad="JAP Shared Pics Stage: Second Comments Finished" msg_to_sync="JAP Shared Pics Stage: Second Comments Finished Sync Msg 2" stage_id="{stage_id}"/>
            <SubTree ID="UnityProjectorStopVideo"/>
            <WaitSeconds duration="{stop_video_time}"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="JAP Shared Pics Stage: Second Comments Finished"/>
            <SubTree ID="EMSyncPointAndSkipButton" __shared_blackboard="false" bt_id="{bt_id}" msg_skip_ipad="JAP Shared Pics Stage: Second Comments Finished and preconfi" msg_to_sync="JAP Shared Pics Stage: Second Comments Finished Sync Msg 2 before config" stage_id="{stage_id}"/>
            <Sequence>
                <Sequence name="Focus on one">
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="JAP Shared Pics Stage: Third Comment JAP"/>
                    <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="JAP Shared Pics Stage: Third Comment JAP" num_sub_stages="6" stage="{stage}" stage_id="{stage_id}" sub_stage="Third Comment JAP" sub_stage_id="5" this_country="{this_country}" this_country_id="{this_country_id}"/>
                    <Action ID="UnityProjectorCommandSharedContentViewConfiguration" animation_mode="0" animation_time="{transition_time}" display_number="0" do_animation="true" exit_focused_time="2.0" highlight_focused_time="2.0" latch="true" local_users="{ipad_ids}" queue_size="1" remote_users="{ipad_ids}" remove_others_time="2.0" resize_focused_time="2.0" topic="unity_projector/shared_content_view/configuration" view_mode="7"/>
                    <WaitSeconds duration="1"/>
                    <SubTree ID="UnityProjectorSetDraw" __shared_blackboard="false" draws="{image_paths}" draws_are_paths="true" image_tags="{image_tags}" ipad_ids="{ipad_ids}"/>
                    <WaitSeconds duration="1"/>
                    <Action ID="UnityProjectorCommandSharedContentViewShow" latch="0" queue_size="1" show="true" side_selector="0" topic="unity_projector/shared_content_view/show"/>
                    <WaitMilliseconds duration="{stop_video_time}"/>
                    <SubTree ID="EMSyncPointAndSkipButton" __shared_blackboard="false" bt_id="{bt_id}" msg_skip_ipad="Sharing Pics Stage: Sync Point" msg_to_sync="Pre-Focus Sync Msg Photos Shring" stage_id="{stage_id}"/>
                    <Sequence name="Dialog + Fotos Japan">
                        <SetBlackboard output_key="test_id" value="0"/>
                        <Decorator ID="ForEachLoop" break_on_child_failure="false" input="{image_paths}" output_element="image" output_index="image_index">
                            <Sequence>
                                <MathOperationInt first="{test_id}" operator="+" output="test_id" second="1"/>
                                <SubTree ID="FocusAndDialogVariablesWithSyncs" __shared_blackboard="false" dialog_params="dialog_params" ipad_id="{test_id}" ipad_image_result="{ipad_image_result}" ipad_register_result="{ipad_register_result}"/>
                                <Sequence name="Focus 2">
                                    <BlackboardCheckString name="JAPAN" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                                        <Sequence name="JAP SEQ 1">
                                            <Sequence>
                                                <Fallback>
                                                    <BlackboardCheckInt return_on_mismatch="FAILURE" value_A="{test_id}" value_B="1">
                                                        <Sequence>
                                                            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="This is really hard as I have to choose. Let me see..." result="tts_result"/>
                                                            <WaitSeconds duration="3"/>
                                                        </Sequence>
                                                    </BlackboardCheckInt>
                                                    <BlackboardCheckInt return_on_mismatch="FAILURE" value_A="{test_id}" value_B="{num_ipads}">
                                                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="We are going to choose the last picture on this side" result="tts_result"/>
                                                    </BlackboardCheckInt>
                                                    <Sequence>
                                                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="okay, let's pick the next picture" result="tts_result"/>
                                                        <WaitSeconds duration="3"/>
                                                    </Sequence>
                                                </Fallback>
                                            </Sequence>
                                            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Sharing Pics Stage: Waiting to focus pic 1" sync_feed="sync_feed" sync_result="sync_result"/>
                                            <Action ID="UnityProjectorCommandSharedContentViewFocusOne" do_animation="true" do_focus="true" highlight_a="255" highlight_b="53" highlight_g="235" highlight_r="255" latch="0" queue_size="1" side_selector="0" topic="unity_projector/shared_content_view/focus_one" user_id="{test_id}"/>
                                            <WaitSeconds duration="{stop_video_time}"/>
                                            <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                                            <SubTree ID="lookAtChildren" __shared_blackboard="false" table_height="{table_height}" table_horizontal="{table_horizontal}" table_proximity="{table_proximity}"/>
                                            <Parallel failure_threshold="1" success_threshold="1">
                                                <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="Sharing Pics Stage: Skip button for dialog" stage_id="{stage_id}"/>
                                                <SubTree ID="EMUnderstandEvent" __shared_blackboard="false" dialog_response="dialog_response" dialog_result="dialog_result" event_name="command-ask-about-photo" event_params="{dialog_params}" person_id="{test_id}" timeout="0"/>
                                            </Parallel>
                                            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Sharing Pics Stage: Wait to talk" sync_feed="sync_feed" sync_result="sync_result"/>
                                            <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="{stage}"/>
                                            <SubTree ID="lookAtTV" __shared_blackboard="false" screen_height="{screen_height}" screen_horizontal="{screen_horizontal}" screen_proximity="{screen_proximity}"/>
                                            <Action ID="UnityProjectorCommandSharedContentViewFocusOne" do_animation="true" do_focus="false" highlight_a="255" highlight_b="53" highlight_g="235" highlight_r="231" latch="0" queue_size="1" side_selector="0" topic="unity_projector/shared_content_view/focus_one" user_id="{test_id}"/>
                                            <WaitSeconds duration="{stop_video_time}"/>
                                        </Sequence>
                                    </BlackboardCheckString>
                                    <BlackboardCheckString return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                                        <Sequence name="AUS SEQ 2">
                                            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Sharing Pics Stage: Waiting to focus pic 1" sync_feed="sync_feed" sync_result="sync_result"/>
                                            <Action ID="UnityProjectorCommandSharedContentViewFocusOne" do_animation="true" do_focus="true" highlight_a="255" highlight_b="53" highlight_g="255" highlight_r="231" latch="0" queue_size="1" side_selector="1" topic="unity_projector/shared_content_view/focus_one" user_id="{test_id}"/>
                                            <WaitSeconds duration="{stop_video_time}"/>
                                            <Parallel failure_threshold="1" success_threshold="1">
                                                <Loop>
                                                    <Sequence>
                                                        <WaitSeconds duration="2"/>
                                                        <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="410"/>
                                                        <WaitSeconds duration="2"/>
                                                        <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="808"/>
                                                    </Sequence>
                                                </Loop>
                                                <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Sharing Pics Stage: Wait to talk" sync_feed="sync_feed" sync_result="sync_result"/>
                                            </Parallel>
                                            <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                                            <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="{stage}"/>
                                            <Action ID="UnityProjectorCommandSharedContentViewFocusOne" do_animation="true" do_focus="false" highlight_a="255" highlight_b="53" highlight_g="255" highlight_r="231" latch="0" queue_size="1" side_selector="1" topic="unity_projector/shared_content_view/focus_one" user_id="{test_id}"/>
                                            <WaitSeconds duration="{stop_video_time}"/>
                                        </Sequence>
                                    </BlackboardCheckString>
                                    <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                                    <SubTree ID="EMSyncPointAndSkipButton" __shared_blackboard="false" bt_id="{bt_id}" msg_skip_ipad="Msg After Sync Of Pic 2" msg_to_sync="Msg 2 Sync After Pics Focused and Comment in JAP" stage_id="{stage_id}"/>
                                    <Action ID="UnityProjectorCommandSharedContentViewShow" latch="0" queue_size="1" show="true" side_selector="0" topic="unity_projector/shared_content_view/show"/>
                                    <WaitSeconds duration="{stop_video_time}"/>
                                </Sequence>
                            </Sequence>
                        </Decorator>
                        <SubTree ID="lookAtTV" __shared_blackboard="false" screen_height="{screen_height}" screen_horizontal="{screen_horizontal}" screen_proximity="{screen_proximity}"/>
                        <BlackboardCheckString name="JAP" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                            <Sequence>
                                <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                                <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="That’s been all here in Japan! What do you have for showing us Australia?&#10;" result="tts_result"/>
                                <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                            </Sequence>
                        </BlackboardCheckString>
                    </Sequence>
                    <SubTree ID="EMSyncPointAndSkipButton" __shared_blackboard="false" bt_id="{bt_id}" msg_skip_ipad="Sharing Photos AUS" msg_to_sync="Sharing photos AUS Synch Point 1234" stage_id="{stage_id}"/>
                    <Sequence name="Dialog + Fotos Australia">
                        <SetBlackboard output_key="test_id" value="0"/>
                        <Action ID="InfoLog" message="{image_paths}"/>
                        <BlackboardCheckString name="AUS continues" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                            <Sequence>
                                <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                                <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="And now it is our turn!" result="tts_result"/>
                                <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                            </Sequence>
                        </BlackboardCheckString>
                        <SubTree ID="EMSyncPointAndSkipButton" __shared_blackboard="false" bt_id="{bt_id}" msg_skip_ipad="Sync Point While AUS say they cntinue" msg_to_sync="Sync Point While AUS say they cntinue Sync Msg" stage_id="{stage_id}"/>
                        <Decorator ID="ForEachLoop" break_on_child_failure="false" input="{image_paths}" output_element="image" output_index="image_index">
                            <Sequence>
                                <MathOperationInt first="{test_id}" operator="+" output="test_id" second="1"/>
                                <SubTree ID="FocusAndDialogVariablesWithSyncs" __shared_blackboard="false" dialog_params="dialog_params" ipad_id="{test_id}" ipad_image_result="{ipad_image_result}" ipad_register_result="{ipad_register_result}"/>
                                <Sequence name="Focus 1">
                                    <BlackboardCheckString name="AUS" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                                        <Sequence name="AUS SEQ">
                                            <Sequence>
                                                <Fallback>
                                                    <BlackboardCheckInt return_on_mismatch="FAILURE" value_A="{test_id}" value_B="1">
                                                        <Sequence>
                                                            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Now it is Australias turn! Let me see…" result="tts_result"/>
                                                            <WaitSeconds duration="3"/>
                                                        </Sequence>
                                                    </BlackboardCheckInt>
                                                    <BlackboardCheckInt return_on_mismatch="FAILURE" value_A="{test_id}" value_B="{num_ipads}">
                                                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="We are going to choose the last picture on this side" result="tts_result"/>
                                                    </BlackboardCheckInt>
                                                    <Sequence>
                                                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="okay, let's pic the next picture" result="tts_result"/>
                                                        <WaitSeconds duration="3"/>
                                                    </Sequence>
                                                </Fallback>
                                            </Sequence>
                                            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Sharing Pics Stage: Waiting to focus pic" sync_feed="sync_feed" sync_result="sync_result"/>
                                            <Action ID="UnityProjectorCommandSharedContentViewFocusOne" do_animation="true" do_focus="true" highlight_a="255" highlight_b="53" highlight_g="255" highlight_r="231" latch="0" queue_size="1" side_selector="0" topic="unity_projector/shared_content_view/focus_one" user_id="{test_id}"/>
                                            <WaitSeconds duration="{stop_video_time}"/>
                                            <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                                            <SubTree ID="lookAtChildren" __shared_blackboard="false" table_height="{table_height}" table_horizontal="{table_horizontal}" table_proximity="{table_proximity}"/>
                                            <Parallel failure_threshold="1" success_threshold="1">
                                                <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="Sharing Pics Stage: Skip button for dialog" stage_id="{stage_id}"/>
                                                <SubTree ID="EMUnderstandEvent" __shared_blackboard="false" dialog_response="dialog_response" dialog_result="dialog_result" event_name="command-ask-about-photo" event_params="{dialog_params}" person_id="{test_id}" timeout="0"/>
                                            </Parallel>
                                            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Sharing Pics Stage: Wait to talk" sync_feed="sync_feed" sync_result="sync_result"/>
                                            <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="{stage}"/>
                                            <SubTree ID="lookAtTV" __shared_blackboard="false" screen_height="{screen_height}" screen_horizontal="{screen_horizontal}" screen_proximity="{screen_proximity}"/>
                                            <Action ID="UnityProjectorCommandSharedContentViewFocusOne" do_animation="true" do_focus="false" highlight_a="255" highlight_b="53" highlight_g="255" highlight_r="231" latch="0" queue_size="1" side_selector="0" topic="unity_projector/shared_content_view/focus_one" user_id="{test_id}"/>
                                            <WaitSeconds duration=" {stop_video_time}"/>
                                        </Sequence>
                                    </BlackboardCheckString>
                                    <BlackboardCheckString return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                                        <Sequence name="JAP SEQ">
                                            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Sharing Pics Stage: Waiting to focus pic" sync_feed="sync_feed" sync_result="sync_result"/>
                                            <Action ID="UnityProjectorCommandSharedContentViewFocusOne" do_animation="true" do_focus="true" highlight_a="255" highlight_b="53" highlight_g="255" highlight_r="231" latch="0" queue_size="1" side_selector="1" topic="unity_projector/shared_content_view/focus_one" user_id="{test_id}"/>
                                            <WaitSeconds duration="{stop_video_time}"/>
                                            <Parallel failure_threshold="1" success_threshold="1">
                                                <Loop>
                                                    <Sequence>
                                                        <WaitSeconds duration="2"/>
                                                        <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="410"/>
                                                        <WaitSeconds duration="2"/>
                                                        <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="808"/>
                                                    </Sequence>
                                                </Loop>
                                                <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Sharing Pics Stage: Wait to talk" sync_feed="sync_feed" sync_result="sync_result"/>
                                            </Parallel>
                                            <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                                            <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="{stage}"/>
                                            <Action ID="UnityProjectorCommandSharedContentViewFocusOne" do_animation="true" do_focus="false" highlight_a="255" highlight_b="53" highlight_g="255" highlight_r="231" latch="0" queue_size="1" side_selector="1" topic="unity_projector/shared_content_view/focus_one" user_id="{test_id}"/>
                                            <WaitSeconds duration="{stop_video_time}"/>
                                        </Sequence>
                                    </BlackboardCheckString>
                                    <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                                    <SubTree ID="EMSyncPointAndSkipButton" __shared_blackboard="false" bt_id="{bt_id}" msg_skip_ipad="Msg After Sync Of Pic" msg_to_sync="Msg 2 Sync After Pics Focused and Comment in AUS" stage_id="{stage_id}"/>
                                    <WaitSeconds duration="1"/>
                                    <Fallback>
                                        <BlackboardCheckString return_on_mismatch="FAILURE" value_A="{test_id}" value_B="{num_ipads}">
                                            <Action ID="InfoLog" message="Last Picture"/>
                                        </BlackboardCheckString>
                                        <Sequence>
                                            <Action ID="UnityProjectorCommandSharedContentViewShow" latch="0" queue_size="1" show="true" side_selector="0" topic="unity_projector/shared_content_view/show"/>
                                            <WaitSeconds duration="{stop_video_time}"/>
                                        </Sequence>
                                    </Fallback>
                                </Sequence>
                            </Sequence>
                        </Decorator>
                    </Sequence>
                </Sequence>
            </Sequence>
            <Action ID="UnityProjectorCommandSharedContentViewConfiguration" animation_mode="0" animation_time="{transition_time}" display_number="0" do_animation="true" exit_focused_time="2.0" highlight_focused_time="2.0" latch="0" local_users="{ipad_ids}" queue_size="1" remote_users="{ipad_ids}" remove_others_time="2.0" resize_focused_time="2.0" topic="unity_projector/shared_content_view/configuration" view_mode="7"/>
            <WaitSeconds duration="1"/>
            <Action ID="UnityProjectorCommandSharedContentViewShow" latch="0" queue_size="1" show="true" side_selector="0" topic="unity_projector/shared_content_view/show"/>
            <WaitSeconds duration="{stop_video_time}"/>
            <Parallel failure_threshold="1" success_threshold="1">
                <Loop>
                    <Sequence>
                        <WaitSeconds duration="2"/>
                        <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="410"/>
                        <WaitSeconds duration="2"/>
                        <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="808"/>
                    </Sequence>
                </Loop>
                <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="Waiting Comment photos"/>
            </Parallel>
            <SubTree ID="lookAtTV" __shared_blackboard="false" screen_height="{screen_height}" screen_horizontal="{screen_horizontal}" screen_proximity="{screen_proximity}"/>
            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Oh, we have finished with all pictures." result="tts_result"/>
            <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="6"/>
            <SubTree ID="lookAtChildren" __shared_blackboard="false" table_height="{table_height}" table_horizontal="{table_horizontal}" table_proximity="{table_proximity}"/>
            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="I had a lot of fun with all of your pictures!" result="tts_result"/>
            <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="903"/>
            <Action ID="UnityProjectorCommandSharedContentViewShow" latch="0" queue_size="1" show="false" side_selector="0" topic="unity_projector/shared_content_view/show"/>
            <WaitSeconds duration="{stop_video_time}"/>
            <SubTree ID="Add1ToStageID" __shared_blackboard="true"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="Kanji1Stage">
        <Sequence name="Kanji 1 Stage">
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Kanji 1 Stage: Begins"/>
            <SetBlackboard output_key="kanji_1_n_substages" value="8"/>
            <SubTree ID="TeleconferenceON" __shared_blackboard="false"/>
            <WaitSeconds duration="1"/>
            <Sequence name="AUS TTS I">
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Kanji 1: AUS TTS I"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Kanji 1: AUS TTS I" num_sub_stages="{kanji_1_n_substages}" stage="{stage}" stage_id="{stage_id}" sub_stage="AUS TTS I" sub_stage_id="1" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <BlackboardCheckString name="Australia" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                    <Sequence>
                        <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                        <WaitSeconds duration="0.5"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Insects are amazing, we can learn a lot from the insect kingdom, for a start - how to say ant and grasshopper in each other’s language" result="tts_result"/>
                        <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                    </Sequence>
                </BlackboardCheckString>
            </Sequence>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Kanji 1 Stage AUS TTS" sync_feed="sync_feed" sync_result="sync_result"/>
            <Sequence name="JAP TTS I">
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Kanji 1: JAP TTS I"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Kanji 1: JAP TTS I" num_sub_stages="{kanji_1_n_substages}" stage="{stage}" stage_id="{stage_id}" sub_stage="JAP TTS I" sub_stage_id="2" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <BlackboardCheckString name="Japan" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                    <Sequence>
                        <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                        <WaitSeconds duration="0.5"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Could you use your ipads to translate the Grasshopper and the Ant into Japanese for our Australian Guests?" result="tts_result"/>
                        <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                    </Sequence>
                </BlackboardCheckString>
            </Sequence>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Kanji 1 Stage JAP TTS" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="TeleconferenceOFF" __shared_blackboard="false"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Kanji 1: Showing Chat in the projector"/>
            <Fallback name="Show Chat">
                <Sequence name="Japan">
                    <CompareStrings comparison_op="==" first="{this_country}" name="Japan" second="{country_2}"/>
                    <SubTree ID="UnityProjectorShowChat" __shared_blackboard="false" show_mode="1" time_between_msgs="1.0"/>
                </Sequence>
                <Sequence name="Australia">
                    <SubTree ID="UnityProjectorShowChat" __shared_blackboard="false" show_mode="2" time_between_msgs="1.0"/>
                </Sequence>
            </Fallback>
            <SubTree ID="HaruExecuteRoutine" routines="903"/>
            <Sequence name="JAP IPAD QUESTION">
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Kanji 1: JAP Translate Question"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Kanji 1: JAP Translate Question" num_sub_stages="{kanji_1_n_substages}" stage="{stage}" stage_id="{stage_id}" sub_stage="JAP Translate Question" sub_stage_id="3" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <BlackboardCheckString name="Japan" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                    <Parallel failure_threshold="2" success_threshold="1">
                        <Sequence name="iPads -&gt; Projector Chat">
                            <SubTree ID="EMIPadQuestionAndWait" __shared_blackboard="false" choices="" ipad_ids="-1" question="Could you translate &quot;Ant&quot; and &quot;Grasshopper&quot;  into Japanese?" question_feed="question_feed" question_result="question_result" question_type="2" timeout="60"/>
                            <Action ID="ConvertMessageField" field="/ipad_ids" input="${question_result}" output="ipad_ids"/>
                            <Action ID="ConvertMessageField" field="/answers" input="${question_result}" output="answers"/>
                            <SubTree ID="UnityProjectorSetChatMessage" __shared_blackboard="false" ipad_ids="{ipad_ids}" messages="{answers}"/>
                        </Sequence>
                        <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="Kanji 1 Stage: Wait sync point for JAP iPads Interaction" stage_id="{stage_id}"/>
                    </Parallel>
                </BlackboardCheckString>
            </Sequence>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Kanji 1: Waiting for JAP ipads answers" sync_feed="sync_feed" sync_result="sync_result"/>
            <ForceSuccess>
                <Timeout msec="180000">
                    <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="{stage}"/>
                </Timeout>
            </ForceSuccess>
            <SubTree ID="UnityProjectorHideChat"/>
            <SubTree ID="TeleconferenceON" __shared_blackboard="false"/>
            <WaitSeconds duration="1"/>
            <Sequence name="JAP TTS II">
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Kanji 1: JAP TTS II"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Kanji 1: JAP TTS II" num_sub_stages="{kanji_1_n_substages}" stage="{stage}" stage_id="{stage_id}" sub_stage=" JAP TTS II" sub_stage_id="4" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <BlackboardCheckString name="Japan" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                    <Sequence>
                        <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                        <WaitSeconds duration="0.5"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="On screen we will show the stroke order for ant and grasshopper in kanji and english." result="tts_result"/>
                        <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                    </Sequence>
                </BlackboardCheckString>
            </Sequence>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Kanji 1 Stage JAP TTS II" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="TeleconferenceOFF" __shared_blackboard="false"/>
            <SubTree ID="HaruExecuteRoutine" routines="611"/>
            <Sequence name="BOTH PROJECT VIDEOS">
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Kanji 1: Project Kanji Videos"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Kanji 1: Project Kanji Videos" num_sub_stages="{kanji_1_n_substages}" stage="{stage}" stage_id="{stage_id}" sub_stage="Project Kanji Videos" sub_stage_id="5" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <Parallel failure_threshold="2" success_threshold="1">
                    <Sequence>
                        <SubTree ID="UnityProjectorShowVideoAndWait" __shared_blackboard="false" video_file="KanjiStrokeOrderFullscreen_Grasshopper"/>
                        <SubTree ID="UnityProjectorShowVideoAndWait" __shared_blackboard="false" video_file="KanjiStrokeOrderFullscreen_Ant"/>
                    </Sequence>
                    <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="Kanji 1: Project Kanji Videos" stage_id="{stage_id}"/>
                </Parallel>
            </Sequence>
            <ForceSuccess>
                <Timeout msec="60000">
                    <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="Projector Chat"/>
                </Timeout>
            </ForceSuccess>
            <SubTree ID="UnityProjectorStopVideo"/>
            <SubTree ID="TeleconferenceON" __shared_blackboard="false"/>
            <WaitSeconds duration="2"/>
            <Sequence name="JAP TTS III">
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Kanji 1: JAP TTS III"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Kanji 1: JAP TTS III" num_sub_stages="{kanji_1_n_substages}" stage="{stage}" stage_id="{stage_id}" sub_stage="JAP TTS III" sub_stage_id="6" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <BlackboardCheckString name="Japan" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                    <Sequence>
                        <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                        <WaitSeconds duration="0.5"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Guys, can you show us how to pronounce Ant and Grasshopper in Japanese?" result="tts_result"/>
                        <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                    </Sequence>
                </BlackboardCheckString>
            </Sequence>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Kanji 1 Stage JAP TTS III" sync_feed="sync_feed" sync_result="sync_result"/>
            <SetBlackboard output_key="draw_ipad_id" value="1"/>
            <Sequence name="JAP IPAD DRAW">
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Kanji 1: JAP iPad Draw"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Kanji 1: JAP iPad Draw" num_sub_stages="{kanji_1_n_substages}" stage="{stage}" stage_id="{stage_id}" sub_stage="JAP iPad Draw" sub_stage_id="7" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <BlackboardCheckString name="Japan" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                    <Parallel failure_threshold="2" success_threshold="1">
                        <Sequence name="iPad Draw -&gt; Projector">
                            <SubTree ID="EMIPadKanjiWriteAndWait" __shared_blackboard="false" feedback="kanji_feedback" ipad_ids="{draw_ipad_id}" message="Ant and Grasshopper pronunciation in Japanese?" result="kanji_result" timeout="-1"/>
                            <Action ID="ConvertMessageField" field="/ipad_ids" input="${kanji_result}" output="ipads_ids"/>
                            <Action ID="ConvertMessageField" field="/kanjis_path" input="${kanji_result}" output="kanji_paths"/>
                            <SubTree ID="UnityProjectorSetDraw" __shared_blackboard="false" draws="{kanji_paths}" draws_are_paths="true" image_tags="{kanji_paths}" ipad_ids="{ipads_ids}"/>
                        </Sequence>
                        <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="Kanji 1 Stage: Wait for JAP iPads Interaction" stage_id="{stage_id}"/>
                    </Parallel>
                </BlackboardCheckString>
            </Sequence>
            <WaitMilliseconds duration="1000"/>
            <Parallel failure_threshold="2" success_threshold="1">
                <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Kanji 1: Waiting for JAP drawings" sync_feed="sync_feed" sync_result="sync_result"/>
                <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="Kanji 1: Waiting sync for JAP drawings" stage_id="{stage_id}"/>
            </Parallel>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Kanji 1: Showing Projector drawing"/>
            <SubTree ID="TeleconferenceOFF" __shared_blackboard="false"/>
            <SubTree ID="HaruExecuteRoutine" routines="903"/>
            <Fallback name="else Australia">
                <Sequence name="if Japan">
                    <CompareStrings comparison_op="==" first="{this_country}" name="Japan" second="{country_2}"/>
                    <SubTree ID="UnityProjectorShowDraw" __shared_blackboard="false" draw_delay="0" ipad_id_local="{draw_ipad_id}" ipad_id_remote="" show_mode="1"/>
                </Sequence>
                <Sequence name="Australia">
                    <SubTree ID="UnityProjectorShowDraw" __shared_blackboard="false" draw_delay="0" ipad_id_local="" ipad_id_remote="{draw_ipad_id}" show_mode="2"/>
                </Sequence>
            </Fallback>
            <ForceSuccess>
                <Timeout msec="180000">
                    <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="Projector Drawings"/>
                </Timeout>
            </ForceSuccess>
            <SubTree ID="UnityProjectorHideDraw"/>
            <SubTree ID="TeleconferenceON" __shared_blackboard="false"/>
            <WaitSeconds duration="2"/>
            <Sequence name="AUS TTS II">
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Kanji 1: AUS TTS II"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Kanji 1: AUS TTS II" num_sub_stages="{kanji_1_n_substages}" stage="{stage}" stage_id="{stage_id}" sub_stage="AUS TTS II" sub_stage_id="8" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <BlackboardCheckString name="Australia" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                    <Sequence>
                        <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                        <WaitSeconds duration="0.5"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="That is great! Can you say the words in English?" result="tts_result"/>
                    </Sequence>
                </BlackboardCheckString>
            </Sequence>
            <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="Sync Point Before Thank You "/>
            <BlackboardCheckString return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                <Sequence>
                    <WaitSeconds duration="0.5"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Great, thank you!" result="tts_result"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                </Sequence>
            </BlackboardCheckString>
            <Parallel failure_threshold="2" success_threshold="1">
                <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Kanji 1 Stage AUS Speak interaction" sync_feed="sync_feed" sync_result="sync_result"/>
                <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="Kanji 1 Stage: Wait sync point after AUS Speak interaction" stage_id="{stage_id}"/>
            </Parallel>
            <MathOperationInt first="{stage_id}" operator="+" output="stage_id" second="1"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Kanji 1 Stage: Ends"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="MeetingStage">
        <Sequence>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Meeting Stage: Starting"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Meeting Stage: Kids introduction" num_sub_stages="5" stage="{stage}" stage_id="{stage_id}" sub_stage="Enabling of Teleconference" sub_stage_id="1" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Meeting Stage: Teleconference Configured"/>
            <Sequence>
                <Action ID="UnityProjectorCommandWherebyConfiguration" animation_time="0" coupled="0" display_number="1" do_animation="0" latch="0" pose_mode="0" queue_size="1" return_default="false" size_mode="0" topic="/unity_projector/whereby/configure_teleconf"/>
            </Sequence>
            <Parallel failure_threshold="1" success_threshold="2">
                <Sequence>
                    <SubTree ID="UnityProjectorShowImage" __shared_blackboard="false" image_file="EP02_Welcome"/>
                    <WaitSeconds duration="{stop_video_time}"/>
                </Sequence>
                <Sequence>
                    <Action ID="UnityProjectorCommandWherebyShow" latch="0" queue_size="1" show_teleconference="true" topic="/unity_projector/whereby/show"/>
                    <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                    <SubTree ID="UnityProjectorWherebyCameraON"/>
                </Sequence>
            </Parallel>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Meeting Stage: Teleconference ON"/>
            <SubTree ID="EMSyncPointAndSkipButton" __shared_blackboard="false" bt_id="{bt_id}" msg_skip_ipad="Meeting Stage: Pre-first Comment" msg_to_sync="Meeting Stage: Initial Sync Point" stage_id="{stage_id}"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Meeting Stage: Sync Point Passed"/>
            <Sequence>
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Meeting Stage: Staring Initial Welcome Message"/>
                <SubTree ID="lookAtTV" __shared_blackboard="false" screen_height="{screen_height}" screen_horizontal="{screen_horizontal}" screen_proximity="{screen_proximity}"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Meeting Stage: AU Welcome" num_sub_stages="5" stage="{stage}" stage_id="{stage_id}" sub_stage="Welcome Message" sub_stage_id="2" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases=" Hello Guys!&#10;" result="tts_result"/>
                <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="902"/>
            </Sequence>
            <Parallel failure_threshold="1" success_threshold="1">
                <Loop>
                    <Sequence>
                        <WaitSeconds duration="1"/>
                        <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="808"/>
                        <WaitSeconds duration="1.5"/>
                    </Sequence>
                </Loop>
                <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Meeting Stage Both Comment" sync_feed="sync_feed" sync_result="sync_result"/>
            </Parallel>
            <Sequence>
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Meeting Stage: Staring AUS Comment Names"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Meeting Stage: AUS Comment Names" num_sub_stages="5" stage="{stage}" stage_id="{stage_id}" sub_stage="AUS Names Question" sub_stage_id="3" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
                <BlackboardCheckString name="AUS" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                    <Sequence>
                        <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Meeting Stage: AUS Names Question Starting"/>
                        <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                        <SubTree ID="lookAtChildren" __shared_blackboard="false" table_height="{table_height}" table_horizontal="{table_horizontal}" table_proximity="{table_proximity}"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Australian Children, can you tell me your names again?" result="tts_result"/>
                        <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="903"/>
                    </Sequence>
                </BlackboardCheckString>
            </Sequence>
            <Parallel failure_threshold="1" success_threshold="1">
                <Loop>
                    <Sequence>
                        <WaitSeconds duration="3"/>
                        <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="407"/>
                        <WaitSeconds duration="2"/>
                        <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="808"/>
                    </Sequence>
                </Loop>
                <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="Meeting Stage: Waiting AUS Children names"/>
            </Parallel>
            <BlackboardCheckString return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                <Sequence>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Happy to see you all again!" result="tts_result"/>
                    <WaitSeconds duration="1"/>
                    <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="501"/>
                    <WaitMilliseconds duration="0.5"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="EMSyncPointAndSkipButton" __shared_blackboard="false" bt_id="{bt_id}" msg_skip_ipad="Waiting for happy to see you Australian comment" msg_to_sync="Once gin this is a random sync Msg Happy to see you Australia" stage_id="{stage_id}"/>
            <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
            <SubTree ID="lookAtTV" __shared_blackboard="false" screen_height="{screen_height}" screen_horizontal="{screen_horizontal}" screen_proximity="{screen_proximity}"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Meeting Stage: AUS Names Done"/>
            <Sequence>
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Meeting Stage: Staring JAP Comment Names"/>
                <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Meeting Stage: JAP Comment Names" num_sub_stages="5" stage="{stage}" stage_id="{stage_id}" sub_stage="JAP Names Question" sub_stage_id="4" this_country="{this_country}" this_country_id="{this_country_id}"/>
                <BlackboardCheckString name="JAP" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                    <Sequence>
                        <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Meeting Stage: AUS Names Question Starting"/>
                        <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
                        <SubTree ID="lookAtChildren" __shared_blackboard="false" table_height="{table_height}" table_horizontal="{table_horizontal}" table_proximity="{table_proximity}"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Children from Japan, can you tell me your names again?" result="tts_result"/>
                        <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="903"/>
                    </Sequence>
                </BlackboardCheckString>
            </Sequence>
            <Parallel failure_threshold="1" success_threshold="1">
                <Loop>
                    <Sequence>
                        <WaitSeconds duration="1"/>
                        <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="407"/>
                        <WaitSeconds duration="2"/>
                        <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="808"/>
                    </Sequence>
                </Loop>
                <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="Meeting Stage: Waiting JAPAN Children names"/>
            </Parallel>
            <BlackboardCheckString return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                <Sequence>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="It is great that you all made it here today! " result="tts_result"/>
                    <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="501"/>
                    <WaitSeconds duration="0.5"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="EMSyncPointAndSkipButton" __shared_blackboard="false" bt_id="{bt_id}" msg_skip_ipad="Waiting for happy to see you Australian comment" msg_to_sync="Once gin this is a random sync Msg Happy to see you Australia" stage_id="{stage_id}"/>
            <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
            <SubTree ID="lookAtChildren" __shared_blackboard="false" table_height="{table_height}" table_horizontal="{table_horizontal}" table_proximity="{table_proximity}"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Meeting Stage: JAPAN Names Done"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Meeting Stage: Names Questions PAssed"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Meeting Stage: JAP Comment Names" num_sub_stages="5" stage="{stage}" stage_id="{stage_id}" sub_stage="Name Request Over" sub_stage_id="5" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Meeting Stage: Teleconference Turned on"/>
            <SubTree ID="Add1ToStageID" __shared_blackboard="true"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Meeitng Stage: Over"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PeopleApiCheckPersonHasMaskById">
        <Sequence>
            <Action ID="PeopleApiCallCheckPersonHasMaskById" person_id="{person_id}" serialized_output="json" service="/strawberry/check_person_has_mask_by_id"/>
            <Action ID="ConvertMessageField" field="/has_mask" input="{json}" output="has_mask"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PeopleApiCheckPersonHasMaskByName">
        <Sequence>
            <Action ID="PeopleApiCallCheckPersonHasMaskByName" person_name="{person_name}" serialized_output="json" service="/strawberry/check_person_has_mask_by_name"/>
            <Action ID="ConvertMessageField" field="/has_mask" input="{json}" output="has_mask"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PeopleApiCheckPersonIsFemaleById">
        <Sequence>
            <Action ID="PeopleApiCallCheckPersonIsFemaleById" person_id="{person_id}" serialized_output="json" service="/strawberry/check_person_is_female_by_id"/>
            <Action ID="ConvertMessageField" field="/is_female" input="{json}" output="is_female"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PeopleApiCheckPersonIsFemaleByName">
        <Sequence>
            <Action ID="PeopleApiCallCheckPersonIsFemaleByName" person_name="{person_name}" serialized_output="json" service="/strawberry/check_person_is_female_by_name"/>
            <Action ID="ConvertMessageField" field="/is_female" input="{json}" output="is_female"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PeopleApiCheckPersonIsLookingAtById">
        <Sequence>
            <Action ID="PeopleApiCallCheckPersonInteractionById" axis="{axis}" person_id="{person_id}" point.x="{source_x}" point.y="{source_y}" point.z="{source_z}" serialized_output="json" service="/strawberry/check_person_is_looking_at_by_id" tolerance="{tolerance}"/>
            <Action ID="ConvertMessageField" field="/success" input="{json}" output="success"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PeopleApiCheckPersonIsLookingAtByName">
        <Sequence>
            <Action ID="PeopleApiCallCheckPersonInteractionByName" axis="{axis}" person_name="{person_name}" point.x="{source_x}" point.y="{source_y}" point.z="{source_z}" serialized_output="json" service="/strawberry/check_person_is_looking_at_by_name" tolerance="{tolerance}"/>
            <Action ID="ConvertMessageField" field="/success" input="{json}" output="success"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PeopleApiCheckPersonIsNearToById">
        <Sequence>
            <Action ID="PeopleApiCallCheckPersonInteractionById" axis="{axis}" person_id="{person_id}" point.x="{source_x}" point.y="{source_y}" point.z="{source_z}" serialized_output="json" service="/strawberry/check_person_is_near_to_by_id" tolerance="{tolerance}"/>
            <Action ID="ConvertMessageField" field="/success" input="{json}" output="success"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PeopleApiCheckPersonIsNearToByName">
        <Sequence>
            <Action ID="PeopleApiCallCheckPersonInteractionByName" axis="{axis}" person_name="{person_name}" point.x="{source_x}" point.y="{source_y}" point.z="{source_z}" serialized_output="json" service="/strawberry/check_person_is_near_to_by_name" tolerance="{tolerance}"/>
            <Action ID="ConvertMessageField" field="/success" input="{json}" output="success"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PeopleApiCheckPersonIsPointingToById">
        <Sequence>
            <Action ID="PeopleApiCallCheckPersonInteractionById" axis="{axis}" person_id="{person_id}" point.x="{source_x}" point.y="{source_y}" point.z="{source_z}" serialized_output="json" service="/strawberry/check_person_is_pointing_to_by_id" tolerance="{tolerance}"/>
            <Action ID="ConvertMessageField" field="/success" input="{json}" output="success"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PeopleApiCheckPersonIsPointingToByName">
        <Sequence>
            <Action ID="PeopleApiCallCheckPersonInteractionByName" axis="{axis}" person_name="{person_name}" point.x="{source_x}" point.y="{source_y}" point.z="{source_z}" serialized_output="json" service="/strawberry/check_person_is_pointing_to_by_name" tolerance="{tolerance}"/>
            <Action ID="ConvertMessageField" field="/success" input="{json}" output="success"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PeopleApiGetClosestPerson">
        <Sequence>
            <Action ID="PeopleApiCallGetClosestPerson" serialized_output="json" service="/strawberry/get_closest_person" source_pos.x="{source_x}" source_pos.y="{source_y}" source_pos.z="{source_z}"/>
            <Action ID="ConvertMessageField" field="/person_id" input="{json}" output="person_id"/>
            <Action ID="ConvertMessageField" field="/person_name" input="{json}" output="person_name"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PeopleApiGetIdAndNameLists">
        <Sequence>
            <Action ID="PeopleApiCallGetPersonIdAndNameList" serialized_output="json" service="/strawberry/get_persons_id_and_names"/>
            <Action ID="ConvertMessageField" field="/named_ids" input="{json}" output="tmp_named_ids"/>
            <Action ID="InitializeJson" name="Ids Json" output="tmp_ids"/>
            <Action ID="InitializeJson" name="Names Json" output="tmp_names"/>
            <Decorator ID="ForEachLoop" break_on_child_failure="false" input="{tmp_named_ids}" output_element="named_id" output_index="">
                <Sequence>
                    <Action ID="ConvertMessageField" field="/id" input="{named_id}" output="id"/>
                    <Action ID="InfoLog" message="{id}" name="Extracted Id"/>
                    <Action ID="AddArrayToJson" input_json="{tmp_ids}" input_key="" input_value="{id}" output_json="tmp_ids" override="0"/>
                    <Action ID="ConvertMessageField" field="/name" input="{named_id}" output="name"/>
                    <Action ID="AddArrayToJson" input_json="{tmp_names}" input_key="" input_value="{name}" output_json="tmp_names" override="0"/>
                    <Action ID="InfoLog" message="{name}" name="Extracted Name"/>
                </Sequence>
            </Decorator>
            <SetBlackboard output_key="names_and_ids" value="{tmp_named_ids}"/>
            <SetBlackboard output_key="ids" value="{tmp_ids}"/>
            <SetBlackboard output_key="names" value="{tmp_names}"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PeopleApiGetNumberOfPersons">
        <Sequence>
            <Action ID="PeopleApiCallGetNumberOfPersons" serialized_output="json" service="/strawberry/get_number_of_persons"/>
            <Action ID="ConvertMessageField" field="/value" input="{json}" output="value"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PeopleApiGetPersonBodyPartPosByID">
        <Sequence>
            <Action ID="PeopleApiCallGetPersonBodyPartPosById" body_part="{body_part_name}" person_id="{person_id}" serialized_output="json" service="/strawberry/get_person_body_part_pos_by_id"/>
            <Action ID="ConvertMessageField" field="/body_part_pos/x" input="{json}" output="x"/>
            <Action ID="ConvertMessageField" field="/body_part_pos/y" input="{json}" output="y"/>
            <Action ID="ConvertMessageField" field="/body_part_pos/z" input="{json}" output="z"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PeopleApiGetPersonBodyPartPosByName">
        <Sequence>
            <Action ID="PeopleApiCallGetPersonBodyPartPosByName" body_part="{body_part_name}" person_name="{person_name}" serialized_output="json" service="/strawberry/get_person_body_part_pos_by_name"/>
            <Action ID="ConvertMessageField" field="/body_part_pos/x" input="{json}" output="x"/>
            <Action ID="ConvertMessageField" field="/body_part_pos/y" input="{json}" output="y"/>
            <Action ID="ConvertMessageField" field="/body_part_pos/z" input="{json}" output="z"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PeopleApiGetPersonEmotionById">
        <Sequence>
            <Action ID="PeopleApiCallGetPersonEmotionById" person_id="{person_id}" serialized_output="json" service="/strawberry/get_person_emotion_by_id"/>
            <Action ID="ConvertMessageField" field="/emotion" input="{json}" output="emotion_name"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PeopleApiGetPersonEmotionByName">
        <Sequence>
            <Action ID="PeopleApiCallGetPersonEmotionByName" person_name="{person_name}" serialized_output="json" service="/strawberry/get_person_emotion_by_name"/>
            <Action ID="ConvertMessageField" field="/emotion" input="{json}" output="emotion_name"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PeopleApiGetPersonGestureById">
        <Sequence>
            <Action ID="PeopleApiCallGetPersonGestureById" person_id="{person_id}" serialized_output="json" service="/strawberry/get_person_gesture_by_id"/>
            <Action ID="ConvertMessageField" field="/gesture" input="{json}" output="gesture_name"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PeopleApiGetPersonGestureByName">
        <Sequence>
            <Action ID="PeopleApiCallGetPersonGestureByName" person_name="{person_name}" serialized_output="json" service="/strawberry/get_person_gesture_by_name"/>
            <Action ID="ConvertMessageField" field="/gesture" input="{json}" output="gesture_name"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PeopleApiGetPersonHandsDirById">
        <Sequence>
            <Action ID="PeopleApiCallGetPersonHandsDirById" person_id="{person_id}" serialized_output="json" service="/strawberry/get_person_hands_dir_by_id"/>
            <Action ID="ConvertMessageField" field="/r_hand_dir/x" input="{json}" output="right_hand_x"/>
            <Action ID="ConvertMessageField" field="/r_hand_dir/y" input="{json}" output="right_hand_y"/>
            <Action ID="ConvertMessageField" field="/r_hand_dir/z" input="{json}" output="right_hand_z"/>
            <Action ID="ConvertMessageField" field="/l_hand_dir/x" input="{json}" output="left_hand_x"/>
            <Action ID="ConvertMessageField" field="/l_hand_dir/y" input="{json}" output="left_hand_y"/>
            <Action ID="ConvertMessageField" field="/l_hand_dir/z" input="{json}" output="left_hand_z"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PeopleApiGetPersonHandsDirByName">
        <Sequence>
            <Action ID="PeopleApiCallGetPersonHandsDirByName" person_name="{person_name}" serialized_output="json" service="/strawberry/get_person_hands_dir_by_name"/>
            <Action ID="ConvertMessageField" field="/r_hand_dir/x" input="{json}" output="right_hand_x"/>
            <Action ID="ConvertMessageField" field="/r_hand_dir/y" input="{json}" output="right_hand_y"/>
            <Action ID="ConvertMessageField" field="/r_hand_dir/z" input="{json}" output="right_hand_z"/>
            <Action ID="ConvertMessageField" field="/l_hand_dir/x" input="{json}" output="left_hand_x"/>
            <Action ID="ConvertMessageField" field="/l_hand_dir/y" input="{json}" output="left_hand_y"/>
            <Action ID="ConvertMessageField" field="/l_hand_dir/z" input="{json}" output="left_hand_z"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PeopleApiGetPersonHandsPosById">
        <Sequence>
            <Action ID="PeopleApiCallGetPersonHandsPosById" person_id="{person_id}" serialized_output="json" service="/strawberry/get_person_hands_pos_by_id"/>
            <Action ID="ConvertMessageField" field="/r_hand_pos/x" input="{json}" output="right_hand_x"/>
            <Action ID="ConvertMessageField" field="/r_hand_pos/y" input="{json}" output="right_hand_y"/>
            <Action ID="ConvertMessageField" field="/r_hand_pos/z" input="{json}" output="right_hand_z"/>
            <Action ID="ConvertMessageField" field="/l_hand_pos/x" input="{json}" output="left_hand_x"/>
            <Action ID="ConvertMessageField" field="/l_hand_pos/y" input="{json}" output="left_hand_y"/>
            <Action ID="ConvertMessageField" field="/l_hand_pos/z" input="{json}" output="left_hand_z"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PeopleApiGetPersonHandsPosByName">
        <Sequence>
            <Action ID="PeopleApiCallGetPersonHandsPosByName" person_name="{person_name}" serialized_output="json" service="/strawberry/get_person_hands_pos_by_name"/>
            <Action ID="ConvertMessageField" field="/r_hand_pos/x" input="{json}" output="right_hand_x"/>
            <Action ID="ConvertMessageField" field="/r_hand_pos/y" input="{json}" output="right_hand_y"/>
            <Action ID="ConvertMessageField" field="/r_hand_pos/z" input="{json}" output="right_hand_z"/>
            <Action ID="ConvertMessageField" field="/l_hand_pos/x" input="{json}" output="left_hand_x"/>
            <Action ID="ConvertMessageField" field="/l_hand_pos/y" input="{json}" output="left_hand_y"/>
            <Action ID="ConvertMessageField" field="/l_hand_pos/z" input="{json}" output="left_hand_z"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PeopleApiGetPersonHeadDirById">
        <Sequence>
            <Action ID="PeopleApiCallGetPersonHeadDirById" person_id="{person_id}" serialized_output="json" service="/strawberry/get_person_head_dir_by_id"/>
            <Action ID="ConvertMessageField" field="/head_dir/x" input="{json}" output="x"/>
            <Action ID="ConvertMessageField" field="/head_dir/y" input="{json}" output="y"/>
            <Action ID="ConvertMessageField" field="/head_dir/z" input="{json}" output="z"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PeopleApiGetPersonHeadDirByName">
        <Sequence>
            <Action ID="PeopleApiCallGetPersonHeadDirByName" person_name="{person_name}" serialized_output="json" service="/strawberry/get_person_head_dir_by_name"/>
            <Action ID="ConvertMessageField" field="/head_dir/x" input="{json}" output="x"/>
            <Action ID="ConvertMessageField" field="/head_dir/y" input="{json}" output="y"/>
            <Action ID="ConvertMessageField" field="/head_dir/z" input="{json}" output="z"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PeopleApiGetPersonHeadPosById">
        <Sequence>
            <Action ID="PeopleApiCallGetPersonHeadPosById" person_id="{person_id}" serialized_output="json" service="/strawberry/get_person_head_pos_by_id"/>
            <Action ID="ConvertMessageField" field="/head_pos/x" input="{json}" output="x"/>
            <Action ID="ConvertMessageField" field="/head_pos/y" input="{json}" output="y"/>
            <Action ID="ConvertMessageField" field="/head_pos/z" input="{json}" output="z"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PeopleApiGetPersonHeadPosByName">
        <Sequence>
            <Action ID="PeopleApiCallGetPersonHeadPosByName" person_name="{person_name}" serialized_output="json" service="/strawberry/get_person_head_pos_by_name"/>
            <Action ID="ConvertMessageField" field="/head_pos/x" input="{json}" output="x"/>
            <Action ID="ConvertMessageField" field="/head_pos/y" input="{json}" output="y"/>
            <Action ID="ConvertMessageField" field="/head_pos/z" input="{json}" output="z"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PeopleApiGetPersonIdByName">
        <Sequence>
            <Action ID="PeopleApiCallGetPersonIdByName" person_name="{person_name}" serialized_output="json" service="/strawberry/get_person_id_by_name"/>
            <Action ID="ConvertMessageField" field="/person_id" input="{json}" output="person_id"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PeopleApiGetPersonNameById">
        <Sequence>
            <Action ID="PeopleApiCallGetPersonNameById" person_id="{person_id}" serialized_output="json" service="/strawberry/get_person_name_by_id"/>
            <Action ID="ConvertMessageField" field="/person_name" input="{json}" output="person_name"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PeopleApiGetPersonPosById">
        <Sequence>
            <Action ID="PeopleApiCallGetPersonPosById" person_id="{person_id}" serialized_output="json" service="/strawberry/get_person_pos_by_id"/>
            <Action ID="ConvertMessageField" field="/position/x" input="{json}" output="x"/>
            <Action ID="ConvertMessageField" field="/position/y" input="{json}" output="y"/>
            <Action ID="ConvertMessageField" field="/position/z" input="{json}" output="z"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PeopleApiGetPersonPosByName">
        <Sequence>
            <Action ID="PeopleApiCallGetPersonPosByName" person_name="{person_name}" serialized_output="json" service="/strawberry/get_person_pos_by_name"/>
            <Action ID="ConvertMessageField" field="/position/x" input="{json}" output="x"/>
            <Action ID="ConvertMessageField" field="/position/y" input="{json}" output="y"/>
            <Action ID="ConvertMessageField" field="/position/z" input="{json}" output="z"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PeopleApiGetPersonSpeechByIdAndWait">
        <Sequence>
            <Action ID="PeopleApiCallGetPersonSpeechByIdAction" action="/strawberry/get_person_speech_by_id" person_id="{person_id}" serialized_feedback="feedback" serialized_result="result" state="state" timeout="{timeout}"/>
            <Action ID="ConvertMessageField" field="/success" input="{result}" output="success"/>
            <Action ID="ConvertMessageField" field="/speech_seq" input="{result}" output="speech_id"/>
            <Action ID="ConvertMessageField" field="/speech_text" input="{result}" output="speech_text"/>
            <Action ID="ConvertMessageField" field="/speech_confidence" input="{result}" output="speech_confidence"/>
            <Action ID="ConvertMessageField" field="/speaker_confidence" input="{result}" output="speaker_confidence"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PeopleApiGetPersonSpeechByNameAndWait">
        <Sequence>
            <Action ID="PeopleApiCallGetPersonSpeechByNameAction" action="/strawberry/get_person_speech_by_name" person_name="{person_name}" serialized_feedback="feedback" serialized_result="result" state="state" timeout="{timeout}"/>
            <Action ID="ConvertMessageField" field="/success" input="{result}" output="success"/>
            <Action ID="ConvertMessageField" field="/speech_seq" input="{result}" output="speech_id"/>
            <Action ID="ConvertMessageField" field="/speech_text" input="{result}" output="speech_text"/>
            <Action ID="ConvertMessageField" field="/speech_confidence" input="{result}" output="speech_confidence"/>
            <Action ID="ConvertMessageField" field="/speaker_confidence" input="{result}" output="speaker_confidence"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PeopleApiGetPersonSpeechMaxConfidenceAndWait">
        <Sequence>
            <Action ID="PeopleApiCallGetPersonSpeechMaxConfidenceAction" action="/strawberry/get_person_speech_max_confidence" serialized_feedback="feedback" serialized_result="result" state="state" timeout="{timeout}"/>
            <Action ID="ConvertMessageField" field="/success" input="{result}" output="success"/>
            <Action ID="ConvertMessageField" field="/person_id" input="{result}" output="person_id"/>
            <Action ID="ConvertMessageField" field="/person_name" input="{result}" output="person_name"/>
            <Action ID="ConvertMessageField" field="/speech_seq" input="{result}" output="speech_id"/>
            <Action ID="ConvertMessageField" field="/speech_text" input="{result}" output="speech_text"/>
            <Action ID="ConvertMessageField" field="/speech_confidence" input="{result}" output="speech_confidence"/>
            <Action ID="ConvertMessageField" field="/speaker_confidence" input="{result}" output="speaker_confidence"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PeopleApiGetPersonWakeUpWordAndWait">
        <Sequence>
            <Action ID="PeopleApiCallGetPersonWakeUpWordAction" action="/strawberry/get_person_wake_up_word" serialized_feedback="feedback" serialized_result="result" state="state" timeout="{timeout}"/>
            <Action ID="ConvertMessageField" field="/person_found" input="{result}" output="person_found"/>
            <Action ID="ConvertMessageField" field="/person_id" input="{result}" output="person_id"/>
            <Action ID="ConvertMessageField" field="/person_name" input="{result}" output="person_name"/>
            <Action ID="ConvertMessageField" field="/wake_up_word" input="{result}" output="wake_up_word"/>
            <Action ID="ConvertMessageField" field="/speech_seq" input="{result}" output="speech_id"/>
            <Action ID="ConvertMessageField" field="/speech_text" input="{result}" output="speech_text"/>
            <Action ID="ConvertMessageField" field="/speech_confidence" input="{result}" output="speech_confidence"/>
            <Action ID="ConvertMessageField" field="/speaker_confidence" input="{result}" output="speaker_confidence"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PhotosharingVideoExplanationStage">
        <Sequence>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Photosharing Stage: Starting"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Photosharing Stage Video Explanation: Pics video" num_sub_stages="4" stage="{stage}" stage_id="{stage_id}" sub_stage="Sharing pics video And Config" sub_stage_id="1" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Photosharing Stage: First comment" num_sub_stages="4" stage="{stage}" stage_id="{stage_id}" sub_stage="Comment 1" sub_stage_id="2" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <Sequence>
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Photosharing Stage: Explanation video"/>
                <Parallel failure_threshold="1" success_threshold="2">
                    <Loop>
                        <SubTree ID="UnityProjectorShowVideoAndWait" __shared_blackboard="false" video_file="Ep02_TalkingAboutUs_PR"/>
                    </Loop>
                    <WaitSeconds duration="{stop_video_time}"/>
                    <Sequence>
                        <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Photosharing Stage: Comment video"/>
                        <SubTree ID="lookAtChildren" __shared_blackboard="false" table_height="{table_height}" table_horizontal="{table_horizontal}" table_proximity="{table_proximity}"/>
                        <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Photosharing Stage Video Explanation: First Video comment" num_sub_stages="4" stage="{stage}" stage_id="{stage_id}" sub_stage="First Comment Playing" sub_stage_id="3" this_country="{this_country}" this_country_id="{this_country_id}"/>
                        <Parallel failure_threshold="1" success_threshold="1">
                            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="In this lesson we will be sharing our experiences in the different schools by sharing photos and discussing about it.&#10;" result="tts_result"/>
                            <Loop>
                                <Sequence>
                                    <WaitSeconds duration="1"/>
                                    <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="808"/>
                                    <WaitSeconds duration="1"/>
                                </Sequence>
                            </Loop>
                        </Parallel>
                        <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="312"/>
                    </Sequence>
                </Parallel>
            </Sequence>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Photosharing Stage: Comments And Video Over"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Photosharing Stage Video Explanation: First comment" num_sub_stages="4" stage="{stage}" stage_id="{stage_id}" sub_stage="Video Explanation" sub_stage_id="4" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <Parallel failure_threshold="1" success_threshold="1">
                <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Photosharing Stage Video Explanation: Comment 1 over" sync_feed="sync_feed" sync_result="sync_result"/>
                <Loop>
                    <Sequence>
                        <WaitSeconds duration="1"/>
                        <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="808"/>
                        <WaitSeconds duration="2"/>
                    </Sequence>
                </Loop>
            </Parallel>
            <SubTree ID="UnityProjectorStopVideo"/>
            <WaitSeconds duration="{stop_video_time}"/>
            <SubTree ID="Add1ToStageID" __shared_blackboard="true"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Photosharing Stage Video Explanation: Over"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PreviousSessionStage">
        <Sequence>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Previous Session Stage: Starting"/>
            <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Previous Session Stage: Configuration " num_sub_stages="6" stage="{stage}" stage_id="{stage_id}" sub_stage="GIF Video" sub_stage_id="1" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SetBlackboard output_key="contador_sync" value="0"/>
            <Parallel failure_threshold="1" success_threshold="4">
                <Sequence name="Video en loop">
                    <Loop>
                        <SubTree ID="UnityProjectorShowVideoAndWait" __shared_blackboard="false" video_file="Ep02_Photosharing_Intro"/>
                    </Loop>
                </Sequence>
                <WaitSeconds duration="{stop_video_time}"/>
                <Sequence>
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Previous Session Stage: Haru Initial Comment"/>
                    <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Previous Session Stage: GIF" num_sub_stages="6" stage="{stage}" stage_id="{stage_id}" sub_stage="GIF Playing" sub_stage_id="2" this_country="{this_country}" this_country_id="{this_country_id}"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="This time, I want you all to upload now your photos about your school life using your ipad" result="tts_result"/>
                    <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="312"/>
                    <MathOperationInt first="{contador_sync}" operator="+" output="contador_sync" second="1"/>
                </Sequence>
                <Sequence name="Upload Photos Ipads">
                    <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Previous Stage: Upload photos"/>
                    <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Previous Stage: Upload photos" num_sub_stages="6" stage="{stage}" stage_id="{stage_id}" sub_stage="Upload photos" sub_stage_id="6" this_country="{this_country}" this_country_id="{this_country_id}"/>
                    <Parallel failure_threshold="1" success_threshold="1">
                        <SubTree ID="EMIPadRequestImageAndWait" __shared_blackboard="false" feedback="ipad_image_feedback" ipad_ids="-1" message="Upload photos" result="ipad_image_result" tags="school_lunch;school_sports;transpo" timeout="-1"/>
                        <Sequence>
                            <Inverter>
                                <WhileSuccess>
                                    <Inverter>
                                        <CompareStrings comparison_op="==" first="{contador_sync}" second="1"/>
                                    </Inverter>
                                </WhileSuccess>
                            </Inverter>
                            <Loop>
                                <Sequence>
                                    <WaitSeconds duration="1.5"/>
                                    <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="410"/>
                                </Sequence>
                            </Loop>
                        </Sequence>
                    </Parallel>
                    <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Previous Stage: Upload photos over" sync_feed="sync_feed" sync_result="sync_result"/>
                    <MathOperationInt first="{contador_sync}" operator="+" output="contador_sync" second="1"/>
                </Sequence>
                <Sequence>
                    <Inverter>
                        <WhileSuccess>
                            <Inverter>
                                <CompareStrings comparison_op="==" first="{contador_sync}" second="2"/>
                            </Inverter>
                        </WhileSuccess>
                    </Inverter>
                    <Sequence name="Harus Comments">
                        <Sequence>
                            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Previous Stage: Start show robot pics"/>
                            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Previous Session Stage: Comment pics" num_sub_stages="6" stage="{stage}" stage_id="{stage_id}" sub_stage="Comment 2" sub_stage_id="3" this_country="{this_country}" this_country_id="{this_country_id}"/>
                            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Before we see photos from your lifes let's have a look at our lifes as robots! Are you ready?" result="tts_result"/>
                            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Are you ready?" sync_feed="sync_feed" sync_result="sync_result"/>
                            <SubTree ID="lookAtTV" __shared_blackboard="false" screen_height="{screen_height}" screen_horizontal="{screen_horizontal}" screen_proximity="{screen_proximity}"/>
                        </Sequence>
                        <Sequence name="JAP Comment">
                            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Previous Session Stage:JAP Comment"/>
                            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Previous Session Stage: JAP Comment" num_sub_stages="6" stage="{stage}" stage_id="{stage_id}" sub_stage="JAP Comment" sub_stage_id="4" this_country="{this_country}" this_country_id="{this_country_id}"/>
                            <BlackboardCheckString name="JAP" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                                <Sequence>
                                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="I will start first!" result="tts_result"/>
                                    <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="900"/>
                                </Sequence>
                            </BlackboardCheckString>
                        </Sequence>
                        <Sequence name="AUS Comment">
                            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Previous Session Stage: AUS Comment"/>
                            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Previous Session Stage: Start AUS Comment" num_sub_stages="6" stage="{stage}" stage_id="{stage_id}" sub_stage="AUS Comment" sub_stage_id="5" this_country="{this_country}" this_country_id="{this_country_id}"/>
                            <BlackboardCheckString name="AUS" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                                <Sequence>
                                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="OK! Haru Japan you start first" result="tts_result"/>
                                    <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="900"/>
                                </Sequence>
                            </BlackboardCheckString>
                        </Sequence>
                        <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Previous Session Stage: Over"/>
                    </Sequence>
                </Sequence>
            </Parallel>
            <Sequence>
                <SubTree ID="InitPhotosharingVariables" __shared_blackboard="false" image_paths="image_paths" image_tags="image_tags" ipad_ids="ipad_ids" ipad_image_result="{ipad_image_result}" usernames="usernames"/>
                <SubTree ID="UnityProjectorStopVideo"/>
                <WaitSeconds duration="{stop_video_time}"/>
                <SubTree ID="Add1ToStageID" __shared_blackboard="true"/>
            </Sequence>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="PrivacyStage">
        <Sequence>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Privacy Stage: Starting"/>
            <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Privacy Stage: Setting of Configurations" num_sub_stages="3" stage="{stage}" stage_id="{stage_id}" sub_stage="Configuration" sub_stage_id="1" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Privacy Stage: Mic Mutted"/>
            <WaitSeconds duration="1"/>
            <Action ID="UnityProjectorCommandSetVideoPlayerVolume" latch="0" queue_size="1" topic="/unity_projector/video_player/volume" track="0" volume="0.75"/>
            <Action ID="UnityProjectorCommandVideoPlayerConfiguration" animation_time=" {transition_time}" coupled="0" display_number="0" do_animation="true" info_avatar_file="" info_name="" info_tag="" latch="0" pose_mode="0" queue_size="1" return_default="false" show_info="false" size_mode="0" topic="/unity_projector/video_player/configuration"/>
            <WaitSeconds duration="1"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Privacy Stage: Video and Teleconference Configurated"/>
            <SubTree ID="UnityProjectorHideImage"/>
            <WaitSeconds duration="{stop_video_time}"/>
            <Parallel failure_threshold="1" success_threshold="2">
                <Loop>
                    <SubTree ID="UnityProjectorShowVideoAndWait" __shared_blackboard="false" video_file="03_Explanation_Privacy_2"/>
                </Loop>
                <WaitSeconds duration="{stop_video_time}"/>
                <Parallel failure_threshold="1" success_threshold="1">
                    <Sequence>
                        <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Privacy Stage: Privacy HAru Explanation"/>
                        <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Privacy Stage: Privacy Comments" num_sub_stages="3" stage="{stage}" stage_id="{stage_id}" sub_stage="Comments" sub_stage_id="2" this_country="{this_country}" this_country_id="{this_country_id}"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="I hope you remember the names by now.&#10;" result="tts_result"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="With the Haru system, your information is yours, not mine" result="tts_result"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="I need data in order to make me a better robot, and to make our interactions more engaging" result="tts_result"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="but it is really important to us and to you that your privacy is protected." result="tts_result"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="So if you are worried about anything, talk to us…" result="tts_result"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="After all this is the Talking Room!&#10;" result="tts_result"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Do you have any questions?" result="tts_result"/>
                    </Sequence>
                    <Loop>
                        <Sequence>
                            <WaitSeconds duration="1"/>
                            <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="808"/>
                            <WaitSeconds duration="1"/>
                        </Sequence>
                    </Loop>
                </Parallel>
            </Parallel>
            <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="903"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Privacy Stage: Final Sync Point" num_sub_stages="3" stage="{stage}" stage_id="{stage_id}" sub_stage="Sync" sub_stage_id="3" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <Parallel failure_threshold="1" success_threshold="1">
                <Loop>
                    <Sequence>
                        <WaitSeconds duration="2"/>
                        <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="410"/>
                        <WaitSeconds duration="2"/>
                        <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="808"/>
                    </Sequence>
                </Loop>
                <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="Privacy Stage: Ending"/>
            </Parallel>
            <SubTree ID="UnityProjectorStopVideo"/>
            <WaitSeconds duration="{stop_video_time}"/>
            <SubTree ID="Add1ToStageID" __shared_blackboard="true"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Privacy Stage: Over"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="RosTeleconferenceAudioOFF">
        <Action ID="CallTriggerService" serialized_output="output" service="/teleconference/set_pause_audio"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="RosTeleconferenceAudioON">
        <Action ID="CallTriggerService" serialized_output="output" service="/teleconference/set_resume_audio"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="RosTeleconferenceSyncBuffReset">
        <Action ID="CallEmptyService" service="/teleconference_sync/refresh"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="SaveImage">
        <Sequence>
            <Action ID="HaruCommandSaveImage" file="{image_file}" serialized_output="output" service="/image_saver/save_image" topic="{image_topic}"/>
            <Action ID="ConvertMessageField" field="/success" input="{output}" output="success"/>
            <CheckBool input="{success}"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="Stage10">
        <Sequence>
            <SetBlackboard output_key="tag1" value="school_lunch"/>
            <SetBlackboard output_key="tag2" value="school_sports"/>
            <SetBlackboard output_key="tag3" value="transpo"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StepOne">
        <Sequence>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Step One: Starting"/>
            <Parallel failure_threshold="1" name="Image Configure" success_threshold="2">
                <Action ID="UnityProjectorCommandStaticImageConfiguration" animation_mode="0" animation_time="1.0" coupled="0" display_number="0" do_animation="true" latch="0" position_mode="0" queue_size="1" return_default="false" size_mode="0" topic="/unity_projector/static_image/configure"/>
                <Action ID="UnityProjectorCommandStaticImageConfiguration" animation_mode="0" animation_time="1.0" coupled="0" display_number="1" do_animation="true" latch="0" position_mode="0" queue_size="1" return_default="false" size_mode="0" topic="/unity_projector/static_image_2/configure"/>
            </Parallel>
            <WaitSeconds duration="1"/>
            <Parallel failure_threshold="1" name="Video Configurations" success_threshold="2">
                <Action ID="UnityProjectorCommandVideoPlayerConfiguration" animation_time="0.0" coupled="0" display_number="0" do_animation="false" info_avatar_file="" info_name="" info_tag="" latch="0" pose_mode="0" queue_size="1" return_default="false" show_info="false" size_mode="0" topic="/unity_projector/video_player/configuration"/>
                <Action ID="UnityProjectorCommandVideoPlayerConfiguration" animation_time="0.0" coupled="0" display_number="1" do_animation="false" info_avatar_file="" info_name="" info_tag="" latch="0" pose_mode="0" queue_size="1" return_default="false" show_info="false" size_mode="0" topic="/unity_projector/video_player_2/configuration"/>
            </Parallel>
            <WaitMilliseconds duration="500"/>
            <SubTree ID="UnityProjectorShowImage" __shared_blackboard="false" image_file="WelcomeImage"/>
            <SubTree ID="UnityProjectorShowImage_2" __shared_blackboard="false" image_file2="WelcomeImage"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Step One: Default Image Settled"/>
            <Parallel failure_threshold="1" success_threshold="1">
                <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="Step One Sync Point"/>
                <Loop>
                    <Sequence>
                        <SubTree ID="idleBehaviour" __shared_blackboard="false" screen_height="{screen_height}" screen_horizontal="{screen_horizontal}" screen_proximity="{screen_proximity}" table_height="{table_height}" table_horizontal=" {table_horizontal}" table_proximity="{table_proximity}"/>
                    </Sequence>
                </Loop>
            </Parallel>
            <SubTree ID="UnityProjectorHideImage"/>
            <SubTree ID="UnityProjectorHideImage_2"/>
            <SubTree ID="Add1ToStageID" __shared_blackboard="true"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Step One: Over"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StepOne_one_screen">
        <Sequence>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Step One: Starting"/>
            <Action ID="UnityProjectorCommandStaticImageConfiguration" animation_mode="0" animation_time="1.0" coupled="0" display_number="0" do_animation="true" latch="0" position_mode="0" queue_size="1" return_default="false" size_mode="0" topic="/unity_projector/static_image/configure"/>
            <WaitSeconds duration="1"/>
            <Action ID="UnityProjectorCommandVideoPlayerConfiguration" animation_time="0.0" coupled="0" display_number="0" do_animation="false" info_avatar_file="" info_name="" info_tag="" latch="0" pose_mode="0" queue_size="1" return_default="false" show_info="false" size_mode="0" topic="/unity_projector/video_player/configuration"/>
            <WaitMilliseconds duration="500"/>
            <SubTree ID="UnityProjectorShowImage" __shared_blackboard="false" image_file="WelcomeImage"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Step One: Default Image Settled"/>
            <Parallel failure_threshold="1" success_threshold="1">
                <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="Step One Sync Point"/>
                <Loop>
                    <Sequence>
                        <SubTree ID="idleBehaviour" __shared_blackboard="false" screen_height="{screen_height}" screen_horizontal="{screen_horizontal}" screen_proximity="{screen_proximity}" table_height="{table_height}" table_horizontal=" {table_horizontal}" table_proximity="{table_proximity}"/>
                    </Sequence>
                </Loop>
            </Parallel>
            <SubTree ID="UnityProjectorHideImage"/>
            <SubTree ID="Add1ToStageID" __shared_blackboard="true"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Step One: Over"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StepZero">
        <Sequence>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Step Zero Stage: Starting"/>
            <Action ID="UnityProjectorCommandWherebyConfiguration" animation_time="0" coupled="0" display_number="0" do_animation="0" latch="0" pose_mode="0" queue_size="1" return_default="false" size_mode="0" topic="/unity_projector/whereby/configure_teleconf"/>
            <WaitSeconds duration="1" name="Wait for Config Settlement"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Step Zero: Teleconfig Settled"/>
            <Action ID="UnityProjectorCommandWherebyShow" latch="0" queue_size="1" show_teleconference="true" topic="/unity_projector/whereby/show"/>
            <WaitSeconds duration="1"/>
            <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
            <SubTree ID="lookAtTV" __shared_blackboard="false" screen_height="{screen_height}" screen_horizontal="{screen_horizontal}" screen_proximity="{screen_proximity}"/>
            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Lets set the teleconference properly" result="tts_result"/>
            <Parallel failure_threshold="2" success_threshold="1">
                <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" stage="Step Zero fixing Teleconf"/>
                <Loop>
                    <Sequence>
                        <WaitSeconds duration="1"/>
                        <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="808"/>
                        <WaitSeconds duration="1.5"/>
                        <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="410"/>
                    </Sequence>
                </Loop>
            </Parallel>
            <SubTree ID="lookAtChildren" __shared_blackboard="false" table_height="{table_height}" table_horizontal="{table_horizontal}" table_proximity="{table_proximity}"/>
            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Great! Lets continue!" result="tts_result"/>
            <Action ID="UnityProjectorCommandWherebyShow" latch="0" queue_size="1" show_teleconference="false" topic="/unity_projector/whereby/show"/>
            <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
            <SubTree ID="Add1ToStageID" __shared_blackboard="true"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Step Zero: Over"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StrawberryASRToDialog">
        <Sequence>
            <Action ID="ConvertMessageField" field="/transcript" input="${asr_result_msg}" output="asr_result_transcript"/>
            <Action ID="ConvertMessageField" field="/confidence" input="${asr_result_msg}" output="asr_result_conf"/>
            <Action ID="ConvertMessageField" field="/header/frame_id" input="${asr_result_msg}" output="asr_result_fram_id"/>
            <Action ID="ConvertMessageField" field="/header/seq" input="${asr_result_msg}" output="asr_result_seq"/>
            <Action ID="StrawberryCommandSpeech" asr_result.confidence="${asr_result_conf}" asr_result.header.frame_id="${asr_result_fram_id}" asr_result.header.seq="${asr_result_seq}" asr_result.transcript="${asr_result_transcript}" latch="0" person_id="0" queue_size="1" speaker_confidence="0" topic="/strawberry/dialog_input" wake_up_word="0"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StrawberryAddDialogEntity">
        <Sequence>
            <Action ID="StrawberryControlEntity" action="ADD" auto_expansion_mode="{auto_expansion}" enable_fuzzy_extraction="{fuzzy_extraction}" entities="{entities}" entity_name="{entity_name}" kind="{kind}" serialized_output="srv_output" service="/strawberry/control_entity"/>
            <Action ID="ConvertMessageField" field="/success" input="{srv_output}" output="srv_success"/>
            <CheckBool input="{srv_success}"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StrawberryAppendDialogSessionEntity">
        <Sequence>
            <Action ID="StrawberryControlSessionEntity" action="ADD" entities="{entities}" entity_name="{entity_name}" entity_override_mode="SUPPLEMENT" person_id="{person_id}" serialized_output="srv_output" service="/strawberry/control_session_entity"/>
            <Action ID="ConvertMessageField" field="/success" input="{srv_output}" output="srv_success"/>
            <CheckBool input="{srv_success}"/>
            <Action ID="ConvertMessageField" field="/entity_types" input="{srv_output}" output="session_entities"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StrawberryDialogAskYesNoQuestion">
        <Sequence>
            <OnlyOnce>
                <Sequence name="Variable creation">
                    <SetBlackboard name="Create dialog_response var" output_key="dialog_response" value=""/>
                    <SetBlackboard name="Create dialog_result var" output_key="dialog_result" value=""/>
                    <SetBlackboard name="Create dialog_intent var" output_key="dialog_intent" value=""/>
                    <SetBlackboard output_key="success" value=""/>
                </Sequence>
            </OnlyOnce>
            <Sequence name="Ask the question">
                <Action ID="InitializeJson" output="question_input"/>
                <Action ID="AddKeyValueToJson" input_json="${question_input}" input_key="question" input_value="{question}" output="question_input"/>
                <Parallel failure_threshold="2" success_threshold="2">
                    <Sequence>
                        <OnlyOnce>
                            <WaitMilliseconds duration="400" name="Wait for the dialog subscriber creation"/>
                        </OnlyOnce>
                        <SubTree ID="StrawberrySetDialogEvent" event_name="command-generic-yes-no" parameters="${question_input}" person_id="0" result="dialog_result" success="success"/>
                    </Sequence>
                    <Inverter>
                        <WhileSuccess>
                            <Inverter>
                                <Sequence name="Get Dialog">
                                    <SubTree ID="StrawberryGetDialog" dialog_response="dialog_response_tmp" dialog_result="dialog_result_tmp"/>
                                    <SubTree ID="StrawberryGetDialogIntent" dialog_intent="dialog_intent" dialog_intent_confidence="dialog_intent_conf" dialog_result="{dialog_result_tmp}"/>
                                    <CompareStrings comparison_op="==" first="command-generic-yes-no" name="Check the intent is the event name" second="{dialog_intent}"/>
                                    <SetBlackboard output_key="dialog_response" value="${dialog_response_tmp}"/>
                                    <SetBlackboard output_key="dialog_result" value="${dialog_result_tmp}"/>
                                </Sequence>
                            </Inverter>
                        </WhileSuccess>
                    </Inverter>
                </Parallel>
                <Action ID="HaruCommandTTS" latch="0" message="{question}" queue_size="1" topic="/idmind_tabletop/cmd_tts"/>
            </Sequence>
            <Sequence name="Wait for and process a reply">
                <Inverter>
                    <WhileSuccess>
                        <Inverter>
                            <Sequence>
                                <SubTree ID="StrawberryGetDialog" dialog_response="dialog_response_tmp" dialog_result="dialog_result_tmp"/>
                                <SubTree ID="StrawberryGetDialogIntent" dialog_intent="dialog_intent" dialog_intent_confidence="dialog_intent_conf" dialog_result="{dialog_result_tmp}"/>
                                <CompareStrings comparison_op="!=" first="command-generic-yes-no-fallback" name="Check for local fallback" second="{dialog_intent}"/>
                            </Sequence>
                        </Inverter>
                    </WhileSuccess>
                </Inverter>
            </Sequence>
            <Sequence name="Succeed/fail based on detected intent">
                <CompareStrings comparison_op="==" first="command-generic-yes" name="Subtree should succeed if speaker said &quot;yes&quot; and fail for anything else" second="{dialog_intent}"/>
            </Sequence>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StrawberryDisableASR">
        <Action ID="StrawberryCommandEnableASR" data="0" header.frame_id="bt" header.seq="0" latch="0" queue_size="1" topic="/strawberry/enable_asr"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StrawberryDisableAllASR">
        <Action ID="StrawberryCommandEnableASR" data="0" header.frame_id="bt" header.seq="0" latch="0" queue_size="1" topic="/strawberry/enable_asr_all"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StrawberryDisableDialogGenericQuestions">
        <Action ID="CallEmptyService" service="/strawberry/disable_question_gen"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StrawberryEnableASR">
        <Action ID="StrawberryCommandEnableASR" data="1" header.frame_id="bt" header.seq="0" latch="0" queue_size="1" topic="/strawberry/enable_asr"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StrawberryEnableASRById">
        <Sequence>
            <BlackboardCheckString return_on_mismatch="SUCCESS" value_A="{person_id}" value_B="1">
                <Action ID="StrawberryCommandEnableASR" data="1" header.frame_id="bt" header.seq="0" latch="0" queue_size="1" topic="/strawberry/enable_asr_1"/>
            </BlackboardCheckString>
            <BlackboardCheckString return_on_mismatch="SUCCESS" value_A="{person_id}" value_B="2">
                <Action ID="StrawberryCommandEnableASR" data="1" header.frame_id="bt" header.seq="0" latch="0" queue_size="1" topic="/strawberry/enable_asr_2"/>
            </BlackboardCheckString>
            <BlackboardCheckString return_on_mismatch="SUCCESS" value_A="{person_id}" value_B="3">
                <Action ID="StrawberryCommandEnableASR" data="1" header.frame_id="bt" header.seq="0" latch="0" queue_size="1" topic="/strawberry/enable_asr_3"/>
            </BlackboardCheckString>
            <BlackboardCheckString return_on_mismatch="SUCCESS" value_A="{person_id}" value_B="4">
                <Action ID="StrawberryCommandEnableASR" data="1" header.frame_id="bt" header.seq="0" latch="0" queue_size="1" topic="/strawberry/enable_asr_4"/>
            </BlackboardCheckString>
            <BlackboardCheckString return_on_mismatch="SUCCESS" value_A="{person_id}" value_B="5">
                <Action ID="StrawberryCommandEnableASR" data="1" header.frame_id="bt" header.seq="0" latch="0" queue_size="1" topic="/strawberry/enable_asr_5"/>
            </BlackboardCheckString>
            <BlackboardCheckString return_on_mismatch="SUCCESS" value_A="{person_id}" value_B="6">
                <Action ID="StrawberryCommandEnableASR" data="1" header.frame_id="bt" header.seq="0" latch="0" queue_size="1" topic="/strawberry/enable_asr_6"/>
            </BlackboardCheckString>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StrawberryEnableAllASR">
        <Action ID="StrawberryCommandEnableASR" data="1" header.frame_id="bt" header.seq="0" latch="0" queue_size="1" topic="/strawberry/enable_asr_all"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StrawberryGetASR">
        <Sequence>
            <Action ID="StrawberryMonitorASR" consume_msgs="1" queue_size="1" serialized_output="asr_result_msg_inter" topic="/strawberry/asr_result"/>
            <Action ID="ConvertMessageField" field="/transcript" input="${asr_result_msg_inter}" output="asr_result"/>
            <Action ID="ConvertMessageField" field="/confidence" input="${asr_result_msg_inter}" output="asr_result_conf"/>
            <SetBlackboard output_key="asr_result_msg" value="${asr_result_msg_inter}"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StrawberryGetDialog">
        <Sequence>
            <SetBlackboard output_key="dialog_result" value=""/>
            <Action ID="StrawberryMonitorDialogue" consume_msgs="1" queue_size="1" serialized_output="dialog_result_msg" topic="/strawberry/dialog_result"/>
            <Action ID="ConvertMessageField" field="/fulfillment_text" input="${dialog_result_msg}" output="dialog_response"/>
            <SetBlackboard output_key="dialog_result" value="${dialog_result_msg}"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StrawberryGetDialogIntent">
        <Sequence>
            <SetBlackboard output_key="dialog_intent" value=""/>
            <SetBlackboard output_key="dialog_intent_confidence" value=""/>
            <Action ID="ConvertMessageField" field="/slu_result/intent" input="${dialog_result}" output="dialog_intent"/>
            <Action ID="ConvertMessageField" field="/slu_result/intent_conf" input="${dialog_result}" output="dialog_intent_confidence"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StrawberryGetDialogSessionEntity">
        <Sequence>
            <Action ID="InitializeJson" output="empty_json"/>
            <Action ID="StrawberryControlSessionEntity" action="GET" entities="{empty_json}" entity_name="all" entity_override_mode="SUPPLEMENT" person_id="{person_id}" serialized_output="srv_output" service="/strawberry/control_session_entity"/>
            <Action ID="ConvertMessageField" field="/success" input="{srv_output}" output="srv_success"/>
            <CheckBool input="{srv_success}"/>
            <Action ID="ConvertMessageField" field="/entity_types" input="{srv_output}" output="session_entities"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StrawberryGetDialogUtterance">
        <Action ID="ConvertMessageField" field="/utterance" input="${dialog_result}" output="dialog_utterance"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StrawberryGetGonePeople">
        <Sequence>
            <SetBlackboard output_key="gone_people" value=""/>
            <Action ID="StrawberryMonitorPeople" consume_msgs="1" queue_size="1" serialized_output="gone_people_vector" topic="/strawberry/gone_people"/>
            <Action ID="ConvertMessageField" field="/people/0" input="${gone_people_vector}" output="check_empty"/>
            <Action ID="ConvertMessageField" field="/people" input="${gone_people_vector}" output="gone_people"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StrawberryGetHands">
        <Sequence>
            <SetBlackboard output_key="hands" value=""/>
            <SetBlackboard output_key="hands_msg" value=""/>
            <Action ID="StrawberryMonitorHands" consume_msgs="1" queue_size="1" serialized_output="hands_msg_int" topic="/leapmotion/hands"/>
            <Action ID="ConvertMessageField" field="/hands/0" input="${hands_msg_int}" output="help_var"/>
            <Action ID="ConvertMessageField" field="/hands" input="${hands_msg_int}" output="hands"/>
            <SetBlackboard output_key="hands_msg" value="${hands_msg_int}"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StrawberryGetHandsFeatures">
        <Action ID="StrawberryMonitorHandFeatures" consume_msgs="1" queue_size="1" serialized_output="hand_features" topic="/leapmotion/hand_features"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StrawberryGetHandsGesture">
        <Sequence>
            <SetBlackboard output_key="hands_gestures_list" value=""/>
            <SetBlackboard output_key="hands_gesture" value=""/>
            <Action ID="ConvertMessageField" field="/gestures/0/name" input="${hands}" output="hands_gesture"/>
            <Action ID="ConvertMessageField" field="/gestures" input="${hands}" output="hands_gestures_list"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StrawberryGetNewPeople">
        <Sequence>
            <SetBlackboard output_key="new_people" value=""/>
            <Action ID="StrawberryMonitorPeople" consume_msgs="1" queue_size="1" serialized_output="new_people_vector" topic="/strawberry/new_people"/>
            <Action ID="ConvertMessageField" field="/people/0" input="${new_people_vector}" output="check_empty"/>
            <Action ID="ConvertMessageField" field="/people" input="${new_people_vector}" output="new_people"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StrawberryGetPeople">
        <Sequence>
            <SetBlackboard output_key="people" value=""/>
            <SetBlackboard output_key="header" value=""/>
            <Action ID="StrawberryMonitorPeople" consume_msgs="1" queue_size="1" serialized_output="people_vector" topic="/strawberry/people"/>
            <Action ID="ConvertMessageField" field="/people/0" input="${people_vector}" output="check_empty"/>
            <Action ID="ConvertMessageField" field="/people" input="${people_vector}" output="people"/>
            <Action ID="ConvertMessageField" field="/header" input="${people_vector}" output="header"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StrawberryGetPersonFaceEmotion">
        <Sequence>
            <SetBlackboard output_key="emotions" value=""/>
            <SetBlackboard output_key="emotion_name" value=""/>
            <SetBlackboard output_key="emotion_confidence" value=""/>
            <Action ID="ConvertMessageField" field="/face/emotions/0" input="${person}" output="check_empty"/>
            <Action ID="ConvertMessageField" field="/face/emotions" input="${person}" output="emotions"/>
            <SetBlackboard output_key="max_conf" value="0"/>
            <Decorator ID="ForEachLoop" break_on_child_failure="false" input="${emotions}" output_element="emotion_elem" output_index="">
                <Sequence>
                    <Action ID="ConvertMessageField" field="/confidence" input="${emotion_elem}" output="emotion_conf"/>
                    <CompareNumbers comparison_op="&lt;" first="${emotion_conf}" second="${max_conf}"/>
                    <SetBlackboard output_key="max_conf" value="${emotion_conf}"/>
                    <Action ID="ConvertMessageField" field="/value" input="${emotion_elem}" output="emotion_name"/>
                    <SetBlackboard output_key="emotion_confidence" value="${emotion_conf}"/>
                </Sequence>
            </Decorator>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StrawberryGetPersonFaceGender">
        <Sequence>
            <Action ID="ConvertMessageField" field="/face/gender" input="${person}" name="Get gender Field" output="gender"/>
            <Fallback name="Parse gender if known">
                <Sequence>
                    <CompareNumbers comparison_op="!=" first="${gender}" name="Check Gender is Known" second="0"/>
                    <Fallback name="Check is Male or Female">
                        <Sequence name="Male">
                            <CompareNumbers comparison_op="==" first="${gender}" name="Check Gender is Male" second="1"/>
                            <SetBlackboard name="Set Is Male" output_key="is_male" value="1"/>
                        </Sequence>
                        <Sequence name="Female">
                            <CompareNumbers comparison_op="==" first="${gender}" name="Check Gender is Female" second="2"/>
                            <SetBlackboard name="Set Is Female" output_key="is_male" value="0"/>
                        </Sequence>
                    </Fallback>
                </Sequence>
                <ForceFailure>
                    <Action ID="InfoLog" message="Gender UNKOWN"/>
                </ForceFailure>
            </Fallback>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StrawberryGetPersonFaceHasMask">
        <Sequence>
            <Action ID="ConvertMessageField" field="/face/mask" input="${person}" output="mask"/>
            <Fallback name="Parse mask if known">
                <Sequence>
                    <CompareNumbers comparison_op="!=" first="${mask}" name="Check mask is known" second="0"/>
                    <Fallback name="Check if wearing mask or not">
                        <Sequence name="Mask Yes">
                            <CompareNumbers comparison_op="==" first="${mask}" name="Check Mask is Yes" second="1"/>
                            <SetBlackboard name="Set person has mask" output_key="has_mask" value="1"/>
                        </Sequence>
                        <Sequence name="Mask No">
                            <CompareNumbers comparison_op="==" first="${mask}" name="Check Mask is No" second="2"/>
                            <SetBlackboard name="Set person has no mask" output_key="has_mask" value="0"/>
                        </Sequence>
                    </Fallback>
                </Sequence>
                <ForceFailure>
                    <Action ID="InfoLog" message="Mask UNKNOWN"/>
                </ForceFailure>
            </Fallback>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StrawberryGetPersonGesture">
        <Sequence>
            <SetBlackboard output_key="gestures" value=""/>
            <SetBlackboard output_key="gesture_name" value=""/>
            <SetBlackboard output_key="gesture_confidence" value=""/>
            <Action ID="ConvertMessageField" field="/skeleton/gestures/0" input="${person}" output="check_empty"/>
            <Action ID="ConvertMessageField" field="/skeleton/gestures" input="${person}" output="gestures"/>
            <SetBlackboard output_key="max_conf" value="0"/>
            <Decorator ID="ForEachLoop" break_on_child_failure="false" input="{gestures}" output_element="gesture_elem" output_index="">
                <Sequence>
                    <Action ID="ConvertMessageField" field="/confidence" input="${gesture_elem}" output="gesture_conf"/>
                    <CompareNumbers comparison_op="&lt;" first="${max_conf}" second="${gesture_conf}}"/>
                    <SetBlackboard output_key="max_conf" value="${gesture_conf}"/>
                    <Action ID="ConvertMessageField" field="/name" input="${gesture_elem}" output="gesture_name"/>
                    <SetBlackboard output_key="gesture_confidence" value="${gesture_conf}"/>
                </Sequence>
            </Decorator>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StrawberryInfoLog">
        <Sequence>
            <ConcatenateStrings first="{string_1}" output="text" second="{string_2}"/>
            <Action ID="InfoLog" message="{text}"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StrawberryOverrideDialogSessionEntity">
        <Sequence>
            <Action ID="StrawberryControlSessionEntity" action="ADD" entities="{entities}" entity_name="{entity_name}" entity_override_mode="OVERRIDE" person_id="{person_id}" serialized_output="srv_output" service="/strawberry/control_session_entity"/>
            <Action ID="ConvertMessageField" field="/success" input="{srv_output}" output="srv_success"/>
            <CheckBool input="{srv_success}"/>
            <Action ID="ConvertMessageField" field="/entity_types" input="{srv_output}" output="session_entities"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StrawberryRecordAudioAndWait">
        <Sequence>
            <SubTree ID="StrawberryStartAudioRecording" file_name="file_name_tmp" file_path="${file_path}" success="success"/>
            <WaitSeconds duration="${duration}"/>
            <SubTree ID="StrawberryStopAudioRecording" file_name="${file_name_tmp}" success="success"/>
            <SetBlackboard output_key="file_name" value="${file_name_tmp}"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StrawberryRemoveDialogEntity">
        <Sequence>
            <Action ID="InitializeJson" output="empty_json"/>
            <Action ID="StrawberryControlEntity" action="REMOVE" auto_expansion_mode="{auto_expansion}" enable_fuzzy_extraction="{fuzzy_extraction}" entities="{empty_json}" entity_name="{entity_name}" kind="{kind}" serialized_output="srv_output" service="/strawberry/control_entity"/>
            <Action ID="ConvertMessageField" field="/success" input="{srv_output}" output="srv_success"/>
            <CheckBool input="{srv_success}"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StrawberryRemoveDialogSessionEntity">
        <Sequence>
            <Action ID="InitializeJson" output="empty_json"/>
            <Action ID="StrawberryControlSessionEntity" action="REMOVE" entities="{empty_json}" entity_name="{entity_name}" entity_override_mode="SUPPLEMENT" person_id="{person_id}" serialized_output="srv_output" service="/strawberry/control_session_entity"/>
            <Action ID="ConvertMessageField" field="/success" input="{srv_output}" output="srv_success"/>
            <CheckBool input="{srv_success}"/>
            <Action ID="ConvertMessageField" field="/entity_types" input="{srv_output}" output="session_entities"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StrawberryResetDialogConversation">
        <Sequence>
            <Action ID="StrawberryResetConversation" person_id="${person_id}" serialized_output="output" service="/strawberry/reset_dialog"/>
            <Action ID="ConvertMessageField" field="/success" input="${output}" output="success"/>
            <Action ID="ConvertMessageField" field="/message" input="${output}" output="result_msg"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StrawberryResetPersonConversation">
        <Sequence>
            <Action ID="ConvertMessageField" field="/id" input="${person}" output="person_id"/>
            <Action ID="StrawberryResetConversation" person_id="${person_id}" serialized_output="dummy" service="/strawberry/reset_dialog"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StrawberrySetDialogEvent">
        <Sequence>
            <Action ID="StrawberryTriggerDialogueEvent" event_name="${event_name}" parameters="${parameters}" person_id="${person_id}" serialized_output="output" service="/strawberry/trigger_event"/>
            <Action ID="ConvertMessageField" field="/success" input="${output}" output="success"/>
            <Action ID="ConvertMessageField" field="/result" input="${output}" output="result"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StrawberrySetDialogTheme">
        <Sequence>
            <Action ID="StrawberrySetDialogueAgent" selected_agent="${agent}" serialized_output="output" service="/strawberry/set_agent"/>
            <Action ID="ConvertMessageField" field="/success" input="${output}" output="success"/>
            <CheckBool input="${success}"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StrawberryStartAudioRecording">
        <Sequence>
            <Action ID="StrawberrySetStartAudioRecording" file_path="${file_path}" file_prefix="bt" serialized_output="output" service="/strawberry_ros_audio_recorder/start_recording"/>
            <Action ID="ConvertMessageField" field="/file_name" input="${output}" output="file_name"/>
            <Action ID="ConvertMessageField" field="/success" input="${output}" output="success"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StrawberryStopAudioRecording">
        <Sequence>
            <Action ID="StrawberrySetStopAudioRecording" file_name="${file_name}" serialized_output="output" service="/strawberry_ros_audio_recorder/stop_recording"/>
            <Action ID="ConvertMessageField" field="/success" input="${output}" output="success"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StrawberryTrainNewFace">
        <Sequence>
            <Action ID="StrawberrySetStartLearningFace" blocking="${blocking}" iterations="${iterations}" serialized_output="output" service="/strawberry/start_learning" target_name="${target_name}"/>
            <Action ID="ConvertMessageField" field="/success" input="${output}" output="success"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StrawberryTrainNewFaceByTopic">
        <Sequence>
            <Action ID="StrawberrySetStartLearningFaceByTopic" img_topic_name="${image_topic_name}" iterations="${iterations}" serialized_output="output" service="/strawberry/trigger_learning_by_topic" target_name="${target_name}"/>
            <Action ID="ConvertMessageField" field="/success" input="${output}" output="success"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="TalkingRoomPublishLogTopic">
        <Action ID="PublishStdString" data="{data}" latch="0" name="Publish Log Topic" queue_size="1" topic="/talking_room/tree_log"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="TeleconferenceOFF">
        <Sequence name="Turn OFF teleconference">
            <SubTree ID="UnityProjectorWherebyCameraOFF"/>
            <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
            <SubTree ID="UnityProjectorWherebyHide"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="TeleconferenceON">
        <Sequence name="Turn ON teleconference">
            <SubTree ID="UnityProjectyWherebyShow"/>
            <SubTree ID="UnityProjectorWherebyCameraON"/>
            <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="TeleconferenceTest">
        <ForceSuccess>
            <Sequence>
                <CheckBool input="${startup_teleconference_enabled}"/>
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Waiting for synchronization before test the teleconference"/>
                <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Let's test the teleconference before we continue. We have to wait for the remote class to reach this point and press the sync button on the Teacher's ipad" result="tts_result"/>
                <SubTree ID="UnityProjectorShowImage" __shared_blackboard="false" image_file="WaitSync"/>
                <SubTree ID="EMSyncPoint" __shared_blackboard="false" bt_id="${bt_id}" stage="Teleconference Test"/>
                <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Activiting Teleconf to test it and setting a skip button in the teacher ipad"/>
                <SubTree ID="TeleconferenceON" __shared_blackboard="false"/>
                <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="Testing Teleconference. Press Skip to continue the demo" stage_id="0"/>
            </Sequence>
        </ForceSuccess>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="UnityProjectorGetVideoFinished">
        <Sequence>
            <SetBlackboard output_key="video_finished" value="false"/>
            <Action ID="MonitorStdBool" consume_msgs="1" name="Unity video feedback" queue_size="1" serialized_output="output" topic="/unity_projector/video_player/end_feedback"/>
            <Action ID="ConvertMessageField" field="/data" input="{output}" output="video_finished"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="UnityProjectorGetVideoFinished_2">
        <Sequence>
            <SetBlackboard output_key="video2_finished" value="false"/>
            <Action ID="MonitorStdBool" consume_msgs="1" queue_size="1" serialized_output="output2" topic="/unity_projector/video_player_2/end_feedback"/>
            <Action ID="ConvertMessageField" field="/data" input="{output2}" output="video2_finished"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="UnityProjectorHideChat">
        <Action ID="UnityProjectorCommandShowChat" latch="0" message_delay="0" queue_size="1" show_chat="0" show_mode="2" topic="/unity_projector/chat/show"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="UnityProjectorHideDraw">
        <Action ID="UnityProjectorCommandShowDraw" draw_delay="0" ipad_id_local="0" ipad_id_remote="0" latch="0" queue_size="1" show_draw_canvas="0" show_mode="2" topic="/unity_projector/drawing/cmd"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="UnityProjectorHideImage">
        <Sequence>
            <Action ID="UnityProjectorCommandSetStaticImage" activate_static_image="false" image_file="" latch="0" queue_size="1" topic="/unity_projector/static_image/cmd"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="UnityProjectorHideImage_2">
        <Sequence>
            <Action ID="UnityProjectorCommandSetStaticImage" activate_static_image="false" image_file="" latch="0" queue_size="1" topic="/unity_projector/static_image_2/cmd"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="UnityProjectorHideProfiles">
        <Action ID="PublishStdBool" data="false" latch="0" name="Unity hide user profiles" queue_size="1" topic="/unity_projector/user_profiles/cmd"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="UnityProjectorSetChatMessage">
        <Action ID="UnityProjectorCommandSetChatMessage" ipad_ids="{ipad_ids}" latch="0" messages="{messages}" queue_size="1" topic="/unity_projector/chat/set/local"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="UnityProjectorSetChatMessageRemote">
        <Action ID="UnityProjectorCommandSetChatMessage" ipad_ids="{ipad_ids}" latch="0" messages="{messages}" queue_size="1" topic="/unity_projector/chat/set/remote"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="UnityProjectorSetDraw">
        <Action ID="UnityProjectorCommandSetDraw" draw_tags="{image_tags}" draws="{draws}" draws_are_paths="{draws_are_paths}" ipad_ids="{ipad_ids}" latch="0" queue_size="1" topic="/unity_projector/drawing/set/local"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="UnityProjectorSetDrawRemote">
        <Action ID="UnityProjectorCommandSetDraw" draw_tags="" draws="{draws}" draws_are_paths="{draws_are_paths}" ipad_ids="{ipad_ids}" latch="0" queue_size="1" topic="/unity_projector/drawing/set/remote"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="UnityProjectorSetProfiles">
        <Action ID="UnityProjectorCommandSetProfiles" avatars="{avatars}" avatars_are_paths="{avatars_are_paths}" ipad_ids="{ipad_ids}" latch="0" queue_size="1" topic="/unity_projector/user_profiles/set/local" user_names="{user_names}"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="UnityProjectorSetProfilesRemote">
        <Action ID="UnityProjectorCommandSetProfiles" avatars="{avatars}" avatars_are_paths="{avatars_are_paths}" ipad_ids="{ipad_ids}" latch="0" queue_size="1" topic="/unity_projector/user_profiles/set/remote" user_names="{user_names}"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="UnityProjectorShowChat">
        <Action ID="UnityProjectorCommandShowChat" latch="0" message_delay="{time_between_msgs}" queue_size="1" show_chat="1" show_mode="{show_mode}" topic="/unity_projector/chat/show"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="UnityProjectorShowDraw">
        <Action ID="UnityProjectorCommandShowDraw" draw_delay="{draw_delay}" ipad_id_local="{ipad_id_local}" ipad_id_remote="{ipad_id_remote}" latch="0" queue_size="1" show_draw_canvas="1" show_mode="{show_mode}" topic="/unity_projector/drawing/cmd"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="UnityProjectorShowImage">
        <Sequence>
            <Action ID="UnityProjectorCommandSetStaticImage" activate_static_image="true" image_file="{image_file}" latch="0" queue_size="1" topic="/unity_projector/static_image/cmd"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="UnityProjectorShowImage_2">
        <Sequence>
            <Action ID="UnityProjectorCommandSetStaticImage" activate_static_image="true" image_file="{image_file2}" latch="0" queue_size="1" topic="/unity_projector/static_image_2/cmd"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="UnityProjectorShowOffProfiles">
        <Action ID="PublishStdBool" data="false" latch="0" queue_size="1" topic="/unity_projector/user_profiles/cmd"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="UnityProjectorShowProfiles">
        <Action ID="PublishStdBool" data="true" latch="0" name="Unity show user profiles" queue_size="1" topic="/unity_projector/user_profiles/cmd"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="UnityProjectorShowVideo">
        <Sequence>
            <Action ID="UnityProjectorCommandSetVideoPlayer" activate_video_player="true" latch="0" queue_size="1" topic="/unity_projector/video_player/cmd" video_file="{video_file}"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="UnityProjectorShowVideoAndWait">
        <Sequence>
            <SubTree ID="UnityProjectorShowVideo" __shared_blackboard="false" video_file="{video_file}"/>
            <RetryUntilSuccessful num_attempts="-1">
                <Sequence>
                    <WaitMilliseconds duration="400"/>
                    <SubTree ID="UnityProjectorGetVideoFinished" __shared_blackboard="false" video_finished="unity_video_finished"/>
                    <CheckBool input="{unity_video_finished}"/>
                </Sequence>
            </RetryUntilSuccessful>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="UnityProjectorShowVideoAndWait_2">
        <Sequence>
            <SubTree ID="UnityProjectorShowVideo_2" __shared_blackboard="false" video_file="{video_file2}"/>
            <RetryUntilSuccessful num_attempts="-1">
                <Sequence>
                    <WaitMilliseconds duration="400"/>
                    <SubTree ID="UnityProjectorGetVideoFinished_2" __shared_blackboard="false" video2_finished="unity_video2_finished"/>
                    <CheckBool input="{unity_video2_finished}"/>
                </Sequence>
            </RetryUntilSuccessful>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="UnityProjectorShowVideo_2">
        <Sequence>
            <Action ID="UnityProjectorCommandSetVideoPlayer" activate_video_player="true" latch="0" queue_size="1" topic="/unity_projector/video_player_2/cmd" video_file="{video_file}"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="UnityProjectorStopVideo">
        <Sequence>
            <Action ID="UnityProjectorCommandSetVideoPlayer" activate_video_player="false" latch="0" queue_size="1" topic="/unity_projector/video_player/cmd" video_file=""/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="UnityProjectorStopVideo_2">
        <Sequence>
            <Action ID="UnityProjectorCommandSetVideoPlayer" activate_video_player="false" latch="0" queue_size="1" topic="/unity_projector/video_player_2/cmd" video_file=""/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="UnityProjectorTeleconferenceMiniCamOFF">
        <Action ID="UnityProjectorCommandSetMiniCam" activate_mini_cam="false" latch="0" queue_size="1" show_own_cam="false" topic="/unity_projector/teleconference/miniCam/cmd"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="UnityProjectorTeleconferenceMiniCamON">
        <Action ID="UnityProjectorCommandSetMiniCam" activate_mini_cam="true" latch="0" queue_size="1" show_own_cam="{own_cam}" topic="/unity_projector/teleconference/miniCam/cmd"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="UnityProjectorTeleconferenceOFF">
        <Action ID="UnityProjectorCommandWherebyShow" latch="0" queue_size="1" show_teleconference="false" topic="/unity_projector/whereby/show"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="UnityProjectorTeleconferenceON">
        <Action ID="UnityProjectorCommandWherebyShow" latch="0" queue_size="1" show_teleconference="true" topic="/unity_projector/whereby/show"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="UnityProjectorWherebyCameraOFF">
        <Action ID="PublishStdBool" data="true" latch="0" queue_size="1" topic="/unity_projector/whereby/mute_local_cam"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="UnityProjectorWherebyCameraON">
        <Action ID="PublishStdBool" data="false" latch="0" queue_size="1" topic="/unity_projector/whereby/mute_local_cam"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="UnityProjectorWherebyCreateMeeting">
        <Action ID="PublishStdInt32" data="{meeting_duration}" latch="0" queue_size="1" topic="/unity_projector/whereby/create_meeting"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="UnityProjectorWherebyDeleteMeeting">
        <Action ID="PublishStdEmpty" latch="0" queue_size="1" topic="/unity_projector/whereby/delete_meeting"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="UnityProjectorWherebyHide">
        <Action ID="UnityProjectorCommandWherebyShow" latch="0" queue_size="1" show_teleconference="false" topic="/unity_projector/whereby/show"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="UnityProjectorWherebyMicrophoneOFF">
        <Action ID="PublishStdBool" data="true" latch="0" queue_size="1" topic="/unity_projector/whereby/mute_local_mic"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="UnityProjectorWherebyMicrophoneON">
        <Action ID="PublishStdBool" data="false" latch="0" queue_size="1" topic="/unity_projector/whereby/mute_local_mic"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="UnityProjectorWherebySet">
        <Sequence>
            <Action ID="PublishStdString" data="{meeting_url}" latch="0" queue_size="1" topic="/unity_projector/whereby/set"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="UnityProjectyWherebyShow">
        <Action ID="UnityProjectorCommandWherebyShow" latch="0" queue_size="1" show_teleconference="true" topic="/unity_projector/whereby/show"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="UserRegistrationStage">
        <Sequence name="User Registration Stage">
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="User Registration Stage: Begins"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Beginning of User Registration Stage. AUS robot speaks" num_sub_stages="12" stage="{stage}" stage_id="{stage_id}" sub_stage="Begin" sub_stage_id="1" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="StrawberryDisableAllASR"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="User Registration Stage: Before On your iPads AUS Comment"/>
            <BlackboardCheckString name="Australia" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="On your iPad, you will find avatar creation settings to make your own fun little avatar! This avatar will represent you in the chat and the Gallery." result="tts_result"/>
            </BlackboardCheckString>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="User Registration Stage: Wait first sync point after AUS TTS"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for AUS robot to finish" num_sub_stages="12" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait AUS Robot" sub_stage_id="2" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="HaruGoHome"/>
            <Parallel failure_threshold="2" success_threshold="1">
                <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="AUS Avatar First TTS" sync_feed="sync_feed" sync_result="sync_result"/>
                <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="User Registration Stage: Waiting sync point for AUS TTS" stage_id="{stage_id}"/>
            </Parallel>
            <SubTree ID="HaruGoHome"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="User Registration Stage: First sync point passed"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="JAP robot speaks" num_sub_stages="12" stage="{stage}" stage_id="{stage_id}" sub_stage="JAP Robot" sub_stage_id="3" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="User Registration: Before Comment JAP Options iPad"/>
            <BlackboardCheckString name="Japan" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                <Sequence>
                    <WaitSeconds duration="{tts_wait}" name="Wait before TTS"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="You can choose which head, what colour shirt and background you think represents you best." result="tts_result"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="User Registration Stage: Wait second sync point for JAP TTS"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for JAP robot to finish" num_sub_stages="12" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait JAP Robot" sub_stage_id="4" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="HaruGoHome"/>
            <Parallel failure_threshold="2" success_threshold="1">
                <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="JAP Avatar First TTS" sync_feed="sync_feed" sync_result="sync_result"/>
                <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="User Registration Stage: Waiting sync point for JAP TTS" stage_id="{stage_id}"/>
            </Parallel>
            <SubTree ID="HaruGoHome"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="User Registration Stage: Second sync point passed"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="AUS robot speaks" num_sub_stages="12" stage="{stage}" stage_id="{stage_id}" sub_stage="AUS Robot" sub_stage_id="5" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="User Registration Stage: Before AUS Comment Panda or Flower"/>
            <BlackboardCheckString name="Australia" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_1}">
                <Sequence>
                    <WaitSeconds duration="{tts_wait}" name="Wait before TTS"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="I think I am either the panda or the flower. Which one do you think suits me best?" result="tts_result"/>
                </Sequence>
            </BlackboardCheckString>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="User Registration Stage: Wait third sync point for AUS TTS"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for AUS robot to finish" num_sub_stages="12" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait AUS Robot" sub_stage_id="6" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="HaruGoHome"/>
            <Parallel failure_threshold="2" success_threshold="1">
                <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="AUS Avatar Second TTS" sync_feed="sync_feed" sync_result="sync_result"/>
                <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="User Registration Stage: Waiting sync point for AUS TTS" stage_id="{stage_id}"/>
            </Parallel>
            <SubTree ID="HaruGoHome"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="User Registration Stage: Third sync point passed"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="User Registration Stage: iPad user registration and conversation, up to 3min"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for students to complete iPad avatar selection" num_sub_stages="12" stage="{stage}" stage_id="{stage_id}" sub_stage="iPad Avatar" sub_stage_id="7" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SetBlackboard name="Initialize iPad result variable" output_key="ipad_register_result" value=""/>
            <SubTree ID="StrawberryEnableAllASR"/>
            <ForceSuccess>
                <Timeout msec="180000" name="3min for discussion">
                    <Parallel failure_threshold="1" name="iPad User Registration and Wait" success_threshold="1">
                        <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="User Registration Stage: Waiting for iPad User Registration to finish" stage_id="{stage_id}"/>
                        <SubTree ID="EMIPadUserRegistrationAndWait" __shared_blackboard="false" feedback="ipad_register_feedback" ipad_ids="-1" result="ipad_register_result" timeout="180"/>
                        <Loop>
                            <SubTree ID="WaitWhileSpeech" __shared_blackboard="false" mics_id="-1" physical_ack="true" physical_ack_routine="407;408" start_speaking_timeout="300000" stop_speaking_internal_timeout="4000" stop_speaking_timeout="300000" verbal_ack="false"/>
                        </Loop>
                    </Parallel>
                </Timeout>
            </ForceSuccess>
            <SubTree ID="StrawberryDisableAllASR"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="User Registration Stage: Wait fourth sync point for iPad registration"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Avatar selection completed. Waiting for the other class to finish" num_sub_stages="12" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait Other iPad Avatar" sub_stage_id="8" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <Parallel failure_threshold="2" success_threshold="1">
                <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="iPad User Registration Finished" sync_feed="sync_feed" sync_result="sync_result"/>
                <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="User Registration Stage: Waiting sync point after iPad User Registration" stage_id="{stage_id}"/>
            </Parallel>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="User Registration Stage: Fourth sync point passed"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Show students' avatars on the projector" num_sub_stages="12" stage="{stage}" stage_id="{stage_id}" sub_stage="Avatar Projector" sub_stage_id="9" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <ForceSuccess>
                <Sequence name="Profiles to Unity">
                    <CompareStrings comparison_op="!=" first="" name="Check we have results from iPads" second="{ipad_register_result}"/>
                    <Action ID="ConvertMessageField" field="/avatars_path" input="{ipad_register_result}" name="Get avatar" output="ipad_avatars"/>
                    <Action ID="ConvertMessageField" field="/ipad_ids" input="{ipad_register_result}" name="Get avatar" output="ipad_ids"/>
                    <Action ID="ConvertMessageField" field="/user_names" input="{ipad_register_result}" output="ipad_user_names"/>
                    <IfThenElse>
                        <CompareStrings comparison_op="==" first="{this_country}" name="Check country" second="{country_1}"/>
                        <SetBlackboard name="Set children real names" output_key="kids_1" value="{ipad_user_names}"/>
                        <SetBlackboard name="Set children real names" output_key="kids_2" value="{ipad_user_names}"/>
                    </IfThenElse>
                    <SubTree ID="UnityProjectorSetProfiles" __shared_blackboard="false" avatars="{ipad_avatars}" avatars_are_paths="true" ipad_ids="{ipad_ids}" user_names="{ipad_user_names}"/>
                    <WaitMilliseconds duration="1000"/>
                    <SubTree ID="UnityProjectorHideImage"/>
                    <SubTree ID="UnityProjectorShowProfiles"/>
                </Sequence>
            </ForceSuccess>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="JAP robot speaks" num_sub_stages="12" stage="{stage}" stage_id="{stage_id}" sub_stage="JAP Robot" sub_stage_id="10" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="User Registration Stage: JAP Comment to break the ice Starting"/>
            <BlackboardCheckString name="Japan" return_on_mismatch="SUCCESS" value_A="{this_country}" value_B="{country_2}">
                <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="This Comment has to be changed!" result="tts_result"/>
            </BlackboardCheckString>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="User Registration Stage: Wait fifth sync point for JAP TTS"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for JAP robot to finish" num_sub_stages="12" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait JAP Robot" sub_stage_id="11" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <Parallel failure_threshold="2" success_threshold="1">
                <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="User Registration Stage Finished" sync_feed="sync_feed" sync_result="sync_result"/>
                <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="User Registration Stage: Waiting sync point to finish stage" stage_id="{stage_id}"/>
            </Parallel>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="User Registration Stage: Fifth sync point passed"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="End of User Registration Stage. " num_sub_stages="12" stage="{stage}" stage_id="{stage_id}" sub_stage="End" sub_stage_id="12" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <MathOperationInt first="{stage_id}" operator="+" output="stage_id" second="1"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="User Registration Stage: Over"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="VariableDeclaration">
        <Sequence name="Set variables">
            <SetBlackboard name="Name of one country" output_key="country_1" value="australia"/>
            <SetBlackboard name="Name of the other country" output_key="country_2" value="japan"/>
            <GetLinuxEnvVar env_var_name="HOSTNAME" name="Get HOSTNAME for bt_id" output="bt_id"/>
            <GetLinuxEnvVar env_var_name="BT_THIS_COUNTRY" name="Get BT_THIS_COUNTRY for this_country" output="this_country"/>
            <IfThenElse>
                <CompareStrings comparison_op="==" first="{this_country}" second="{country_1}"/>
                <SetBlackboard name="Australia ID = 1" output_key="this_country_id" value="1"/>
                <SetBlackboard name="Japan ID = 2" output_key="this_country_id" value="2"/>
            </IfThenElse>
            <SetBlackboard name="Name of AUS students" output_key="kids_1" value="Janik;Ben;Johanna"/>
            <SetBlackboard name="Name of JAP students" output_key="kids_2" value="Tomoko;Mamiko;Kaito"/>
            <Action ID="InitializeJson" name="Empty Json for dialog parameters" output="empty_json"/>
            <SetBlackboard name="First stage to execute" output_key="stage" value="StepZero"/>
            <SetBlackboard name="First stage ID" output_key="stage_id" value="1"/>
            <GetLinuxEnvVar env_var_name="BT_TTS_WAIT" name="Active wait before/after TTS to compensate teleco delay" output="tts_wait"/>
            <GetLinuxEnvVar env_var_name="BT_TELECONF_TEST" name="Get BT_TELECONF_TEST to check if test or not teleconf at the beginning" output="startup_teleconference_enabled"/>
            <SetBlackboard name="Microphone IDs to be used by Dialog Events" output_key="mic_ids" value="1;2;3;4"/>
            <SubTree ID="readTVAndChildrenPositions" __shared_blackboard="false" screen_height="screen_height" screen_horizontal="screen_horizontal" screen_proximity="screen_proximity" table_height="table_height" table_horizontal="table_horizontal" table_proximity="table_proximity"/>
            <Action ID="PublishStdString" data="default_720p" latch="0" name="Set projector default image " queue_size="1" topic="/unity_projector/default_image/set"/>
            <SetBlackboard name="Set animation times" output_key="transition_time" value="1.0"/>
            <SetBlackboard name="Set Waiting times after an animation" output_key="stop_video_time" value="2.0"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="WaitForHaruStartPlayingAudio">
        <Inverter>
            <Timeout msec="${timeout_ms}">
                <WhileSuccess>
                    <Inverter>
                        <SubTree ID="IsHaruAudioPlaying"/>
                    </Inverter>
                </WhileSuccess>
            </Timeout>
        </Inverter>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="WaitWhileSpeech">
        <ForceSuccess name="ForceSucces">
            <Sequence>
                <SubTree ID="ASRWaitSpeakingStarts" __shared_blackboard="false" feedback="start_speaking_feedback" mics_id="{mics_id}" result="start_speaking_result" start_timeout="{start_speaking_timeout}"/>
                <Action ID="ConvertMessageField" field="/success" input="{start_speaking_result}" output="start_speaking_success"/>
                <Fallback name="Check conversation started">
                    <CheckBool input="{start_speaking_success}"/>
                    <ForceFailure>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Ok, let's continue" result="tts_result"/>
                    </ForceFailure>
                </Fallback>
                <ForceSuccess>
                    <Sequence name="Physical acknowledge">
                        <CheckBool input="{physical_ack}" name="Check physical acknowledge"/>
                        <Action ID="ConvertMessageField" field="/mic_frame" input="{start_speaking_result}" name="Get frame_id to look at" output="start_mic_frame"/>
                        <SubTree ID="HaruTrackPosition" frame="{start_mic_frame}"/>
                        <WaitMilliseconds duration="3000" name="Wait for lookAt to finish (3secs)"/>
                        <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="{physical_ack_routine}"/>
                        <SubTree ID="HaruStopsTracking"/>
                    </Sequence>
                </ForceSuccess>
                <Parallel failure_threshold="2" success_threshold="1">
                    <SubTree ID="ASRWaitSpeakingStops" __shared_blackboard="false" feedback="stop_speaking_feedback" in_between_timeout="{stop_speaking_internal_timeout}" mics_id="{mics_id}" result="stop_speaking_result" total_speaking_timeout="{stop_speaking_timeout}"/>
                    <KeepRunningUntilFailure>
                        <Sequence name="Physical acknowledge">
                            <CheckBool input="{physical_ack}" name="Check physical acknowledge"/>
                            <OnlyOnce>
                                <Sequence>
                                    <SetBlackboard name="Initialize feedback variable" output_key="stop_speaking_feedback" value=""/>
                                    <SetBlackboard name="Initialize current person speaking ID" output_key="stop_person_id_now" value=""/>
                                    <SetBlackboard name="Initialize previous person speaking ID" output_key="stop_person_id_prev" value="-1"/>
                                </Sequence>
                            </OnlyOnce>
                            <SetBlackboard name="Local thread variable" output_key="local_stop_feedback" value="{stop_speaking_feedback}"/>
                            <ForceSuccess>
                                <Sequence>
                                    <CompareStrings comparison_op="!=" first="{local_stop_feedback}" second=""/>
                                    <Action ID="ConvertMessageField" field="/mic_frame/0" input="{local_stop_feedback}" name="Get frame_id to look at" output="stop_mic_frame"/>
                                    <Action ID="ConvertMessageField" field="/person_speaking_id/0" input="{local_stop_feedback}" name="Get frame_id to look at" output="stop_person_id_now"/>
                                    <CompareNumbers comparison_op="!=" first="{stop_person_id_now}" name="Check it's not the same ID as before" second="{stop_person_id_prev}"/>
                                    <SubTree ID="HaruTrackPosition" frame="{stop_mic_frame}"/>
                                    <WaitMilliseconds duration="3000" name="Wait for lookAt to finish (3secs)"/>
                                    <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="{physical_ack_routine}"/>
                                    <SubTree ID="HaruStopsTracking"/>
                                    <SetBlackboard name="Update previous person speaking ID" output_key="stop_person_id_prev" value="{stop_person_id_now}"/>
                                </Sequence>
                            </ForceSuccess>
                        </Sequence>
                    </KeepRunningUntilFailure>
                </Parallel>
                <Action ID="ConvertMessageField" field="/success" input="{stop_speaking_result}" output="stop_speaking_success"/>
                <Sequence name="Verbal acknowledge">
                    <CheckBool input="{verbal_ack}" name="Check verbal acknowledge"/>
                    <Action ID="InitializeJson" name="Fake an empty JSON for now" output="empty_json"/>
                    <SubTree ID="EMDialogEvent" __shared_blackboard="false" dialog_response="dialog_response" dialog_result="dialog_result" event_name="command-wait-while-speech-end" event_params="${empty_json}" person_id="0" timeout_msec="10000"/>
                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="{dialog_response}" result="tts_result"/>
                </Sequence>
            </Sequence>
        </ForceSuccess>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="WelcomeStage">
        <Sequence name="Welcome Stage">
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Welcome Stage: Begins"/>
            <Sequence name="before starting">
                <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="There we go!" result="tts_result"/>
                <WaitMilliseconds duration="125"/>
                <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="412"/>
                <WaitSeconds duration="1"/>
            </Sequence>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Beginning of Welcome Stage. Playing video and TTS" num_sub_stages="3" stage="{stage}" stage_id="{stage_id}" sub_stage="Begin" sub_stage_id="1" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="lookAtChildren" __shared_blackboard="false" table_height="{table_height}" table_horizontal="{table_horizontal}" table_proximity="{table_proximity}"/>
            <Parallel failure_threshold="1" success_threshold="1">
                <Parallel failure_threshold="2" success_threshold="2">
                    <Loop>
                        <SubTree ID="UnityProjectorShowVideoAndWait" __shared_blackboard="false" video_file="WelcomeVideo"/>
                    </Loop>
                    <Loop>
                        <SubTree ID="UnityProjectorShowVideoAndWait_2" __shared_blackboard="false" video_file2="WelcomeVideo"/>
                    </Loop>
                </Parallel>
                <Parallel failure_threshold="2" success_threshold="1">
                    <Sequence name="Comments">
                        <Sequence name="Welcome Stage">
                            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Welcome to the talking room Everyone!" result="tts_result"/>
                            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="This is Haru again" result="tts_result"/>
                            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases=" a prototype social robot" result="tts_result"/>
                            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Just to remind you, my name means Spring in Japanese" result="tts_result"/>
                            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="I’m here to learn from you" result="tts_result"/>
                        </Sequence>
                        <Sequence>
                            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="I’m still working myself out" result="tts_result"/>
                            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases=" so the things I learn from you will make me a better robot for humans to interact with in the future.&#10;&#10;" result="tts_result"/>
                        </Sequence>
                        <Sequence>
                            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="So… we will have students here from Japan and Australia" result="tts_result"/>
                            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Not only do I get new friends but I also get them from around the world!&#10;&#10;" result="tts_result"/>
                        </Sequence>
                    </Sequence>
                    <Loop>
                        <Sequence>
                            <WaitSeconds duration="1.5"/>
                            <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="808"/>
                            <WaitSeconds duration="1"/>
                            <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="808"/>
                        </Sequence>
                    </Loop>
                </Parallel>
                <SubTree ID="EMIPadTeacherSkipAndWait" __shared_blackboard="false" skip_feedback="skip_feed" skip_result="skip_result" stage_description="Welcome Stage: HAru Speech" stage_id="{stage_id}"/>
            </Parallel>
            <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="412"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Welcome Stage: Initial Comment"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for speech between students" num_sub_stages="3" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait Speech" sub_stage_id="2" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Welcome Stage: Sent Home and Routine Executed"/>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Sync Point: End Welcome Stage " sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="UnityProjectorStopVideo"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="End of Welcome Stage. Following with Explanation stage" num_sub_stages="3" stage="{stage}" stage_id="{stage_id}" sub_stage="End" sub_stage_id="3" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <MathOperationInt first="{stage_id}" name="Increment stage_id" operator="+" output="stage_id" second="1"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Welcome Stage: Sent Home Routine and Comment Done"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Welcome Stage: Finished Stage"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="WelcomeStage_EP1">
        <Sequence name="Welcome Stage">
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Welcome Stage: Begins"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Beginning of Welcome Stage. Playing video and TTS" num_sub_stages="4" stage="{stage}" stage_id="{stage_id}" sub_stage="Begin" sub_stage_id="1" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <Parallel failure_threshold="1" success_threshold="1">
                <Loop>
                    <SubTree ID="UnityProjectorShowVideoAndWait" __shared_blackboard="false" video_file="WelcomePage"/>
                </Loop>
                <Parallel failure_threshold="2" success_threshold="1">
                    <Sequence name="Welcome Stage">
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Welcome to the talking room Everyone!" result="tts_result"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases=" I am Haru" result="tts_result"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases=" a prototype social robot" result="tts_result"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="My name means Spring in Japanese" result="tts_result"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Im here to help you all to learn from each other and also for me to learn from you." result="tts_result"/>
                        <WaitSeconds duration="1"/>
                        <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="How is everyone today?" result="tts_result"/>
                        <SubTree ID="lookAtChildren" __shared_blackboard="false" table_height="{table_height}" table_horizontal="{table_horizontal}" table_proximity="{table_proximity}"/>
                    </Sequence>
                    <Loop>
                        <Sequence>
                            <WaitSeconds duration="1.5"/>
                            <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="808"/>
                            <WaitSeconds duration="1"/>
                            <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="808"/>
                        </Sequence>
                    </Loop>
                </Parallel>
            </Parallel>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Welcome Stage: Initial Comment And Question Done"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Waiting for speech between students" num_sub_stages="4" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait Speech" sub_stage_id="2" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Welcome Stage: Question Hows Everyone Asked and Listening Now"/>
            <SubTree ID="EMBTSyncPoint" __shared_blackboard="false" bt_id="{bt_id}" message="Sync Point: Welcome Stage First Question" sync_feed="sync_feed" sync_result="sync_result"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Welcome Stage: Comment Over and finished listening"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="Conversation finished. Robot speaks now" num_sub_stages="4" stage="{stage}" stage_id="{stage_id}" sub_stage="Wait Finished" sub_stage_id="3" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Welcome Stage: Sending Home and Second Comment"/>
            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="I'm a bit like you, still in school and still working myself out, so the things I learn from you will make me a better robot for humans to interact with in the future." result="tts_result"/>
            <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="We'll be together for 10 modules and I’m really looking forward to all of them" result="tts_result"/>
            <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="412"/>
            <SubTree ID="EMIPadInteractionState" __shared_blackboard="false" description="End of Welcome Stage. Following with Explanation stage" num_sub_stages="4" stage="{stage}" stage_id="{stage_id}" sub_stage="End" sub_stage_id="4" this_country="{this_country}" this_country_id="{this_country_id}"/>
            <MathOperationInt first="{stage_id}" name="Increment stage_id" operator="+" output="stage_id" second="1"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Welcome Stage: Sent Home Routine and Comment Done"/>
            <SubTree ID="TalkingRoomPublishLogTopic" __shared_blackboard="false" data="Welcome Stage: Finished Stage"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="WhileHaruAudioIsPlaying">
        <SequenceStar>
            <WaitMilliseconds duration="100"/>
            <ForceSuccess>
                <WhileSuccess>
                    <SubTree ID="IsHaruAudioPlaying"/>
                </WhileSuccess>
            </ForceSuccess>
            <WaitMilliseconds duration="100"/>
        </SequenceStar>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="WhileHaruLCDIsPlaying">
        <SequenceStar>
            <WaitMilliseconds duration="100"/>
            <ForceSuccess>
                <WhileSuccess>
                    <SubTree ID="IsHaruLCDPlaying"/>
                </WhileSuccess>
            </ForceSuccess>
            <WaitMilliseconds duration="100"/>
        </SequenceStar>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="WhileHaruProjectorIsPlaying">
        <SequenceStar>
            <WaitMilliseconds duration="100"/>
            <ForceSuccess>
                <WhileSuccess>
                    <SubTree ID="IsHaruProjectorPlaying"/>
                </WhileSuccess>
            </ForceSuccess>
            <WaitMilliseconds duration="100"/>
        </SequenceStar>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="WhileHaruRoutineIsPlaying">
        <SequenceStar>
            <WaitMilliseconds duration="200"/>
            <ForceSuccess>
                <WhileSuccess>
                    <SubTree ID="IsHaruRoutinePlaying"/>
                </WhileSuccess>
            </ForceSuccess>
            <WaitMilliseconds duration="200"/>
        </SequenceStar>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="WhileHaruTTSIsPlaying">
        <SequenceStar>
            <WaitMilliseconds duration="100"/>
            <ForceSuccess>
                <WhileSuccess>
                    <SubTree ID="IsHaruSpeaking"/>
                </WhileSuccess>
            </ForceSuccess>
            <WaitMilliseconds duration="100"/>
        </SequenceStar>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="idleBehaviour">
        <Sequence>
            <SetBlackboard output_key="last_bh" value="0"/>
            <WhileSuccess>
                <Sequence>
                    <RandomInteger max="6" min="0" result="bh"/>
                    <IfThenElse>
                        <CompareNumbers comparison_op="!=" first="{bh}" second="{last_bh}"/>
                        <Sequence>
                            <BlackboardCheckInt return_on_mismatch="SUCCESS" value_A="{bh}" value_B="0">
                                <Sequence>
                                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="Hey guys! We will start very soon. I'm so excited!" result="tts_result"/>
                                    <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="425"/>
                                </Sequence>
                            </BlackboardCheckInt>
                            <BlackboardCheckInt return_on_mismatch="SUCCESS" value_A="{bh}" value_B="1">
                                <Sequence>
                                    <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="817"/>
                                    <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="819"/>
                                    <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="817"/>
                                    <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="929"/>
                                </Sequence>
                            </BlackboardCheckInt>
                            <BlackboardCheckInt return_on_mismatch="SUCCESS" value_A="{bh}" value_B="2">
                                <Sequence>
                                    <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="611"/>
                                </Sequence>
                            </BlackboardCheckInt>
                            <BlackboardCheckInt return_on_mismatch="SUCCESS" value_A="{bh}" value_B="3">
                                <Sequence>
                                    <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="670"/>
                                    <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="610"/>
                                    <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="673"/>
                                </Sequence>
                            </BlackboardCheckInt>
                            <BlackboardCheckInt return_on_mismatch="SUCCESS" value_A="{bh}" value_B="4">
                                <Sequence>
                                    <SubTree ID="lookAtTV" __shared_blackboard="false" screen_height="{screen_height}" screen_horizontal="{screen_horizontal}" screen_proximity="{screen_proximity}"/>
                                    <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="14"/>
                                    <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="908"/>
                                    <SubTree ID="lookAtChildren" __shared_blackboard="false" table_height="{table_height}" table_horizontal="{table_horizontal}" table_proximity="{table_proximity}"/>
                                    <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="320"/>
                                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="I hope everything is going fine in the other side" result="tts_result"/>
                                    <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="523"/>
                                </Sequence>
                            </BlackboardCheckInt>
                            <BlackboardCheckInt return_on_mismatch="SUCCESS" value_A="{bh}" value_B="5">
                                <Sequence>
                                    <SubTree ID="lookAtTV" __shared_blackboard="false" screen_height="{screen_height}" screen_horizontal="{screen_horizontal}" screen_proximity="{screen_proximity}"/>
                                    <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="6"/>
                                    <SubTree ID="lookAtChildren" __shared_blackboard="false" table_height="{table_height}" table_horizontal="{table_horizontal}" table_proximity="{table_proximity}"/>
                                    <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="608"/>
                                </Sequence>
                            </BlackboardCheckInt>
                            <BlackboardCheckInt return_on_mismatch="SUCCESS" value_A="{bh}" value_B="6">
                                <Sequence>
                                    <SubTree ID="HaruSpeaksTTSAndWait" feedback="tts_feed" phrases="I charged my batteries... Why am I so sleepy?" result="tts_result"/>
                                    <SubTree ID="HaruExecuteRoutineAndWait" feedback="routine_feed" result="routine_result" routines="100"/>
                                </Sequence>
                            </BlackboardCheckInt>
                        </Sequence>
                    </IfThenElse>
                    <SetBlackboard output_key="last_bh" value="{bh}"/>
                    <SubTree ID="HaruExecuteRoutine" routines="502"/>
                    <WaitSeconds duration="7"/>
                </Sequence>
            </WhileSuccess>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="lookAtChildren">
        <Sequence>
            <SubTree ID="HaruLookAt" __shared_blackboard="false" base_control_vel="false" disable_base="false" disable_eyes="false" disable_head="false" disable_neck="false" high="{table_height}" horizontal="{table_horizontal}" proximity="{table_proximity}"/>
            <WaitSeconds duration="2"/>
            <Action ID="HaruCommandLEDs" action="1" brightness="1" file="eyes_inquisitive.gif" fps="0" jump_factor="0" latch="0" loop="0" queue_size="1" topic="/idmind_tabletop/cmd_leds" type="1"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="lookAtTV">
        <Sequence>
            <SubTree ID="HaruLookAt" __shared_blackboard="false" base_control_vel="false" disable_base="false" disable_eyes="false" disable_head="false" disable_neck="false" high="{screen_height}" horizontal="{screen_horizontal}" proximity="{screen_proximity}"/>
            <WaitSeconds duration="2"/>
            <Action ID="HaruCommandLEDs" action="1" brightness="1" file="eyes_inquisitive.gif" fps="0" jump_factor="0" latch="0" loop="0" queue_size="1" topic="/idmind_tabletop/cmd_leds" type="1"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="readTVAndChildrenPositions">
        <Sequence>
            <Fallback>
                <Action ID="LoadYamlFile" file_path="/home/haru/catkin_ws/src/haru-encouraging-mediator/trees/tests/yaml-files/tv_and_children_positions.yaml" output="yaml_result"/>
                <Action ID="LoadYamlFile" file_path="/opt/ros/noetic/share/haru_encouraging_mediator/trees/tests/yaml-files/tv_and_children_positions.yaml" output="yaml_result"/>
            </Fallback>
            <Action ID="ConvertMessageField" field="/table_horizontal" input="{yaml_result}" output="table_horizontal"/>
            <Action ID="ConvertMessageField" field="/table_proximity" input="{yaml_result}" output="table_proximity"/>
            <Action ID="ConvertMessageField" field="/table_height" input="{yaml_result}" output="table_height"/>
            <Action ID="ConvertMessageField" field="/screen_horizontal" input="{yaml_result}" output="screen_horizontal"/>
            <Action ID="ConvertMessageField" field="/screen_proximity" input="{yaml_result}" output="screen_proximity"/>
            <Action ID="ConvertMessageField" field="/screen_height" input="{yaml_result}" output="screen_height"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <TreeNodesModel>
        <SubTree ID="AGHAntsLessonIntro">
            <input_port default="true" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <SubTree ID="AGHCultureComparison">
            <input_port default="true" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <SubTree ID="AGHGallery">
            <input_port default="true" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <SubTree ID="AGHKanji2">
            <input_port default="true" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <SubTree ID="AGHQueensAndDrones">
            <input_port default="true" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <SubTree ID="AGHQueensChat">
            <input_port default="true" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <SubTree ID="AGHStoryBegin">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <SubTree ID="AGHStoryBusyAnts">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <SubTree ID="AGHStoryComeChatWithMe">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <SubTree ID="AGHStoryDoYouThink">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <SubTree ID="AGHStoryIntro">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <SubTree ID="AGHStoryNextYear">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <SubTree ID="AGHStoryStage">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <SubTree ID="AGHStoryTheEnd">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <SubTree ID="AGHStoryWinter">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <SubTree ID="ASRWaitSpeakingStarts">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <output_port default="start_speaking_feedback" name="feedback">Action feedback</output_port>
            <input_port name="mics_id">ID of mics to check condition. -1 to check all the mics</input_port>
            <output_port default="start_speaking_result" name="result">Action result</output_port>
            <input_port name="start_timeout">Time to wait for speech to be detected. 0 to check condition only once [milliseconds]</input_port>
        </SubTree>
        <SubTree ID="ASRWaitSpeakingStops">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <output_port default="stop_speaking_feedback" name="feedback">Action feedback</output_port>
            <input_port name="in_between_timeout">Minimum time of &quot;silence&quot; between sentences for the conversation to finish [milliseconds]</input_port>
            <input_port name="mics_id">ID of mics checking the person is speaking. -1 for all the mics</input_port>
            <output_port default="stop_speaking_result" name="result">Action result</output_port>
            <input_port name="total_speaking_timeout">Time the conversation lasts [milliseconds]</input_port>
        </SubTree>
        <SubTree ID="Add1ToStageID">
            <input_port default="true" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <Action ID="AddArrayToJson">
            <input_port name="input_json" type="void">Input Json array</input_port>
            <input_port name="input_key" type="std::string">Key name of the array</input_port>
            <input_port name="input_value" type="std::string">New value or value to append to the array</input_port>
            <output_port name="output_json" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Output Json array</output_port>
            <input_port default="1" name="override" type="bool">1 to override the actual array; 0 to append value</input_port>
        </Action>
        <Action ID="AddKeyValueToJson">
            <input_port name="input_json" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Input json to copy to</input_port>
            <input_port name="input_key" type="std::string">Input key name</input_port>
            <input_port name="input_value" type="std::string">Input value</input_port>
            <output_port name="output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Output json with new value</output_port>
        </Action>
        <SubTree ID="AntsLessonStage">
            <input_port default="true" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <SubTree ID="AvatarCreationStage">
            <input_port default="true" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <SubTree ID="AvatarCreationStage_one_screen">
            <input_port default="true" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <Action ID="BTCommandExchangeInfoAction">
            <input_port name="action" type="std::string">Actionlib action server name</input_port>
            <input_port name="bt_id" type="std::string">Auto-generated field from behavior_tree_ros::ExchangeInfoGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="info_data" type="std::string">Auto-generated field from behavior_tree_ros::ExchangeInfoGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="info_type" type="std::string">Auto-generated field from behavior_tree_ros::ExchangeInfoGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_feedback" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [behavior_tree_ros::ExchangeInfoFeedback_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="serialized_result" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [behavior_tree_ros::ExchangeInfoResult_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="state" type="actionlib::SimpleClientGoalState">Actionlib reported state</output_port>
        </Action>
        <Action ID="BTCommandHandShakeAction">
            <input_port name="action" type="std::string">Actionlib action server name</input_port>
            <input_port name="bt_id" type="std::string">Auto-generated field from behavior_tree_ros::HandShakeGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="message" type="std::string">Auto-generated field from behavior_tree_ros::HandShakeGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_feedback" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [behavior_tree_ros::HandShakeFeedback_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="serialized_result" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [behavior_tree_ros::HandShakeResult_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="state" type="actionlib::SimpleClientGoalState">Actionlib reported state</output_port>
        </Action>
        <Action ID="CallEmptyService">
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="CallSetBoolService">
            <input_port name="data" type="bool">Auto-generated field from std_srvs::SetBoolRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [std_srvs::SetBoolResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="CallTriggerService">
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [std_srvs::TriggerResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <SubTree ID="CallingStage">
            <input_port default="true" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <SubTree ID="CallingStage_one_screen">
            <input_port default="true" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <Action ID="CaptureImage">
            <input_port name="cmd" type="bool">Auto-generated field from picture_server::SaveImageRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="num_name" type="std::string">Auto-generated field from picture_server::SaveImageRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="path" type="std::string">Auto-generated field from picture_server::SaveImageRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="ConvertJsonToDouble">
            <input_port name="input" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message</input_port>
            <output_port name="output" type="double">Output variable</output_port>
        </Action>
        <Action ID="ConvertJsonToInt64">
            <input_port name="input" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message</input_port>
            <output_port name="output" type="long">Output variable</output_port>
        </Action>
        <Action ID="ConvertJsonToString">
            <input_port name="input" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message</input_port>
            <output_port name="output" type="std::string">Output variable</output_port>
        </Action>
        <Action ID="ConvertJsonToUint64">
            <input_port name="input" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message</input_port>
            <output_port name="output" type="unsigned long">Output variable</output_port>
        </Action>
        <Action ID="ConvertMessageField">
            <input_port name="field" type="std::string">Field to fetch</input_port>
            <input_port name="input" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message</input_port>
            <output_port name="output" type="void">Output variable</output_port>
        </Action>
        <Action ID="ConvertRandomMessageField">
            <input_port name="field" type="std::string">Field to fetch</input_port>
            <input_port name="input" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message</input_port>
            <output_port name="output" type="void">Output variable</output_port>
        </Action>
        <Action ID="CopyJson">
            <input_port name="input" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Input variable</input_port>
            <output_port name="output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Output variable to copy to</output_port>
        </Action>
        <Action ID="CsvParserApiCallAction">
            <input_port name="action" type="std::string">Actionlib action server name</input_port>
            <input_port name="line" type="std::string">user sentence</input_port>
            <output_port name="serialized_feedback" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetPersonWakeUpWordFeedback_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="serialized_result" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetPersonWakeUpWordResult_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="state" type="actionlib::SimpleClientGoalState">Actionlib reported state</output_port>
        </Action>
        <Action ID="DebugLog">
            <input_port name="message" type="std::string">Message to log</input_port>
        </Action>
        <SubTree ID="DialogWithStudentbyID">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="ipad_register_result">Result from user registration stage</input_port>
            <input_port name="tag">Tag from user</input_port>
            <input_port name="user_id">Id user to make dialog</input_port>
        </SubTree>
        <SubTree ID="EMBTExchangeInfo">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="bt_id">ID of the BT sending the info</input_port>
            <input_port name="data">Raw data to share</input_port>
            <input_port name="data_type">Type of data to share, e.g: TTS, Routine, message, LCD video, etc</input_port>
            <output_port default="exchange_feed" name="exchange_feedback">ExchangeInfo Action feedback</output_port>
            <output_port default="exchange_result" name="exchange_result">Info received from the other BT</output_port>
        </SubTree>
        <SubTree ID="EMBTSyncPoint">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="bt_id">ID of the BT sending the message to sync</input_port>
            <input_port name="message">Identifier for the sync point</input_port>
            <output_port default="sync_feed" name="sync_feed">Feedback while waiting for the sync</output_port>
            <output_port default="sync_result" name="sync_result">Result of the sync</output_port>
        </SubTree>
        <Action ID="EMCommandIPadInteractionState">
            <input_port name="country.data" type="std::string">Auto-generated field from haru_encouraging_mediator_msgs::InteractionState_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="country_id.data" type="unsigned short">Auto-generated field from haru_encouraging_mediator_msgs::InteractionState_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="description.data" type="std::string">Auto-generated field from haru_encouraging_mediator_msgs::InteractionState_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="header.frame_id" type="std::string">Auto-generated field from haru_encouraging_mediator_msgs::InteractionState_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="header.seq" type="unsigned int">Auto-generated field from haru_encouraging_mediator_msgs::InteractionState_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port default="0" name="latch" type="bool">Latch messages?</input_port>
            <input_port name="number_of_sub_stages.data" type="unsigned short">Auto-generated field from haru_encouraging_mediator_msgs::InteractionState_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Internal publisher queue size</input_port>
            <input_port name="stage.data" type="std::string">Auto-generated field from haru_encouraging_mediator_msgs::InteractionState_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="stage_id.data" type="unsigned short">Auto-generated field from haru_encouraging_mediator_msgs::InteractionState_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="sub_stage.data" type="std::string">Auto-generated field from haru_encouraging_mediator_msgs::InteractionState_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="sub_stage_id.data" type="unsigned short">Auto-generated field from haru_encouraging_mediator_msgs::InteractionState_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="topic" type="std::string">Topic to publish to</input_port>
        </Action>
        <Action ID="EMCommandIPadKanjiWriteAction">
            <input_port name="action" type="std::string">Actionlib action server name</input_port>
            <input_port name="ipad_ids.data" type="std::string">Auto-generated field from haru_encouraging_mediator_msgs::KanjiWriteGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="message.data" type="std::string">Auto-generated field from haru_encouraging_mediator_msgs::KanjiWriteGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_feedback" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [haru_encouraging_mediator_msgs::KanjiWriteFeedback_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="serialized_result" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [haru_encouraging_mediator_msgs::KanjiWriteResult_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="state" type="actionlib::SimpleClientGoalState">Actionlib reported state</output_port>
            <input_port name="timeout.data" type="double">Auto-generated field from haru_encouraging_mediator_msgs::KanjiWriteGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <Action ID="EMCommandIPadQuestionAction">
            <input_port name="action" type="std::string">Actionlib action server name</input_port>
            <input_port name="choices.data" type="std::string">Auto-generated field from haru_encouraging_mediator_msgs::QuestionGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="ipad_ids.data" type="std::string">Auto-generated field from haru_encouraging_mediator_msgs::QuestionGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="question.data" type="std::string">Auto-generated field from haru_encouraging_mediator_msgs::QuestionGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_feedback" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [haru_encouraging_mediator_msgs::QuestionFeedback_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="serialized_result" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [haru_encouraging_mediator_msgs::QuestionResult_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="state" type="actionlib::SimpleClientGoalState">Actionlib reported state</output_port>
            <input_port name="timeout.data" type="double">Auto-generated field from haru_encouraging_mediator_msgs::QuestionGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="user_input_type.data" type="unsigned char">Auto-generated field from haru_encouraging_mediator_msgs::QuestionGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <Action ID="EMCommandIPadRequestImageAction">
            <input_port name="action" type="std::string">Actionlib action server name</input_port>
            <input_port name="available_tags.data" type="std::string">Auto-generated field from haru_encouraging_mediator_msgs::RequestImageGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="ipad_ids.data" type="std::string">Auto-generated field from haru_encouraging_mediator_msgs::RequestImageGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="message.data" type="std::string">Auto-generated field from haru_encouraging_mediator_msgs::RequestImageGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_feedback" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [haru_encouraging_mediator_msgs::RequestImageFeedback_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="serialized_result" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [haru_encouraging_mediator_msgs::RequestImageResult_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="state" type="actionlib::SimpleClientGoalState">Actionlib reported state</output_port>
            <input_port name="timeout.data" type="double">Auto-generated field from haru_encouraging_mediator_msgs::RequestImageGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <Action ID="EMCommandIPadSkipSectionAction">
            <input_port name="action" type="std::string">Actionlib action server name</input_port>
            <output_port name="serialized_feedback" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [haru_encouraging_mediator_msgs::SkipSectionFeedback_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="serialized_result" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [haru_encouraging_mediator_msgs::SkipSectionResult_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="stage_description.data" type="std::string">Auto-generated field from haru_encouraging_mediator_msgs::SkipSectionGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="stage_id.data" type="unsigned int">Auto-generated field from haru_encouraging_mediator_msgs::SkipSectionGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="state" type="actionlib::SimpleClientGoalState">Actionlib reported state</output_port>
        </Action>
        <Action ID="EMCommandIPadSyncPointButtonAction">
            <input_port name="action" type="std::string">Actionlib action server name</input_port>
            <output_port name="serialized_feedback" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [haru_encouraging_mediator_msgs::SyncPointButtonFeedback_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="serialized_result" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [haru_encouraging_mediator_msgs::SyncPointButtonResult_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="state" type="actionlib::SimpleClientGoalState">Actionlib reported state</output_port>
        </Action>
        <Action ID="EMCommandIPadUserRegistrationAction">
            <input_port name="action" type="std::string">Actionlib action server name</input_port>
            <input_port name="ipad_ids.data" type="std::string">Auto-generated field from haru_encouraging_mediator_msgs::UserRegistrationGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_feedback" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [haru_encouraging_mediator_msgs::UserRegistrationFeedback_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="serialized_result" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [haru_encouraging_mediator_msgs::UserRegistrationResult_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="state" type="actionlib::SimpleClientGoalState">Actionlib reported state</output_port>
            <input_port name="timeout.data" type="double">Auto-generated field from haru_encouraging_mediator_msgs::UserRegistrationGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <SubTree ID="EMDialogEvent">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <output_port name="dialog_response"/>
            <output_port name="dialog_result"/>
            <input_port name="event_name"/>
            <input_port name="event_params"/>
            <input_port name="person_id"/>
            <input_port name="timeout_msec"/>
        </SubTree>
        <SubTree ID="EMIPadInteractionState">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="description">Description of the sub_stage</input_port>
            <input_port name="num_sub_stages">Number of sub-stages in the actual stage</input_port>
            <input_port name="stage">Name of the stage</input_port>
            <input_port name="stage_id">ID of the stage</input_port>
            <input_port name="sub_stage">Name of the sub_stage</input_port>
            <input_port name="sub_stage_id">ID of the sub_stage</input_port>
            <input_port name="this_country">Name of country</input_port>
            <input_port name="this_country_id">ID of country</input_port>
        </SubTree>
        <SubTree ID="EMIPadKanjiWriteAndWait">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <output_port default="kanji_feedback" name="feedback">Action feedback</output_port>
            <input_port default="-1" name="ipad_ids">ID of iPads to request the kanji. -1 for all available</input_port>
            <input_port name="message">Optional message to show in the iPad along the request</input_port>
            <output_port default="kanji_result" name="result">iPads response</output_port>
            <input_port default="-1" name="timeout">Timeout for request. -1 to disable</input_port>
        </SubTree>
        <SubTree ID="EMIPadLocalInteractionState">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="description">Description of the step the tree is on</input_port>
            <input_port name="num_sub_stages">Number of sub stages the actual stage has</input_port>
            <input_port name="stage">Name of the stage</input_port>
            <input_port name="stage_id">ID of the stage</input_port>
            <input_port name="sub_stage">Name of the sub stage</input_port>
            <input_port name="sub_stage_id">ID of the sub stage</input_port>
            <input_port name="this_country">Name of the country</input_port>
            <input_port name="this_country_id">ID for the country</input_port>
        </SubTree>
        <SubTree ID="EMIPadQuestionAndWait">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="choices">Only used in Multi choice questions. Choices to answer the question, separated by &quot;;&quot;</input_port>
            <input_port default="-1" name="ipad_ids">ID of the iPad to send the question. If &quot;-1&quot; send the question and wait for the answer for all the iPads</input_port>
            <input_port default="Do you know Haru?" name="question">Question to answer</input_port>
            <output_port default="question_feed" name="question_feed">Feedback while waiting for the answer</output_port>
            <output_port default="question_result" name="question_result">Result received from iPad</output_port>
            <input_port default="0" name="question_type">Type of question according to the possible answers. 0: Yes/No question; 1: Multi choice question; 2: free input question</input_port>
            <input_port default="-1" name="timeout">Time, in seconds, to wait for the answer. If &quot;-1&quot;, timeout is dissabled</input_port>
        </SubTree>
        <SubTree ID="EMIPadRemoteInteractionState">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="description">Description of the step the tree is on</input_port>
            <input_port name="num_sub_stages">Number of sub stages in the actual stage</input_port>
            <input_port name="stage">Name of the stage</input_port>
            <input_port name="stage_id">ID of stage</input_port>
            <input_port name="sub_stage">Name of the sub stage</input_port>
            <input_port name="sub_stage_id">ID of the sub stage</input_port>
            <input_port name="this_country">Name of the country</input_port>
            <input_port name="this_country_id">ID of the country</input_port>
        </SubTree>
        <SubTree ID="EMIPadRequestImageAndWait">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <output_port default="ipad_image_feedback" name="feedback">Action feedback</output_port>
            <input_port default="-1" name="ipad_ids">iPad ID to request the image. -1 for all the iPads available</input_port>
            <input_port name="message">Optional message to show in the iPad when requesting the image</input_port>
            <output_port default="ipad_image_result" name="result">Images requested to the iPads</output_port>
            <input_port name="tags">Separated by ;</input_port>
            <input_port default="-1" name="timeout">Time to wait for the iPads response [seconds]. -1 to disable timeout</input_port>
        </SubTree>
        <SubTree ID="EMIPadSyncPointButton"/>
        <SubTree ID="EMIPadTeacherSkipAndWait">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <output_port default="skip_feed" name="skip_feedback">Action feedback</output_port>
            <output_port default="skip_result" name="skip_result">Action result</output_port>
            <input_port name="stage_description">Description of the stage to skip</input_port>
            <input_port name="stage_id">ID of the stage to skip</input_port>
        </SubTree>
        <SubTree ID="EMIPadUserRegistrationAndWait">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <output_port default="ipad_register_feedback" name="feedback">Action feedback</output_port>
            <input_port default="-1" name="ipad_ids">iPads ID to request the user registration. -1 for all available iPads</input_port>
            <output_port default="ipad_register_result" name="result">iPads result. Includes usernames and avatar image</output_port>
            <input_port default="-1" name="timeout">Time to wait for iPads response [seconds]. -1 to disable timeout</input_port>
        </SubTree>
        <SubTree ID="EMSyncPoint">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="bt_id">ID of the tree</input_port>
            <input_port name="stage">Name of the stage to sync</input_port>
        </SubTree>
        <SubTree ID="EMSyncPointAndSkipButton">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port default="{bt_id}" name="bt_id"/>
            <input_port name="msg_skip_ipad">Message to be displayed in the professors iPad next to the Skip button</input_port>
            <input_port name="msg_to_sync">Unique message to sync in the remote BTs</input_port>
            <input_port default="{stage_id}" name="stage_id"/>
        </SubTree>
        <SubTree ID="EMUnderstandEvent">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <output_port default="dialog_response" name="dialog_response">Last Haru speech text</output_port>
            <output_port default="dialog_result" name="dialog_result">Last dialog result message</output_port>
            <input_port name="event_name">Name of the event to trigger on Dialog</input_port>
            <input_port name="event_params">Parameters to pass to Dialog</input_port>
            <input_port name="person_id">ID of person to trigger event</input_port>
            <input_port default="0" name="timeout">Timeout duration. 0 to disable</input_port>
        </SubTree>
        <Action ID="ErrorLog">
            <input_port name="message" type="std::string">Message to log</input_port>
        </Action>
        <Action ID="ExecuteRemoteTree">
            <input_port name="action" type="std::string">Actionlib action server name</input_port>
            <output_port name="state" type="actionlib::SimpleClientGoalState">Actionlib reported state</output_port>
            <input_port name="tree_file.data" type="std::string">Auto-generated field from behavior_tree_ros::BehaviorTreeGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <SubTree ID="ExecuteTreeAndWait">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="tree_file">Full name of the tree to execute</input_port>
        </SubTree>
        <SubTree ID="ExplanationStage">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <SubTree ID="FarewellStage">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <Action ID="FatalLog">
            <input_port name="message" type="std::string">Message to log</input_port>
        </Action>
        <Action ID="FindByFieldValue">
            <input_port name="field" type="std::string">Field to fetch</input_port>
            <input_port name="input" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message</input_port>
            <output_port name="output" type="void">Output variable</output_port>
            <input_port name="value" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Value to search for</input_port>
        </Action>
        <SubTree ID="FindDialogEntity">
            <input_port name="entities_list">List of entities</input_port>
            <input_port name="entities_name">Name of entity to find on the list</input_port>
            <output_port name="entity_elements">Elements of entity found</output_port>
            <output_port name="entity_name">Name of entity found</output_port>
        </SubTree>
        <SubTree ID="FocusAndDialogVariablesWithSyncs">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <output_port name="dialog_params"/>
            <input_port name="ipad_id"/>
            <input_port name="ipad_image_result"/>
            <input_port name="ipad_register_result"/>
        </SubTree>
        <SubTree ID="FocusOneAndDialog">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="dialog_params"/>
            <input_port name="id"/>
        </SubTree>
        <SubTree ID="FocusOneAndSyncWITHOUTDialog">
            <input_port default="true" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="id"/>
        </SubTree>
        <Decorator ID="ForEachLoop">
            <input_port name="break_on_child_failure" type="bool">Break loop on child failure?</input_port>
            <input_port name="input" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Input sequence</input_port>
            <output_port name="output_element" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Output element variable</output_port>
            <output_port name="output_index" type="unsigned long">Output index variable</output_port>
        </Decorator>
        <Action ID="GetJsonSize">
            <input_port name="input" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Input sequence</input_port>
            <output_port name="output" type="unsigned long">Sequence size output</output_port>
        </Action>
        <Action ID="GetMessageField">
            <input_port name="field" type="std::string">Field to fetch</input_port>
            <input_port name="input" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message</input_port>
            <output_port name="output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Output variable</output_port>
        </Action>
        <SubTree ID="GetRandomIpadData">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <output_port name="ipad_id">id del ipad</output_port>
            <input_port name="ipad_register_result">Result from user registration stage </input_port>
            <output_port name="ipad_user_json">json con person_name</output_port>
            <input_port default="0" name="number_of_ipads">Numero max de ipads conectados</input_port>
        </SubTree>
        <Action ID="GetRandomMessageField">
            <input_port name="field" type="std::string">Field to fetch</input_port>
            <input_port name="input" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message</input_port>
            <output_port name="output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Output variable</output_port>
        </Action>
        <SubTree ID="GetRandomPerson">
            <output_port name="id_selected">id of person to target</output_port>
            <input_port name="osef">osef</input_port>
        </SubTree>
        <Action ID="GetTransformAngles">
            <input_port name="input" type="tf::StampedTransform">TF transform</input_port>
            <output_port name="pitch" type="double">Picth angle [0,2PI] from TF transform origin</output_port>
            <output_port name="roll" type="double">Roll angle [0,2PI] from TF transform origin</output_port>
            <output_port name="yaw" type="double">Yaw angle [0,2PI] from TF transform origin</output_port>
        </Action>
        <Action ID="GetTransformDistance">
            <input_port name="input" type="tf::StampedTransform">TF transform</input_port>
            <output_port name="output" type="double">Distance form transform origin</output_port>
        </Action>
        <Action ID="GetTransformHorizontalDistance">
            <input_port name="input" type="tf::StampedTransform">TF transform</input_port>
            <output_port name="output" type="double">2D distance from TF transform origin</output_port>
        </Action>
        <Action ID="GetTransformOrigin">
            <input_port name="input" type="tf::StampedTransform">TF transform</input_port>
            <output_port name="x" type="double">Origin x coordinate</output_port>
            <output_port name="y" type="double">Origin y coordinate</output_port>
            <output_port name="z" type="double">Origin z coordinate</output_port>
        </Action>
        <SubTree ID="GoodbyeStage">
            <input_port default="true" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <SubTree ID="HaruAudioMusicPlayAndWait">
            <input_port default="0" name="end_time">Time to stop audio play. Must be equal or higher than &quot;start_time&quot;. [milliseconds]</input_port>
            <input_port default="1.0" name="fade_duration">Duration of the fade at the beginning of the audio [seconds]. Ignored if fade_enable set to false.</input_port>
            <input_port default="1" name="fade_enable">Enable/disable fade at the beginning of the audio [1/0]</input_port>
            <input_port default="1.0" name="fade_out_duration">Duration of the fade at the end of the audio [seconds]. Ignored if fade_out_enable set to false.</input_port>
            <input_port default="1" name="fade_out_enable">Enable/disable fade at the end of the audio [1/0]</input_port>
            <output_port default="audio_music_feed" name="feedback">Audio music action feedback. Filled when action is running</output_port>
            <input_port default="0" name="loop">Repeat?</input_port>
            <input_port name="music_file">Name of the file to play (absolute or relative) in music channel. Audio file must have .wav extension</input_port>
            <output_port default="audio_music_result" name="result">Audio music action result. Only once when the action finish</output_port>
            <input_port default="0" name="start_time">Time to start audio play. If this and &quot;end_time&quot; are 0 the entire file will be played [milliseconds]</input_port>
            <input_port default="1" name="volume">Audio volume [0 - 1]</input_port>
        </SubTree>
        <SubTree ID="HaruAudioPlay">
            <input_port name="audio_file">Name of the file to play (absolute or relative). Audio file must have .wav extension</input_port>
            <input_port default="0" name="channel_id">0: music channel; 1: speech channel; 2: aux channel ...</input_port>
            <input_port default="0" name="end_time">Time to stop audio play. Must be equal or higher than &quot;start_time&quot;. [milliseconds]</input_port>
            <input_port default="1.0" name="fade_duration">Duration of the fade at the beginning of the audio [seconds]. Ignored if fade_enable set to false.</input_port>
            <input_port default="1" name="fade_enable">Enable/Disable fade of the audio at the beginning of the audio [1/0]</input_port>
            <input_port default="1.0" name="fade_out_duration">Duration of the fade at the end of the audio [seconds]. Ignored if fade_out_enable set to false.</input_port>
            <input_port default="1" name="fade_out_enable">Enable/Disable fade of the audio at the end of the audio [1/0]</input_port>
            <input_port default="0" name="loop">Repeat?</input_port>
            <input_port default="0" name="start_time">Time to start audio play. If this and &quot;end_time&quot; are 0 the entire file will be played [milliseconds]</input_port>
            <input_port default="1" name="volume">Audio volume [0 - 1]</input_port>
        </SubTree>
        <SubTree ID="HaruAudioSpeechPlayAndWait">
            <input_port default="0" name="end_time">Time to stop audio play. Must be equal or higher than &quot;start_time&quot;. [milliseconds]</input_port>
            <input_port default="1.0" name="fade_duration">Duration of the fade at the beginning and end of the audio [seconds]. Ignored if fade_enable set to false.</input_port>
            <input_port default="1" name="fade_enable">Enable/Disable fade at the beginning of the audio [1/0]</input_port>
            <input_port default="1.0" name="fade_out_duration">Duration of the fade at the end of the audio [seconds]. Ignored if fade_out_enable set to false.</input_port>
            <input_port default="1" name="fade_out_enable">Enable/Disable fade at the end of the audio [1/0]</input_port>
            <output_port default="audio_speech_feed" name="feedback">Audio speech action feedback. Filled when action is running</output_port>
            <input_port default="0" name="loop">Repeat?</input_port>
            <output_port default="audio_speech_result" name="result">Audio speech action result. Only once when the action finish</output_port>
            <input_port name="speech_file">Name of the file to play (absolute or relative) in music channel. Audio file must have .wav extension</input_port>
            <input_port default="0" name="start_time">Time to start audio play. If this and &quot;end_time&quot; are 0 the entire file will be played [milliseconds]</input_port>
            <input_port default="1" name="volume">Audio volume [0 - 1]</input_port>
        </SubTree>
        <SubTree ID="HaruAudioStop">
            <input_port default="0" name="channel_id">0: music channel; 1: speech channel; 2: aux channel ...</input_port>
            <input_port default="0.0" name="fade_out_duration">Time for the audio to fade when stopping in seconds. Ignored if field fade_out_enable set to false</input_port>
            <input_port default="0" name="fade_out_enable">Enable/Disable fade when stopping the audio [1/0]</input_port>
        </SubTree>
        <SubTree ID="HaruChangeAudioChannelVolume">
            <input_port name="channel_id">0: music channel; 1: speech channel; 2: aux channel ...</input_port>
            <input_port name="do_fade">set [1 or 0] to perform the volume change linearly during fade_duration</input_port>
            <input_port name="fade_duration">the duration [secs] of the volume change if do_fade is true</input_port>
            <input_port name="volume">target volume [0.0 to 1.0]</input_port>
        </SubTree>
        <SubTree ID="HaruCheckTelegramUserByID">
            <output_port name="success">User is in database or not</output_port>
            <input_port name="user_id">ID of telegram user to check in database</input_port>
        </SubTree>
        <SubTree ID="HaruCheckTelegramUserByName">
            <output_port name="success">User is in database or not</output_port>
            <input_port name="user_name">Name of the user to check in telegram users database</input_port>
        </SubTree>
        <Action ID="HaruClassifyYesNoFromText">
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [[haru_nlp_ros::ClassifyYesNoFromTextResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
            <input_port name="transcription" type="std::string">Auto-generated field from haru_nlp_ros::ClassifyYesNoFromTextRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <Action ID="HaruCommandASR">
            <input_port name="command" type="std::string">Command Type</input_port>
            <output_port name="status" type="bool">Status of the Command</output_port>
        </Action>
        <Action ID="HaruCommandAudio">
            <input_port name="channel" type="unsigned char">Auto-generated field from idmind_tabletop_msgs::AudioCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="command" type="unsigned char">Auto-generated field from idmind_tabletop_msgs::AudioCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="end_time" type="unsigned int">Auto-generated field from idmind_tabletop_msgs::AudioCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="fade_in" type="bool">Auto-generated field from idmind_tabletop_msgs::AudioCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="fade_in_duration" type="float">Auto-generated field from idmind_tabletop_msgs::AudioCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="fade_out" type="bool">Auto-generated field from idmind_tabletop_msgs::AudioCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="fade_out_duration" type="float">Auto-generated field from idmind_tabletop_msgs::AudioCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="file" type="std::string">Auto-generated field from idmind_tabletop_msgs::AudioCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port default="0" name="latch" type="bool">Latch messages?</input_port>
            <input_port name="loop" type="bool">Auto-generated field from idmind_tabletop_msgs::AudioCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Internal publisher queue size</input_port>
            <input_port name="start_time" type="unsigned int">Auto-generated field from idmind_tabletop_msgs::AudioCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="topic" type="std::string">Topic to publish to</input_port>
            <input_port name="volume" type="float">Auto-generated field from idmind_tabletop_msgs::AudioCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <Action ID="HaruCommandAudioMusicAction">
            <input_port name="action" type="std::string">Actionlib action server name</input_port>
            <input_port name="end_time" type="unsigned int">Auto-generated field from idmind_tabletop_msgs::AudioMusicGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="fade" type="bool">Auto-generated field from idmind_tabletop_msgs::AudioMusicGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="fade_duration" type="float">Auto-generated field from idmind_tabletop_msgs::AudioMusicGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="fade_out" type="bool">Auto-generated field from idmind_tabletop_msgs::AudioMusicGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="fade_out_duration" type="float">Auto-generated field from idmind_tabletop_msgs::AudioMusicGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="file" type="std::string">Auto-generated field from idmind_tabletop_msgs::AudioMusicGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="loop" type="bool">Auto-generated field from idmind_tabletop_msgs::AudioMusicGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_feedback" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::AudioMusicFeedback_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="serialized_result" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::AudioMusicResult_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="start_time" type="unsigned int">Auto-generated field from idmind_tabletop_msgs::AudioMusicGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="state" type="actionlib::SimpleClientGoalState">Actionlib reported state</output_port>
            <input_port name="volume" type="float">Auto-generated field from idmind_tabletop_msgs::AudioMusicGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <Action ID="HaruCommandAudioSpeechAction">
            <input_port name="action" type="std::string">Actionlib action server name</input_port>
            <input_port name="end_time" type="unsigned int">Auto-generated field from idmind_tabletop_msgs::AudioSpeechGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="fade" type="bool">Auto-generated field from idmind_tabletop_msgs::AudioSpeechGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="fade_duration" type="float">Auto-generated field from idmind_tabletop_msgs::AudioSpeechGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="fade_out" type="bool">Auto-generated field from idmind_tabletop_msgs::AudioSpeechGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="fade_out_duration" type="float">Auto-generated field from idmind_tabletop_msgs::AudioSpeechGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="file" type="std::string">Auto-generated field from idmind_tabletop_msgs::AudioSpeechGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="loop" type="bool">Auto-generated field from idmind_tabletop_msgs::AudioSpeechGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_feedback" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::AudioSpeechFeedback_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="serialized_result" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::AudioSpeechResult_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="start_time" type="unsigned int">Auto-generated field from idmind_tabletop_msgs::AudioSpeechGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="state" type="actionlib::SimpleClientGoalState">Actionlib reported state</output_port>
            <input_port name="volume" type="float">Auto-generated field from idmind_tabletop_msgs::AudioSpeechGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <Action ID="HaruCommandConfigureAudioOnline">
            <input_port name="channel_id" type="unsigned char">Auto-generated field from idmind_tabletop_msgs::ConfigureAudioOnlineRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="do_fade" type="bool">Auto-generated field from idmind_tabletop_msgs::ConfigureAudioOnlineRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="fade_duration" type="float">Auto-generated field from idmind_tabletop_msgs::ConfigureAudioOnlineRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::ConfigureAudioOnlineResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
            <input_port name="volume" type="float">Auto-generated field from idmind_tabletop_msgs::ConfigureAudioOnlineRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <Action ID="HaruCommandCountTime">
            <input_port name="command.data" type="unsigned char">Auto-generated field from idmind_tabletop_msgs::CountTimeRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::CountTimeResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
            <input_port name="timer_id.data" type="unsigned char">Auto-generated field from idmind_tabletop_msgs::CountTimeRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <Action ID="HaruCommandEyes">
            <input_port name="eye" type="unsigned char">Auto-generated field from idmind_tabletop_msgs::EyesCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port default="0" name="latch" type="bool">Latch messages?</input_port>
            <input_port name="play_time" type="unsigned int">Auto-generated field from idmind_tabletop_msgs::EyesCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="pos_x" type="double">Auto-generated field from idmind_tabletop_msgs::EyesCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="pos_y" type="double">Auto-generated field from idmind_tabletop_msgs::EyesCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Internal publisher queue size</input_port>
            <input_port name="smooth" type="bool">Auto-generated field from idmind_tabletop_msgs::EyesCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="topic" type="std::string">Topic to publish to</input_port>
        </Action>
        <Action ID="HaruCommandGetQRReading">
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::GetQRReadingResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
            <input_port name="timeout" type="float">Auto-generated field from idmind_tabletop_msgs::GetQRReadingRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <SubTree ID="HaruCommandJoints">
            <input_port default="base" name="motor">Motor name to move: base, neck, head, roll or stroke</input_port>
            <input_port default="0.0" name="pos">Angle in radians to move. Stroke movement is in meters.</input_port>
            <input_port default="false" name="rel">False is absolute movement, true is relative.</input_port>
            <input_port default="200" name="time">Time to do the movement in centiseconds. Default value is 2 seconds.</input_port>
        </SubTree>
        <Action ID="HaruCommandLCD">
            <input_port name="backlight" type="bool">Auto-generated field from idmind_tabletop_msgs::LCDCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="command" type="unsigned char">Auto-generated field from idmind_tabletop_msgs::LCDCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="disable_eyes_roll_sync" type="bool">Auto-generated field from idmind_tabletop_msgs::LCDCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="end_time" type="unsigned int">Auto-generated field from idmind_tabletop_msgs::LCDCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port default="0" name="latch" type="bool">Latch messages?</input_port>
            <input_port name="left_eye_file" type="std::string">Auto-generated field from idmind_tabletop_msgs::LCDCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="loop" type="bool">Auto-generated field from idmind_tabletop_msgs::LCDCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Internal publisher queue size</input_port>
            <input_port name="right_eye_file" type="std::string">Auto-generated field from idmind_tabletop_msgs::LCDCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="skip_factor" type="unsigned char">Auto-generated field from idmind_tabletop_msgs::LCDCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="start_time" type="unsigned int">Auto-generated field from idmind_tabletop_msgs::LCDCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="topic" type="std::string">Topic to publish to</input_port>
            <input_port name="transparency" type="bool">Auto-generated field from idmind_tabletop_msgs::LCDCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="wait_to_finish" type="bool">Auto-generated field from idmind_tabletop_msgs::LCDCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <Action ID="HaruCommandLCDAction">
            <input_port name="action" type="std::string">Actionlib action server name</input_port>
            <input_port name="end_time" type="unsigned int">Auto-generated field from idmind_tabletop_msgs::LCDGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="left_eye_file" type="std::string">Auto-generated field from idmind_tabletop_msgs::LCDGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="loop" type="bool">Auto-generated field from idmind_tabletop_msgs::LCDGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="right_eye_file" type="std::string">Auto-generated field from idmind_tabletop_msgs::LCDGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_feedback" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::LCDFeedback_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="serialized_result" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::LCDResult_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="start_time" type="unsigned int">Auto-generated field from idmind_tabletop_msgs::LCDGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="state" type="actionlib::SimpleClientGoalState">Actionlib reported state</output_port>
            <input_port name="wait_to_finish" type="bool">Auto-generated field from idmind_tabletop_msgs::LCDGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <Action ID="HaruCommandLEDs">
            <input_port name="action" type="unsigned char">Auto-generated field from idmind_tabletop_msgs::LedsCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="brightness" type="double">Auto-generated field from idmind_tabletop_msgs::LedsCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="file" type="std::string">Auto-generated field from idmind_tabletop_msgs::LedsCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="fps" type="double">Auto-generated field from idmind_tabletop_msgs::LedsCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="jump_factor" type="unsigned char">Auto-generated field from idmind_tabletop_msgs::LedsCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port default="0" name="latch" type="bool">Latch messages?</input_port>
            <input_port name="loop" type="bool">Auto-generated field from idmind_tabletop_msgs::LedsCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Internal publisher queue size</input_port>
            <input_port name="topic" type="std::string">Topic to publish to</input_port>
            <input_port name="type" type="unsigned char">Auto-generated field from idmind_tabletop_msgs::LedsCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <Action ID="HaruCommandLookAt">
            <input_port name="base_control_vel" type="bool">Auto-generated field from idmind_tabletop_msgs::LookAtRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="disable_base" type="bool">Auto-generated field from idmind_tabletop_msgs::LookAtRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="disable_eyes" type="bool">Auto-generated field from idmind_tabletop_msgs::LookAtRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="disable_head" type="bool">Auto-generated field from idmind_tabletop_msgs::LookAtRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="disable_neck" type="bool">Auto-generated field from idmind_tabletop_msgs::LookAtRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="objective.header.frame_id" type="std::string">Auto-generated field from idmind_tabletop_msgs::LookAtRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="objective.header.seq" type="unsigned int">Auto-generated field from idmind_tabletop_msgs::LookAtRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="objective.point.x" type="double">Auto-generated field from idmind_tabletop_msgs::LookAtRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="objective.point.y" type="double">Auto-generated field from idmind_tabletop_msgs::LookAtRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="objective.point.z" type="double">Auto-generated field from idmind_tabletop_msgs::LookAtRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="HaruCommandMotor">
            <input_port name="disable_eyes_roll_sync" type="bool">Auto-generated field from idmind_tabletop_msgs::MotorCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port default="0" name="latch" type="bool">Latch messages?</input_port>
            <input_port name="motor" type="unsigned char">Auto-generated field from idmind_tabletop_msgs::MotorCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="play_time" type="unsigned char">Auto-generated field from idmind_tabletop_msgs::MotorCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="position" type="double">Auto-generated field from idmind_tabletop_msgs::MotorCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Internal publisher queue size</input_port>
            <input_port name="relative" type="bool">Auto-generated field from idmind_tabletop_msgs::MotorCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="topic" type="std::string">Topic to publish to</input_port>
        </Action>
        <Action ID="HaruCommandMotorVelocity">
            <input_port default="0" name="latch" type="bool">Latch messages?</input_port>
            <input_port name="motor" type="unsigned char">Auto-generated field from idmind_tabletop_msgs::MotorCommandVelocity_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="play_time" type="unsigned char">Auto-generated field from idmind_tabletop_msgs::MotorCommandVelocity_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Internal publisher queue size</input_port>
            <input_port name="topic" type="std::string">Topic to publish to</input_port>
            <input_port name="velocity" type="double">Auto-generated field from idmind_tabletop_msgs::MotorCommandVelocity_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <Action ID="HaruCommandMultiRoutine">
            <input_port name="routine_command" type="std::string">Auto-generated field from idmind_tabletop_msgs::MultiRoutineRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="HaruCommandMultiRoutineAction">
            <input_port name="action" type="std::string">Actionlib action server name</input_port>
            <input_port name="routine_command" type="std::string">Auto-generated field from idmind_tabletop_msgs::MultiRoutineGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_feedback" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::MultiRoutineFeedback_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="serialized_result" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::MultiRoutineResult_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="state" type="actionlib::SimpleClientGoalState">Actionlib reported state</output_port>
        </Action>
        <Action ID="HaruCommandProjector">
            <input_port name="backlight" type="bool">Auto-generated field from idmind_tabletop_msgs::ProjectorCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="command" type="unsigned char">Auto-generated field from idmind_tabletop_msgs::ProjectorCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="end_time" type="unsigned int">Auto-generated field from idmind_tabletop_msgs::ProjectorCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="keep_last_frame" type="bool">Auto-generated field from idmind_tabletop_msgs::ProjectorCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port default="0" name="latch" type="bool">Latch messages?</input_port>
            <input_port name="loop" type="bool">Auto-generated field from idmind_tabletop_msgs::ProjectorCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="projector_file" type="std::string">Auto-generated field from idmind_tabletop_msgs::ProjectorCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Internal publisher queue size</input_port>
            <input_port name="scale_type" type="unsigned char">Auto-generated field from idmind_tabletop_msgs::ProjectorCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="skip_factor" type="unsigned char">Auto-generated field from idmind_tabletop_msgs::ProjectorCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="start_time" type="unsigned int">Auto-generated field from idmind_tabletop_msgs::ProjectorCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="topic" type="std::string">Topic to publish to</input_port>
            <input_port name="transparency" type="bool">Auto-generated field from idmind_tabletop_msgs::ProjectorCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="wait_to_finish" type="bool">Auto-generated field from idmind_tabletop_msgs::ProjectorCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <Action ID="HaruCommandProjectorAction">
            <input_port name="action" type="std::string">Actionlib action server name</input_port>
            <input_port name="end_time" type="unsigned int">Auto-generated field from idmind_tabletop_msgs::ProjectorGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="file" type="std::string">Auto-generated field from idmind_tabletop_msgs::ProjectorGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="keep_last_frame" type="bool">Auto-generated field from idmind_tabletop_msgs::ProjectorGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="loop" type="bool">Auto-generated field from idmind_tabletop_msgs::ProjectorGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="scale_type" type="unsigned char">Auto-generated field from idmind_tabletop_msgs::ProjectorGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_feedback" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::ProjectorFeedback_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="serialized_result" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::ProjectorResult_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="start_time" type="unsigned int">Auto-generated field from idmind_tabletop_msgs::ProjectorGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="state" type="actionlib::SimpleClientGoalState">Actionlib reported state</output_port>
            <input_port name="wait_to_finish" type="bool">Auto-generated field from idmind_tabletop_msgs::ProjectorGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <Action ID="HaruCommandRoutine">
            <input_port name="routine" type="unsigned int">Auto-generated field from idmind_tabletop_msgs::RoutineRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="HaruCommandRoutineAction">
            <input_port name="action" type="std::string">Actionlib action server name</input_port>
            <input_port name="id" type="unsigned int">Auto-generated field from idmind_tabletop_msgs::RoutineGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_feedback" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::RoutineFeedback_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="serialized_result" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::RoutineResult_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="state" type="actionlib::SimpleClientGoalState">Actionlib reported state</output_port>
        </Action>
        <Action ID="HaruCommandSaveImage">
            <input_port name="file" type="std::string">Auto-generated field from idmind_tabletop_msgs::SaveImageRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::SaveImageResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
            <input_port name="topic" type="std::string">Auto-generated field from idmind_tabletop_msgs::SaveImageRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <Action ID="HaruCommandSetLanguage">
            <input_port name="language" type="std::string">Auto-generated field from idmind_tabletop_msgs::SetLanguageRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="HaruCommandSetVoice">
            <input_port name="service" type="std::string">ROS service name</input_port>
            <input_port name="voice" type="std::string">Auto-generated field from idmind_tabletop_msgs::SetVoiceRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <Action ID="HaruCommandSwitchAudioDucking">
            <input_port name="enable" type="bool">Auto-generated field from idmind_tabletop_msgs::SwitchAudioDuckingRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="main_channel_id" type="unsigned int">Auto-generated field from idmind_tabletop_msgs::SwitchAudioDuckingRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::SwitchAudioDuckingResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="HaruCommandTTS">
            <input_port default="0" name="latch" type="bool">Latch messages?</input_port>
            <input_port name="message" type="std::string">TTS input text</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Internal publisher queue size</input_port>
            <input_port name="topic" type="std::string">Topic to publish to</input_port>
        </Action>
        <Action ID="HaruCommandTTSAction">
            <input_port name="action" type="std::string">Actionlib action server name</input_port>
            <input_port name="message" type="std::string">TTS input text</input_port>
            <output_port name="serialized_feedback" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::TTSFeedback_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="serialized_result" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::TTSResult_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="state" type="actionlib::SimpleClientGoalState">Actionlib reported state</output_port>
        </Action>
        <Action ID="HaruCommandTTSService">
            <input_port name="message" type="std::string">TTS input text</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::TTSServiceResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="HaruCommandTelegramCheckUserByID">
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::TelegramCheckUserByIDResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
            <input_port name="user_id" type="unsigned long">Auto-generated field from idmind_tabletop_msgs::TelegramCheckUserByIDRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <Action ID="HaruCommandTelegramCheckUserByName">
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::TelegramCheckUserByNameResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
            <input_port name="user_name" type="std::string">Auto-generated field from idmind_tabletop_msgs::TelegramCheckUserByNameRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <Action ID="HaruCommandTelegramGetNewMsg">
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::TelegramGetNewMsgResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="HaruCommandTelegramGetUserList">
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::TelegramGetUserListResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="HaruCommandTelegramMarkAsRead">
            <input_port name="msg_id" type="long">Auto-generated field from idmind_tabletop_msgs::TelegramMarkAsReadRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::TelegramMarkAsReadResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="HaruCommandTelegramSendAudio">
            <input_port name="chat_id" type="long">Auto-generated field from idmind_tabletop_msgs::TelegramSendAudioRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="file_path" type="std::string">Auto-generated field from idmind_tabletop_msgs::TelegramSendAudioRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::TelegramSendAudioResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="HaruCommandTelegramSendImage">
            <input_port name="accepted" type="bool">Auto-generated field from idmind_tabletop_msgs::TelegramSendImageRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="camera_topic_name" type="std::string">Auto-generated field from idmind_tabletop_msgs::TelegramSendImageRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="chat_id" type="long">Auto-generated field from idmind_tabletop_msgs::TelegramSendImageRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::TelegramSendImageResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="HaruCommandTelegramSendText">
            <input_port name="chat_id" type="long">Auto-generated field from idmind_tabletop_msgs::TelegramSendTextRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::TelegramSendTextResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
            <input_port name="text" type="std::string">Auto-generated field from idmind_tabletop_msgs::TelegramSendTextRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <Action ID="HaruCommandTrack">
            <input_port name="command" type="unsigned char">Auto-generated field from idmind_tabletop_msgs::TrackCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port default="0" name="latch" type="bool">Latch messages?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Internal publisher queue size</input_port>
            <input_port name="topic" type="std::string">Topic to publish to</input_port>
            <input_port name="track_frame" type="std::string">Auto-generated field from idmind_tabletop_msgs::TrackCommand_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <SubTree ID="HaruExecuteMultiRoutine">
            <input_port name="command">Multi routine command</input_port>
        </SubTree>
        <SubTree ID="HaruExecuteMultiRoutineAndWait">
            <input_port name="command">Multi routine command</input_port>
            <output_port default="multi_routine_feed" name="feedback">Multi routine action feedback. Filled when action is running</output_port>
            <output_port default="multi_routine_result" name="result">Multi routine action result. Only once when the action finish</output_port>
        </SubTree>
        <SubTree ID="HaruExecuteRoutine">
            <input_port name="routines">List of routines to play. Random choose between senteces separeted by ;</input_port>
        </SubTree>
        <SubTree ID="HaruExecuteRoutineAndWait">
            <output_port default="routine_feed" name="feedback">Routine action feedback. Filled when action is running</output_port>
            <output_port default="routine_result" name="result">Routine action result. Only once when the action finish</output_port>
            <input_port name="routines">List of routines to play. Random choose between senteces separeted by ;</input_port>
        </SubTree>
        <SubTree ID="HaruGetClosestPerson">
            <output_port name="closest_person">Closest person to the robot</output_port>
            <input_port name="people">People in scene</input_port>
            <input_port name="people_header">Header people in scene</input_port>
        </SubTree>
        <SubTree ID="HaruGetClosestPersonFacingRobot">
            <output_port name="closest_person">Closest person to the robot and looking at it</output_port>
            <input_port name="max_angle">Maximum angle btwn the person face and the robot to accept that person</input_port>
            <input_port name="min_angle">Minimum angle btwn the person face and the robot to accept that person</input_port>
            <input_port name="people">People in scene</input_port>
            <input_port name="people_header">Header of people in scene</input_port>
            <input_port name="selected_angle">Select between roll, pitch, yaw</input_port>
        </SubTree>
        <SubTree ID="HaruGetFastestTF">
            <output_port name="person_id">ID of the person whom this TF belongs</output_port>
            <output_port name="speed">Linear velocity of this TF [m/s]</output_port>
            <output_port name="tf_frame_id">TF Full path</output_port>
        </SubTree>
        <Action ID="HaruGetHumor">
            <output_port name="humor" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Formatted Humor</output_port>
            <input_port name="humor_type" type="std::string">Type of Humor</input_port>
        </Action>
        <SubTree ID="HaruGetNewTelegramMsg">
            <output_port default="msg_audio_file_path" name="msg_audio_file_path">Received audio file absolute path</output_port>
            <output_port default="msg_audio_transcription" name="msg_audio_transcription">The audio transciption string</output_port>
            <output_port default="msg_emoji" name="msg_emoji">Emoji as string</output_port>
            <output_port default="msg_emoji_routine_id" name="msg_emoji_routine_id">Recommend routine for this emoji</output_port>
            <output_port default="msg_harumoji" name="msg_harumoji">Harumoji description</output_port>
            <output_port default="msg_harumoji_routine_id" name="msg_harumoji_routine_id">Recommended routine for this Harumoji</output_port>
            <output_port default="msg_id" name="msg_id">Unique ID of this msg for this telegram bot</output_port>
            <output_port default="msg_is_audio_transcribed" name="msg_is_audio_transcribed">True if the audio file transcription is enabled and was a success</output_port>
            <output_port default="msg_photo_file_path" name="msg_photo_file_path">Path to the received photo file</output_port>
            <output_port default="msg_text" name="msg_text">Text message string</output_port>
            <output_port default="msg_timestamp" name="msg_timestamp">Timestamp of this msg when it was received from the phone</output_port>
            <output_port default="msg_type" name="msg_type">Type of the message (text, audio, photo). Check the idmind_tabletop::TelegramMsg message definiton</output_port>
            <output_port default="num_msgs" name="num_msgs">Number of messages currently stored in the Telegram Server</output_port>
            <output_port default="num_unread_msgs" name="num_unread_msgs">Number of unread messages currently stored in the Telegram Server</output_port>
            <output_port default="user_chat_id" name="user_chat_id">Telegram chat ID of the user</output_port>
            <output_port default="user_firstname" name="user_firstname">First name of the user</output_port>
            <output_port default="user_name" name="user_name">Nick name of the user</output_port>
        </SubTree>
        <SubTree ID="HaruGetPersonDistance">
            <output_port name="distance">Distance from Haru to the person</output_port>
            <input_port name="frame_id">Namespace of body parts</input_port>
            <input_port name="person">Target person</input_port>
        </SubTree>
        <SubTree ID="HaruGetPersonHeadAngles">
            <input_port name="frame_id">Namespace of body parts</input_port>
            <input_port name="person">Target person</input_port>
            <output_port name="pitch">Person Head pitch respect to Haru</output_port>
            <output_port name="roll">Person Head roll respect to Haru</output_port>
            <output_port name="yaw">Person Head yaw respect to Haru</output_port>
        </SubTree>
        <SubTree ID="HaruGetPersonSpeech">
            <input_port name="person">Target person</input_port>
            <output_port name="speaker_confidence">Confidence about this speech belongs to this person</output_port>
            <output_port name="transcript_confidence">Speech transcription confidence</output_port>
            <output_port name="transcript_text">Speech transcription</output_port>
        </SubTree>
        <SubTree ID="HaruGetQRInfo">
            <input_port name="qr_info"/>
            <input_port name="timeout"/>
        </SubTree>
        <SubTree ID="HaruGetSpeakingPerson">
            <input_port name="people">People in scene</input_port>
            <output_port name="speaking_person">Speaking Person with hightest confidence</output_port>
        </SubTree>
        <SubTree ID="HaruGetTelegramUserList">
            <output_port name="success">True if the user list is not empty</output_port>
            <output_port name="user_list">JSON of current known user list as [{&quot;id&quot;: &quot;1234&quot;, &quot;username&quot;: &quot;ForExample&quot;, &quot;firstname&quot;: &quot;Example&quot;, &quot;akas&quot;:[&quot;Test&quot;,&quot;Try&quot;, ...]}, ...]</output_port>
        </SubTree>
        <Action ID="HaruGetTrivia">
            <output_port name="trivia" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Formatted Trivia</output_port>
            <input_port name="trivia_type" type="std::string">Type of Trivia</input_port>
        </Action>
        <SubTree ID="HaruGoHome"/>
        <SubTree ID="HaruLCDVideos">
            <input_port name="left_eye">Video for left eye from robot POV.</input_port>
            <input_port name="right_eye">Video for right eye from robot POV.</input_port>
        </SubTree>
        <SubTree ID="HaruLCDVideosAndWait">
            <input_port default="0" name="end_time">Time to stop LCD video play. Must be equal or higher than &quot;start_time&quot;. [milliseconds]</input_port>
            <output_port default="lcd_feed" name="feedback">LCD action feedback. Filled when action is running</output_port>
            <input_port name="left_eye">Video for left eye from robot POV.</input_port>
            <input_port default="0" name="loop">Play in loop?</input_port>
            <output_port default="lcd_result" name="result">LCD action result. Only once when the action finish</output_port>
            <input_port name="right_eye">Video for right eye from robot POV.</input_port>
            <input_port default="0" name="start_time">Time to start LCD video play. If this and &quot;end_time&quot; are 0 the entire file will be played [milliseconds]</input_port>
        </SubTree>
        <SubTree ID="HaruLCDVideosStop"/>
        <SubTree ID="HaruLEDsEyesPlay">
            <input_port name="eyes_file">File name to play in eyes. Only supports Gif files.</input_port>
        </SubTree>
        <SubTree ID="HaruLEDsMouthPlay">
            <input_port name="mouth_file">File to play in mouth. Only supports Gif files.</input_port>
        </SubTree>
        <SubTree ID="HaruLEDsStop">
            <input_port default="mouth" name="part">Stop executing Gif. mouth to stop the mouth, and eyes to stop the eyes.</input_port>
        </SubTree>
        <SubTree ID="HaruListensEveryone"/>
        <SubTree ID="HaruListensNobody"/>
        <SubTree ID="HaruListensPerson">
            <input_port name="person">Person to listen</input_port>
        </SubTree>
        <SubTree ID="HaruLookAt">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port default="false" name="base_control_vel">Enable/DIsable base velocity controller</input_port>
            <input_port default="false" name="disable_base">Disable/Enable base movement. True to disable</input_port>
            <input_port default="false" name="disable_eyes">Disable/Enable LCD eyes movement. True to disable</input_port>
            <input_port default="false" name="disable_head">Disable/Enable head movement. True to disable</input_port>
            <input_port default="false" name="disable_neck">Disable/Enable neck movement. True to disable</input_port>
            <input_port default="1.0" name="high">Positive up, negative down. (Z)</input_port>
            <input_port default="0.0" name="horizontal">Positive forward, negative backwards. From robot POV. (X)</input_port>
            <input_port default="1.0" name="proximity">Positive left, negative right. From robot POV. (Y)</input_port>
        </SubTree>
        <SubTree ID="HaruMarkTelegramMsgAsRead">
            <input_port name="msg_id">The unique ID of the message that you want to mark as already read</input_port>
            <output_port name="success">Service result, true it the message exists and it was marked as result or it was already a read message</output_port>
        </SubTree>
        <Action ID="HaruMonitorAudio">
            <input_port default="0" name="consume_msgs" type="bool">Should messages be consumed?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Subscriber callback queue size</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::AudioStatus_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="topic" type="std::string">Topic to subscribe</input_port>
        </Action>
        <Action ID="HaruMonitorBrowser">
            <input_port default="0" name="consume_msgs" type="bool">Should messages be consumed?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Subscriber callback queue size</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::ProjectorStatus_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="topic" type="std::string">Topic to subscribe</input_port>
        </Action>
        <Action ID="HaruMonitorFastestTF">
            <input_port default="0" name="consume_msgs" type="bool">Should messages be consumed?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Subscriber callback queue size</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::TFSpeed_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="topic" type="std::string">Topic to subscribe</input_port>
        </Action>
        <Action ID="HaruMonitorLCD">
            <input_port default="0" name="consume_msgs" type="bool">Should messages be consumed?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Subscriber callback queue size</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::LCDStatus_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="topic" type="std::string">Topic to subscribe</input_port>
        </Action>
        <Action ID="HaruMonitorProjector">
            <input_port default="0" name="consume_msgs" type="bool">Should messages be consumed?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Subscriber callback queue size</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::ProjectorStatus_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="topic" type="std::string">Topic to subscribe</input_port>
        </Action>
        <Action ID="HaruMonitorRoutine">
            <input_port default="0" name="consume_msgs" type="bool">Should messages be consumed?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Subscriber callback queue size</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::RoutineStatus_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="topic" type="std::string">Topic to subscribe</input_port>
        </Action>
        <Action ID="HaruMonitorTTS">
            <input_port default="0" name="consume_msgs" type="bool">Should messages be consumed?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Subscriber callback queue size</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::TTSStatus_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="topic" type="std::string">Topic to subscribe</input_port>
        </Action>
        <Action ID="HaruMonitorTrack">
            <input_port default="0" name="consume_msgs" type="bool">Should messages be consumed?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Subscriber callback queue size</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::TrackStatus_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="topic" type="std::string">Topic to subscribe</input_port>
        </Action>
        <SubTree ID="HaruNlpYesNo">
            <output_port name="answer">Yes or no answer</output_port>
            <input_port name="transcription">Text to processs</input_port>
        </SubTree>
        <SubTree ID="HaruProjectorCloseWeb"/>
        <SubTree ID="HaruProjectorImage">
            <input_port default="0" name="always">Show the image always? If set to true, &quot;img_duration&quot; will be ignored</input_port>
            <input_port name="img_duration">Time to show the image [milliseconds]</input_port>
            <input_port name="img_file">Name of the image to show (absolute or relative). Must include file extension.</input_port>
            <input_port default="1" name="img_scale">0: real resolution respect to the monitor; 1: scale to the limit of the monitor resolution keeping the original proportions, 2: scale to the limit of the monitor resolution without keeping original proportions</input_port>
        </SubTree>
        <SubTree ID="HaruProjectorImageAndWait">
            <input_port name="duration">Time to show the image [milliseconds]</input_port>
            <output_port default="projector_image_feed" name="feedback">Projector action feedback. Filled when action is running</output_port>
            <input_port name="image_file">Name of the image to show (absolute or relative). Must include file extension.</input_port>
            <input_port default="1" name="image_scale">0: real resolution respect to the monitor; 1: scale to the limit of the monitor resolution keeping the original proportions, 2: scale to the limit of the monitor resolution without keeping original proportions</input_port>
            <input_port default="1" name="keep_last">Keep last frame on projector? 0: no  1: yes</input_port>
            <input_port default="0" name="loop">Show the image always? If set to true, &quot;duration&quot; will be ignored</input_port>
            <output_port default="projector_image_result" name="result">Projector action result. Only once when the action finish</output_port>
        </SubTree>
        <SubTree ID="HaruProjectorShowLastWeb"/>
        <SubTree ID="HaruProjectorShowWeb">
            <input_port name="url">URL of website to show</input_port>
        </SubTree>
        <SubTree ID="HaruProjectorStop"/>
        <SubTree ID="HaruProjectorVideo">
            <input_port default="0" name="end_time">Time to stop video play. Must be equal or higher than &quot;start_time&quot;. [milliseconds]</input_port>
            <input_port default="1" name="keep_last">Keep last frame on projector? 0: no  1: yes</input_port>
            <input_port default="0" name="loop">Play in loop?</input_port>
            <input_port default="0" name="start_time">Time to start video play. If this and &quot;end_time&quot; are 0 the entire file will be played [milliseconds]</input_port>
            <input_port name="video_file">Name of the video to play (absolute or relative). Must include file extension.</input_port>
            <input_port default="1" name="video_scale">0: real resolution respect to the monitor; 1: scale to the limit of the monitor resolution keeping the original proportions, 2: scale to the limit of the monitor resolution without keeping original proportions</input_port>
        </SubTree>
        <SubTree ID="HaruProjectorVideoAndWait">
            <input_port default="0" name="end_time">Time to stop video play. Must be equal or higher than &quot;start_time&quot;. [milliseconds]</input_port>
            <output_port default="projector_video_feed" name="feedback">Projector action feedback. Filled when action is running</output_port>
            <input_port default="1" name="keep_last">Keep last frame on projector? 0: no  1: yes</input_port>
            <input_port default="0" name="loop">Play in loop?</input_port>
            <output_port default="projector_video_result" name="result">Projector action result. Only once when the action finish</output_port>
            <input_port default="0" name="start_time">Time to start video play. If this and &quot;end_time&quot; are 0 the entire file will be played [milliseconds]</input_port>
            <input_port name="video_file">Name of the video to play (absolute or relative). Must include file extension.</input_port>
            <input_port default="1" name="video_scale">0: real resolution respect to the monitor; 1: scale to the limit of the monitor resolution keeping the original proportions, 2: scale to the limit of the monitor resolution without keeping original proportions</input_port>
        </SubTree>
        <Action ID="HaruPublishASRCommand">
            <input_port name="command" type="std::string">Command Type</input_port>
        </Action>
        <SubTree ID="HaruReadQR">
            <output_port name="qr_content">Content of the QR code detected</output_port>
            <input_port default="10.0" name="timeout">Max time to detect a QR code [seconds]</input_port>
        </SubTree>
        <SubTree ID="HaruReceptionMainWebPage">
            <output_port default="web_success" name="success">Webpage set or not [1/0]</output_port>
            <output_port default="website_url" name="website_url">Website url</output_port>
        </SubTree>
        <SubTree ID="HaruReceptionMeetingWebPage">
            <input_port name="guest_name">Name of the guest. Only one person</input_port>
            <input_port name="hosts">Hosts for the meeting. Up to two names separeted by ;</input_port>
            <input_port name="meeting_end">Time the meeting ends</input_port>
            <input_port name="meeting_name">Name of the meeting</input_port>
            <input_port name="meeting_start">Time the meeting starts</input_port>
            <input_port name="room">Name of the room where the meeting is held</input_port>
            <output_port default="web_success" name="success">Website set or not [1/0]</output_port>
            <output_port default="website_url" name="website_url">Website URL</output_port>
        </SubTree>
        <SubTree ID="HaruReceptionProfileWebPage">
            <input_port name="company">Name of the guest's company</input_port>
            <input_port name="guest_name">Name of the guest</input_port>
            <input_port name="image_path">Full path of the image for the guest profile</input_port>
            <input_port name="position">Position of the guest inside its company</input_port>
            <output_port default="web_success" name="success">Web set or not [1/0]</output_port>
            <output_port default="website_url" name="website_url">Website URL</output_port>
        </SubTree>
        <SubTree ID="HaruReceptionQRWebPage">
            <output_port default="web_success" name="success">Web set or not [1/0]</output_port>
            <output_port default="website_url" name="website_url">Website URL</output_port>
        </SubTree>
        <SubTree ID="HaruReceptionWeatherWebPage">
            <output_port default="web_success" name="success">Web set or not [1/0]</output_port>
            <output_port default="website_url" name="website_url">Website URL</output_port>
        </SubTree>
        <SubTree ID="HaruReceptionWelcomeWebPage">
            <output_port default="web_success" name="success">Web set or not [1/0]</output_port>
            <output_port default="website_url" name="website_url">Website URL</output_port>
        </SubTree>
        <SubTree ID="HaruReceptionWifiWebPage">
            <input_port name="network">Name of the WiFi network</input_port>
            <input_port name="password">Password of the WiFi network</input_port>
            <output_port default="success" name="success">Web created or not</output_port>
            <output_port default="website_url" name="website_url">URL of website created</output_port>
        </SubTree>
        <SubTree ID="HaruSendTelegramAudio">
            <input_port name="chat_id">Telegram user chat ID to send the audio file</input_port>
            <input_port name="file_path">Full Path to the audio file</input_port>
            <output_port name="success">True if the audio was sent successfully</output_port>
        </SubTree>
        <SubTree ID="HaruSendTelegramImage">
            <input_port name="accepted">Set to 1 if you have accepted to send the image or 0 otherwise</input_port>
            <input_port name="camera_topic">ROS Image Topic to be used to send the image to the phone</input_port>
            <input_port name="chat_id">Telegram user chat id</input_port>
            <output_port name="success">True if the image was sent correctly</output_port>
        </SubTree>
        <SubTree ID="HaruSendTelegramText">
            <input_port name="chat_id">Telegram user chat id to send the text to</input_port>
            <output_port name="success">True if the text was sent correctly</output_port>
            <input_port name="text">The text message to send to</input_port>
        </SubTree>
        <SubTree ID="HaruSetLanguage">
            <input_port name="language">Language to set. Supported languages &quot;en&quot;, &quot;es&quot; and &quot;ja&quot; for English, Spanish and Japanese</input_port>
        </SubTree>
        <SubTree ID="HaruSetVoice">
            <input_port name="voice">Name of the voice to set</input_port>
        </SubTree>
        <SubTree ID="HaruSpeakExpressive">
            <input_port name="text">Text to process</input_port>
        </SubTree>
        <SubTree ID="HaruSpeaksEmoTTSAndWait">
            <output_port default="tts_feed" name="feedback">TTS action feedback. Filled when action is running</output_port>
            <input_port name="genre">Genre tag that haru uses for its tone of voice</input_port>
            <input_port name="phrases">Phrase for Haru to say. Random choose between senteces separeted by ;</input_port>
            <output_port default="tts_result" name="result">TTS action result. Only once when the action finish</output_port>
        </SubTree>
        <SubTree ID="HaruSpeaksTTS">
            <input_port name="phrases">Phrase for Haru to say. Random choose between senteces separeted by ;</input_port>
        </SubTree>
        <SubTree ID="HaruSpeaksTTSAndWait">
            <output_port default="tts_feed" name="feedback">TTS action feedback. Filled when action is running</output_port>
            <input_port name="phrases">Phrase for Haru to say. Random choose between senteces separeted by ;</input_port>
            <output_port default="tts_result" name="result">TTS action result. Only once when the action finish</output_port>
        </SubTree>
        <SubTree ID="HaruSpeaksTTSAndWaitDEPRECATE">
            <input_port name="phrases">Phrase for Haru to say. Random choose between senteces separeted by ;</input_port>
        </SubTree>
        <SubTree ID="HaruStartTimeCount">
            <input_port default="0" name="timer_id">Timer identifier</input_port>
        </SubTree>
        <SubTree ID="HaruStopTimeCount">
            <output_port name="time_elapsed">Time the timer was running [millisenconds]</output_port>
            <input_port default="0" name="timer_id">Timer identifier</input_port>
        </SubTree>
        <SubTree ID="HaruStopsRoutines"/>
        <SubTree ID="HaruStopsTracking"/>
        <SubTree ID="HaruSwitchAudioDucking">
            <input_port name="enable">Disable/enable audio ducking: 0/1</input_port>
            <input_port default="1" name="main_channel_id">ID of main channel in audio ducking. 1: speech channel</input_port>
        </SubTree>
        <SubTree ID="HaruTakePhoto">
            <input_port name="image_name">Name of the image ;</input_port>
            <input_port name="path">Path to save the image ;</input_port>
        </SubTree>
        <SubTree ID="HaruTrackPerson">
            <input_port default="head" name="body_part">Body part of person to track: spine_base, spine_shoulder, spine_mid, neck, head, shoulder_left, elbow_left, wrist_left, hand_left, hip_left, knee_left, ankle_left, foot_left, sames with _right</input_port>
            <input_port name="person">Person to track</input_port>
            <input_port name="person_header">Header of person to track</input_port>
        </SubTree>
        <SubTree ID="HaruTrackPosition">
            <input_port name="frame">Name of the frame to track</input_port>
        </SubTree>
        <SubTree ID="HaruTrackVelocity">
            <input_port name="frame">Name of the frame to track</input_port>
        </SubTree>
        <Action ID="HaruWebsiteShowGenericPage">
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::ShowGenericPageResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="HaruWebsiteShowMeetingPage">
            <input_port name="hosts" type="std::string">Auto-generated field from idmind_tabletop_msgs::ShowMeetingPageRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="meeting_end" type="std::string">Auto-generated field from idmind_tabletop_msgs::ShowMeetingPageRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="meeting_name" type="std::string">Auto-generated field from idmind_tabletop_msgs::ShowMeetingPageRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="meeting_start" type="std::string">Auto-generated field from idmind_tabletop_msgs::ShowMeetingPageRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="room" type="std::string">Auto-generated field from idmind_tabletop_msgs::ShowMeetingPageRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::ShowMeetingPageResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
            <input_port name="visitor_name" type="std::string">Auto-generated field from idmind_tabletop_msgs::ShowMeetingPageRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <Action ID="HaruWebsiteShowProfilePage">
            <input_port name="company" type="std::string">Auto-generated field from idmind_tabletop_msgs::ShowProfilePageRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="guest_name" type="std::string">Auto-generated field from idmind_tabletop_msgs::ShowProfilePageRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="image_location" type="std::string">Auto-generated field from idmind_tabletop_msgs::ShowProfilePageRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="position" type="std::string">Auto-generated field from idmind_tabletop_msgs::ShowProfilePageRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::ShowProfilePageResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="HaruWebsiteShowWifiPage">
            <input_port name="network" type="std::string">Auto-generated field from idmind_tabletop_msgs::ShowWifiPageRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="password" type="std::string">Auto-generated field from idmind_tabletop_msgs::ShowWifiPageRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [idmind_tabletop_msgs::ShowWifiPageResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <SubTree ID="HarusContentStage">
            <input_port default="true" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <Action ID="IDselectionApiCallAction">
            <input_port name="action" type="std::string">Actionlib action server name</input_port>
            <input_port name="osef" type="std::string">oseeeeeeeeeeeef</input_port>
            <output_port name="serialized_feedback" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetPersonWakeUpWordFeedback_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="serialized_result" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetPersonWakeUpWordResult_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="state" type="actionlib::SimpleClientGoalState">Actionlib reported state</output_port>
        </Action>
        <Action ID="InfoLog">
            <input_port name="message" type="std::string">Message to log</input_port>
        </Action>
        <SubTree ID="InitPhotosharingVariables">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <output_port name="image_paths"/>
            <output_port name="image_tags"/>
            <output_port name="ipad_ids"/>
            <input_port name="ipad_image_result"/>
            <output_port name="usernames"/>
        </SubTree>
        <Action ID="InitializeJson">
            <output_port name="output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Output variable to initialize</output_port>
        </Action>
        <SubTree ID="InitiationOFBTandVariables">
            <input_port default="true" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <SubTree ID="InitiationOFBTandVariables_one_screen">
            <input_port default="true" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <SubTree ID="IntroduceClassesStage">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <Action ID="IpadCommandTaggedImageInfo">
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [haru_encouraging_mediator_msgs::IpadTaggedImageInfoResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <SubTree ID="IsHaruAudioPlaying"/>
        <SubTree ID="IsHaruLCDPlaying"/>
        <SubTree ID="IsHaruProjectorPlaying"/>
        <SubTree ID="IsHaruRoutinePlaying"/>
        <SubTree ID="IsHaruSpeaking"/>
        <SubTree ID="IsHaruTracking"/>
        <Action ID="IstApiCallAction">
            <input_port name="action" type="std::string">Actionlib action server name</input_port>
            <input_port name="sentence" type="std::string">user sentence</input_port>
            <output_port name="serialized_feedback" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetPersonWakeUpWordFeedback_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="serialized_result" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetPersonWakeUpWordResult_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="state" type="actionlib::SimpleClientGoalState">Actionlib reported state</output_port>
            <input_port name="to_filter" type="std::string">Things from the sentence you want removed</input_port>
        </Action>
        <SubTree ID="IstCleanupText">
            <output_port name="cleaned_sentence">software output</output_port>
            <output_port name="input_flag">software output</output_port>
            <input_port name="sentence">User sentence</input_port>
        </SubTree>
        <SubTree ID="IstSendToHaru">
            <output_port name="answer_haru">software output</output_port>
            <input_port name="sentence">User sentence</input_port>
            <input_port name="to_filter">Things from the sentence you want removed</input_port>
        </SubTree>
        <Action ID="IstSteeredApiCallAction">
            <input_port name="action" type="std::string">Actionlib action server name</input_port>
            <input_port name="emotion_wished" type="std::string">Emotion steering for Haru's line</input_port>
            <input_port name="sentence" type="std::string">user sentence</input_port>
            <output_port name="serialized_feedback" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetPersonWakeUpWordFeedback_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="serialized_result" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetPersonWakeUpWordResult_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="state" type="actionlib::SimpleClientGoalState">Actionlib reported state</output_port>
            <input_port name="to_filter" type="std::string">Things from the sentence you want removed</input_port>
        </Action>
        <SubTree ID="IstSteeredSendToHaru">
            <output_port name="answer_haru">software output</output_port>
            <input_port name="emotion_wished">Emotion steering for Haru's line</input_port>
            <input_port name="sentence">User sentence</input_port>
            <input_port name="to_filter">Things from the sentence you want removed</input_port>
        </SubTree>
        <SubTree ID="JAPSharedPicsStage">
            <input_port default="true" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <SubTree ID="Kanji1Stage">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <Action ID="LoadYamlFile">
            <input_port name="file_path" type="std::string">Path to the YAML config file</input_port>
            <output_port name="output" type="std::string">Parameter list as json</output_port>
        </Action>
        <Action ID="LookupTransform">
            <output_port name="output" type="tf::StampedTransform">Result transform</output_port>
            <input_port name="source_frame" type="std::string">Origin TF frame</input_port>
            <input_port name="target_frame" type="std::string">Target TF frame</input_port>
            <input_port default="0" name="use_last_available" type="bool">Use last available transform?</input_port>
        </Action>
        <SubTree ID="MeetingStage">
            <input_port default="true" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <Action ID="MonitorStdBool">
            <input_port default="0" name="consume_msgs" type="bool">Should messages be consumed?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Subscriber callback queue size</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [std_msgs::Bool_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="topic" type="std::string">Topic to subscribe</input_port>
        </Action>
        <Action ID="MonitorStdFloat64">
            <input_port default="0" name="consume_msgs" type="bool">Should messages be consumed?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Subscriber callback queue size</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [std_msgs::Float64_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="topic" type="std::string">Topic to subscribe</input_port>
        </Action>
        <Action ID="MonitorStdInt32">
            <input_port default="0" name="consume_msgs" type="bool">Should messages be consumed?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Subscriber callback queue size</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [std_msgs::Int32_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="topic" type="std::string">Topic to subscribe</input_port>
        </Action>
        <Action ID="MonitorStdString">
            <input_port default="0" name="consume_msgs" type="bool">Should messages be consumed?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Subscriber callback queue size</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [std_msgs::String_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="topic" type="std::string">Topic to subscribe</input_port>
        </Action>
        <Action ID="MonitorStdUInt64">
            <input_port default="0" name="consume_msgs" type="bool">Should messages be consumed?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Subscriber callback queue size</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [std_msgs::UInt64_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="topic" type="std::string">Topic to subscribe</input_port>
        </Action>
        <Action ID="NLPTextToSSML">
            <input_port name="criteria_name" type="std::string">Auto-generated field from strawberry_ros_msgs::TextToSSMLRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetClosestPersonResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
            <input_port name="text" type="std::string">Auto-generated field from strawberry_ros_msgs::TextToSSMLRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <Action ID="PeopleApiCallCheckPersonHasMaskById">
            <input_port name="person_id" type="unsigned int">Auto-generated field from strawberry_ros_msgs::CheckPersonHasMaskByIdRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::CheckPersonHasMaskByIdResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="PeopleApiCallCheckPersonHasMaskByName">
            <input_port name="person_name" type="std::string">Auto-generated field from strawberry_ros_msgs::CheckPersonHasMaskByNameRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::CheckPersonHasMaskByNameResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="PeopleApiCallCheckPersonInteractionById">
            <input_port name="axis" type="std::string">Auto-generated field from strawberry_ros_msgs::CheckPersonInteractionByIdRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="person_id" type="unsigned int">Auto-generated field from strawberry_ros_msgs::CheckPersonInteractionByIdRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="point.x" type="double">Auto-generated field from strawberry_ros_msgs::CheckPersonInteractionByIdRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="point.y" type="double">Auto-generated field from strawberry_ros_msgs::CheckPersonInteractionByIdRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="point.z" type="double">Auto-generated field from strawberry_ros_msgs::CheckPersonInteractionByIdRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::CheckPersonInteractionByIdResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
            <input_port name="tolerance" type="float">Auto-generated field from strawberry_ros_msgs::CheckPersonInteractionByIdRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <Action ID="PeopleApiCallCheckPersonInteractionByName">
            <input_port name="axis" type="std::string">Auto-generated field from strawberry_ros_msgs::CheckPersonInteractionByNameRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="person_name" type="std::string">Auto-generated field from strawberry_ros_msgs::CheckPersonInteractionByNameRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="point.x" type="double">Auto-generated field from strawberry_ros_msgs::CheckPersonInteractionByNameRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="point.y" type="double">Auto-generated field from strawberry_ros_msgs::CheckPersonInteractionByNameRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="point.z" type="double">Auto-generated field from strawberry_ros_msgs::CheckPersonInteractionByNameRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::CheckPersonInteractionByNameResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
            <input_port name="tolerance" type="float">Auto-generated field from strawberry_ros_msgs::CheckPersonInteractionByNameRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <Action ID="PeopleApiCallCheckPersonIsFemaleById">
            <input_port name="person_id" type="unsigned int">Auto-generated field from strawberry_ros_msgs::CheckPersonIsFemaleByIdRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::CheckPersonIsFemaleByIdResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="PeopleApiCallCheckPersonIsFemaleByName">
            <input_port name="person_name" type="std::string">Auto-generated field from strawberry_ros_msgs::CheckPersonIsFemaleByNameRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::CheckPersonIsFemaleByNameResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="PeopleApiCallGetClosestPerson">
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetClosestPersonResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
            <input_port name="source_pos.x" type="double">Auto-generated field from strawberry_ros_msgs::GetClosestPersonRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="source_pos.y" type="double">Auto-generated field from strawberry_ros_msgs::GetClosestPersonRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="source_pos.z" type="double">Auto-generated field from strawberry_ros_msgs::GetClosestPersonRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <Action ID="PeopleApiCallGetNumberOfPersons">
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetNumberOfPersonsResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="PeopleApiCallGetPersonBodyPartPosById">
            <input_port name="body_part" type="std::string">Auto-generated field from strawberry_ros_msgs::GetPersonBodyPartPosByIdRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="person_id" type="unsigned int">Auto-generated field from strawberry_ros_msgs::GetPersonBodyPartPosByIdRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetPersonBodyPartPosByIdResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="PeopleApiCallGetPersonBodyPartPosByName">
            <input_port name="body_part" type="std::string">Auto-generated field from strawberry_ros_msgs::GetPersonBodyPartPosByNameRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="person_name" type="std::string">Auto-generated field from strawberry_ros_msgs::GetPersonBodyPartPosByNameRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetPersonBodyPartPosByNameResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="PeopleApiCallGetPersonEmotionById">
            <input_port name="person_id" type="unsigned int">Auto-generated field from strawberry_ros_msgs::GetPersonEmotionByIdRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetPersonEmotionByIdResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="PeopleApiCallGetPersonEmotionByName">
            <input_port name="person_name" type="std::string">Auto-generated field from strawberry_ros_msgs::GetPersonEmotionByNameRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetPersonEmotionByNameResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="PeopleApiCallGetPersonGestureById">
            <input_port name="person_id" type="unsigned int">Auto-generated field from strawberry_ros_msgs::GetPersonGestureByIdRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetPersonGestureByIdResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="PeopleApiCallGetPersonGestureByName">
            <input_port name="person_name" type="std::string">Auto-generated field from strawberry_ros_msgs::GetPersonGestureByNameRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetPersonGestureByNameResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="PeopleApiCallGetPersonHandsDirById">
            <input_port name="person_id" type="unsigned int">Auto-generated field from strawberry_ros_msgs::GetPersonHandsDirByIdRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetPersonHandsDirByIdResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="PeopleApiCallGetPersonHandsDirByName">
            <input_port name="person_name" type="std::string">Auto-generated field from strawberry_ros_msgs::GetPersonHandsDirByNameRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetPersonHandsDirByNameResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="PeopleApiCallGetPersonHandsPosById">
            <input_port name="person_id" type="unsigned int">Auto-generated field from strawberry_ros_msgs::GetPersonHandsPosByIdRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetPersonHandsPosByIdResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="PeopleApiCallGetPersonHandsPosByName">
            <input_port name="person_name" type="std::string">Auto-generated field from strawberry_ros_msgs::GetPersonHandsPosByNameRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetPersonHandsPosByNameResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="PeopleApiCallGetPersonHeadDirById">
            <input_port name="person_id" type="unsigned int">Auto-generated field from strawberry_ros_msgs::GetPersonHeadDirByIdRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetPersonHeadDirByIdResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="PeopleApiCallGetPersonHeadDirByName">
            <input_port name="person_name" type="std::string">Auto-generated field from strawberry_ros_msgs::GetPersonHeadDirByNameRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetPersonHeadDirByNameResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="PeopleApiCallGetPersonHeadPosById">
            <input_port name="person_id" type="unsigned int">Auto-generated field from strawberry_ros_msgs::GetPersonHeadPosByIdRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetPersonHeadPosByIdResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="PeopleApiCallGetPersonHeadPosByName">
            <input_port name="person_name" type="std::string">Auto-generated field from strawberry_ros_msgs::GetPersonHeadPosByNameRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetPersonHeadPosByNameResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="PeopleApiCallGetPersonIdAndNameList">
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetPersonIdAndNameListResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="PeopleApiCallGetPersonIdByName">
            <input_port name="person_name" type="std::string">Auto-generated field from strawberry_ros_msgs::GetPersonIdByNameRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetPersonIdByNameResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="PeopleApiCallGetPersonNameById">
            <input_port name="person_id" type="unsigned int">Auto-generated field from strawberry_ros_msgs::GetPersonNameByIdRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetPersonNameByIdResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="PeopleApiCallGetPersonPosById">
            <input_port name="person_id" type="unsigned int">Auto-generated field from strawberry_ros_msgs::GetPersonPosByIdRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetPersonPosByIdResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="PeopleApiCallGetPersonPosByName">
            <input_port name="person_name" type="std::string">Auto-generated field from strawberry_ros_msgs::GetPersonPosByNameRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetPersonPosByNameResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="PeopleApiCallGetPersonSpeechByIdAction">
            <input_port name="action" type="std::string">Actionlib action server name</input_port>
            <input_port name="person_id" type="unsigned int">Auto-generated field from strawberry_ros_msgs::GetPersonSpeechByIdGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_feedback" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetPersonSpeechByIdFeedback_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="serialized_result" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetPersonSpeechByIdResult_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="state" type="actionlib::SimpleClientGoalState">Actionlib reported state</output_port>
            <input_port name="timeout" type="float">Auto-generated field from strawberry_ros_msgs::GetPersonSpeechByIdGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <Action ID="PeopleApiCallGetPersonSpeechByNameAction">
            <input_port name="action" type="std::string">Actionlib action server name</input_port>
            <input_port name="person_name" type="std::string">Auto-generated field from strawberry_ros_msgs::GetPersonSpeechByNameGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_feedback" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetPersonSpeechByNameFeedback_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="serialized_result" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetPersonSpeechByNameResult_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="state" type="actionlib::SimpleClientGoalState">Actionlib reported state</output_port>
            <input_port name="timeout" type="float">Auto-generated field from strawberry_ros_msgs::GetPersonSpeechByNameGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <Action ID="PeopleApiCallGetPersonSpeechMaxConfidenceAction">
            <input_port name="action" type="std::string">Actionlib action server name</input_port>
            <output_port name="serialized_feedback" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetPersonSpeechMaxConfidenceFeedback_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="serialized_result" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetPersonSpeechMaxConfidenceResult_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="state" type="actionlib::SimpleClientGoalState">Actionlib reported state</output_port>
            <input_port name="timeout" type="float">Auto-generated field from strawberry_ros_msgs::GetPersonSpeechMaxConfidenceGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <Action ID="PeopleApiCallGetPersonWakeUpWordAction">
            <input_port name="action" type="std::string">Actionlib action server name</input_port>
            <output_port name="serialized_feedback" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetPersonWakeUpWordFeedback_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="serialized_result" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetPersonWakeUpWordResult_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="state" type="actionlib::SimpleClientGoalState">Actionlib reported state</output_port>
            <input_port name="timeout" type="float">Auto-generated field from strawberry_ros_msgs::GetPersonWakeUpWordGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <SubTree ID="PeopleApiCheckPersonHasMaskById">
            <output_port name="has_mask">1(true) / 0(false) depending on the person has a mask or not</output_port>
            <input_port name="person_id">ID of the person to check if he is wearing a mask</input_port>
        </SubTree>
        <SubTree ID="PeopleApiCheckPersonHasMaskByName">
            <output_port name="has_mask">1(true) / 0(false) depending on the person has a mask or not</output_port>
            <input_port name="person_name">Name of the person to check if he is wearing a mask</input_port>
        </SubTree>
        <SubTree ID="PeopleApiCheckPersonIsFemaleById">
            <output_port name="is_female">1(true) / 0 (false) is the person is a female or a male</output_port>
            <input_port name="person_id">ID of the person to check if his gender</input_port>
        </SubTree>
        <SubTree ID="PeopleApiCheckPersonIsFemaleByName">
            <output_port name="is_female">1(true) / 0 (false) is the person is a female or a male</output_port>
            <input_port name="person_name">Name of the person to check his gender</input_port>
        </SubTree>
        <SubTree ID="PeopleApiCheckPersonIsLookingAtById">
            <input_port default="xyz" name="axis">Selected Axis to perform the check. Valid values: x, y, z, xy, xz, yz, xyz</input_port>
            <input_port name="person_id">ID of the person to check if it he looking at the source position</input_port>
            <input_port name="source_x">X axis of the source position</input_port>
            <input_port name="source_y">Y axis of the source position</input_port>
            <input_port name="source_z">Z axis of the source position</input_port>
            <output_port name="success">True if the person is looking at (tolerance) to the source position</output_port>
            <input_port default="25.0" name="tolerance">Tolerance to perform the check [degrees]</input_port>
        </SubTree>
        <SubTree ID="PeopleApiCheckPersonIsLookingAtByName">
            <input_port default="xyz" name="axis">Selected Axis to perform the check. Valid values: x, y, z, xy, xz, yz, xyz</input_port>
            <input_port name="person_name">Name of the person to check if he is looking at the source position</input_port>
            <input_port name="source_x">X axis of the source position</input_port>
            <input_port name="source_y">Y axis of the source position</input_port>
            <input_port name="source_z">Z axis of the source position</input_port>
            <output_port name="success">True if the person is looking at (tolerance) to the source position</output_port>
            <input_port default="25.0" name="tolerance">Tolerance to perform the check [degrees]</input_port>
        </SubTree>
        <SubTree ID="PeopleApiCheckPersonIsNearToById">
            <input_port default="xyz" name="axis">Selected Axis to perform the check. Valid values: x, y, z, xy, xz, yz, xyz</input_port>
            <input_port name="person_id">ID of the person to check if it he near to the source position</input_port>
            <input_port name="source_x">X axis of the source position</input_port>
            <input_port name="source_y">Y axis of the source position</input_port>
            <input_port name="source_z">Z axis of the source position</input_port>
            <output_port name="success">True if the person is near enough (tolerance) to the source position</output_port>
            <input_port default="1.0" name="tolerance">Tolerance to perform the check [meters]</input_port>
        </SubTree>
        <SubTree ID="PeopleApiCheckPersonIsNearToByName">
            <input_port default="xyz" name="axis">Selected Axis to perform the check. Valid values: x, y, z, xy, xz, yz, xyz</input_port>
            <input_port name="person_name">Name of the person to check if he is near to the source position</input_port>
            <input_port name="source_x">X axis of the source position</input_port>
            <input_port name="source_y">Y axis of the source position</input_port>
            <input_port name="source_z">Z axis of the source position</input_port>
            <output_port name="success">True if the person is near enough (tolerance) to the source position</output_port>
            <input_port default="1.0" name="tolerance">Tolerance to perform the check [meters]</input_port>
        </SubTree>
        <SubTree ID="PeopleApiCheckPersonIsPointingToById">
            <input_port default="xyz" name="axis">Selected Axis to perform the check. Valid values: x, y, z, xy, xz, yz, xyz</input_port>
            <input_port name="person_id">ID of the person to check if he is poiting to the source position</input_port>
            <input_port name="source_x">X axis of the source position</input_port>
            <input_port name="source_y">Y axis of the source position</input_port>
            <input_port name="source_z">Z axis of the source position</input_port>
            <output_port name="success">True if the person is pointing to (tolerance) to the source position</output_port>
            <input_port default="25.0" name="tolerance">Tolerance to perform the check [degrees]</input_port>
        </SubTree>
        <SubTree ID="PeopleApiCheckPersonIsPointingToByName">
            <input_port default="xyz" name="axis">Selected Axis to perform the check. Valid values: x, y, z, xy, xz, yz, xyz</input_port>
            <input_port name="person_name">Name of the person to check if he is looking at the source position</input_port>
            <input_port name="source_x">X axis of the source position</input_port>
            <input_port name="source_y">Y axis of the source position</input_port>
            <input_port name="source_z">Z axis of the source position</input_port>
            <output_port name="success">True if the person is pointing to (tolerance) to the source position</output_port>
            <input_port default="25.0" name="tolerance">Tolerance to perform the check [degrees]</input_port>
        </SubTree>
        <SubTree ID="PeopleApiGetClosestPerson">
            <output_port name="person_id">ID of the closest person to the source position</output_port>
            <output_port name="person_name">Name of the closest person to the source position</output_port>
            <input_port name="source_x">X axis of the source position to check who is the closest person to</input_port>
            <input_port name="source_y">Y axis of the source position to check who is the closest person to</input_port>
            <input_port name="source_z">Z axis of the source position to check who is the closest person to</input_port>
        </SubTree>
        <SubTree ID="PeopleApiGetIdAndNameLists">
            <output_port name="ids">Json with the list of ids</output_port>
            <output_port name="names">Json with the list of names</output_port>
            <output_port name="names_and_ids">Json with a list of two fields: /name and /id</output_port>
        </SubTree>
        <SubTree ID="PeopleApiGetNumberOfPersons">
            <output_port name="value">Current number of detected persons</output_port>
        </SubTree>
        <SubTree ID="PeopleApiGetPersonBodyPartPosByID">
            <input_port name="body_part_name">Body part name we want to get its position</input_port>
            <input_port name="person_id">Person ID that this body part belongs to</input_port>
            <output_port name="x">Body Part position X axis</output_port>
            <output_port name="y">Body Part position Y axis</output_port>
            <output_port name="z">Body Part position Z axis</output_port>
        </SubTree>
        <SubTree ID="PeopleApiGetPersonBodyPartPosByName">
            <input_port name="body_part_name">Body part name to get its position</input_port>
            <input_port name="person_name">Person Name to get the body part position</input_port>
            <output_port name="x">Body part position X axis</output_port>
            <output_port name="y">Body part position Y axis</output_port>
            <output_port name="z">Body part position Z axis</output_port>
        </SubTree>
        <SubTree ID="PeopleApiGetPersonEmotionById">
            <output_port name="emotion_name">Current face emotion</output_port>
            <input_port name="person_id">ID of the person to get his current face emotion</input_port>
        </SubTree>
        <SubTree ID="PeopleApiGetPersonEmotionByName">
            <output_port name="emotion_name">Current face emotion</output_port>
            <input_port name="person_name">Name of the person to get his current face emotion</input_port>
        </SubTree>
        <SubTree ID="PeopleApiGetPersonGestureById">
            <output_port name="gesture_name">Current body gesture</output_port>
            <input_port name="person_id">ID of the person to get his current body gesture</input_port>
        </SubTree>
        <SubTree ID="PeopleApiGetPersonGestureByName">
            <output_port name="gesture_name">Body gesture name</output_port>
            <input_port name="person_name">Name of the person to get his current body gesture</input_port>
        </SubTree>
        <SubTree ID="PeopleApiGetPersonHandsDirById">
            <output_port name="left_hand_x">Left Hand direction X axis</output_port>
            <output_port name="left_hand_y">Left Hand direction Y axis</output_port>
            <output_port name="left_hand_z">Left Hand direction Z axis</output_port>
            <input_port name="person_id">Person ID to get his hand directions</input_port>
            <output_port name="right_hand_x">Right Hand direction X axis</output_port>
            <output_port name="right_hand_y">Right Hand direction Y axis</output_port>
            <output_port name="right_hand_z">Right Hand direction Z axis</output_port>
        </SubTree>
        <SubTree ID="PeopleApiGetPersonHandsDirByName">
            <output_port name="left_hand_x">Left Hand direction X axis</output_port>
            <output_port name="left_hand_y">Left Hand direction Y axis</output_port>
            <output_port name="left_hand_z">Left Hand direction Z axis</output_port>
            <input_port name="person_name">Name of the person to get the hands directions</input_port>
            <output_port name="right_hand_x">Right Hand direction X axis</output_port>
            <output_port name="right_hand_y">Right Hand direction Y axis</output_port>
            <output_port name="right_hand_z">Right Hand direction Z axis</output_port>
        </SubTree>
        <SubTree ID="PeopleApiGetPersonHandsPosById">
            <output_port name="left_hand_x">Left Hand position X axis</output_port>
            <output_port name="left_hand_y">Left Hand position Y axis</output_port>
            <output_port name="left_hand_z">Left Hand position Z axis</output_port>
            <input_port name="person_id">Person ID to get his hands positions</input_port>
            <output_port name="right_hand_x">Right Hand position X axis</output_port>
            <output_port name="right_hand_y">Right Hand position Y axis</output_port>
            <output_port name="right_hand_z">Right Hand position Z axis</output_port>
        </SubTree>
        <SubTree ID="PeopleApiGetPersonHandsPosByName">
            <output_port name="left_hand_x">Left Hand position X axis</output_port>
            <output_port name="left_hand_y">Left Hand position Y axis</output_port>
            <output_port name="left_hand_z">Left Hand position Z axis</output_port>
            <input_port name="person_name">Person name to get his hands positions</input_port>
            <output_port name="right_hand_x">Right Hand position X axis</output_port>
            <output_port name="right_hand_y">Right Hand position Y axis</output_port>
            <output_port name="right_hand_z">Right Hand position Z axis</output_port>
        </SubTree>
        <SubTree ID="PeopleApiGetPersonHeadDirById">
            <input_port name="person_id">ID of the person to get his head direction</input_port>
            <output_port name="x">Head direction X axis</output_port>
            <output_port name="y">Head direction Y axis</output_port>
            <output_port name="z">Head direction Z axis</output_port>
        </SubTree>
        <SubTree ID="PeopleApiGetPersonHeadDirByName">
            <input_port name="person_name">Name of the person to get his head direction</input_port>
            <output_port name="x">Head direction X axis</output_port>
            <output_port name="y">Head direction Y axis</output_port>
            <output_port name="z">Head direction Z axis</output_port>
        </SubTree>
        <SubTree ID="PeopleApiGetPersonHeadPosById">
            <input_port name="person_id">ID of the person to get his head position</input_port>
            <output_port name="x">Head position X axis</output_port>
            <output_port name="y">Head position Y axis</output_port>
            <output_port name="z">Head position Z axis</output_port>
        </SubTree>
        <SubTree ID="PeopleApiGetPersonHeadPosByName">
            <input_port name="person_name">Name of the person to get his head position</input_port>
            <output_port name="x">Head position X axis</output_port>
            <output_port name="y">Head position Y axis</output_port>
            <output_port name="z">Head position Z axis</output_port>
        </SubTree>
        <SubTree ID="PeopleApiGetPersonIdByName">
            <output_port name="person_id">Id of the person with this name</output_port>
            <input_port name="person_name">Name of the person</input_port>
        </SubTree>
        <SubTree ID="PeopleApiGetPersonNameById">
            <input_port name="person_id">Id of the person</input_port>
            <output_port name="person_name">Name of the person with this ID</output_port>
        </SubTree>
        <SubTree ID="PeopleApiGetPersonPosById">
            <input_port name="person_id">ID of the person we want to know his position</input_port>
            <output_port name="x">Person position X axis</output_port>
            <output_port name="y">Person position Y axis</output_port>
            <output_port name="z">Person position Z axis</output_port>
        </SubTree>
        <SubTree ID="PeopleApiGetPersonPosByName">
            <input_port name="person_name">Name of the person we want to know his position</input_port>
            <output_port name="x">Person position X axis</output_port>
            <output_port name="y">Person position Y axis</output_port>
            <output_port name="z">Person position Z axis</output_port>
        </SubTree>
        <SubTree ID="PeopleApiGetPersonSpeechByIdAndWait">
            <input_port name="person_id">ID of the person to get his speech</input_port>
            <output_port name="speaker_confidence">Confidence about this person ID was the actual speaker</output_port>
            <output_port name="speech_confidence">Confidence about the transcription</output_port>
            <output_port name="speech_id">Unique ID for each speech result. Use it to identify older results</output_port>
            <output_port name="speech_text">Speech result text</output_port>
            <output_port name="success">True if speech was found for this person ID</output_port>
            <input_port default="0.0" name="timeout">Time to wait for a speech result for this person ID [seconds]. A value of 0.0 means just try one</input_port>
        </SubTree>
        <SubTree ID="PeopleApiGetPersonSpeechByNameAndWait">
            <input_port name="person_name">Name of the person to get his speech</input_port>
            <output_port name="speaker_confidence">Confidence about this person ID was the actual speaker</output_port>
            <output_port name="speech_confidence">Confidence about the transcription</output_port>
            <output_port name="speech_id">Unique ID for each speech result. Use it to identify older results</output_port>
            <output_port name="speech_text">Speech result text</output_port>
            <output_port name="success">True if speech was found for this person ID</output_port>
            <input_port default="0.0" name="timeout">Time to wait for a speech result for this person ID [seconds]. A value of 0.0 means just try one</input_port>
        </SubTree>
        <SubTree ID="PeopleApiGetPersonSpeechMaxConfidenceAndWait">
            <output_port name="person_id">ID of the person to whom this speech belongs</output_port>
            <output_port name="person_name">Name of the person to whom this speech belongs</output_port>
            <output_port name="speaker_confidence">Confidence about this person ID was the actual speaker</output_port>
            <output_port name="speech_confidence">Confidence about the transcription</output_port>
            <output_port name="speech_id">Unique ID for each speech result. Use it to identify older results</output_port>
            <output_port name="speech_text">Speech result text</output_port>
            <output_port name="success">True if speech was found for this person ID</output_port>
            <input_port default="0.0" name="timeout">Time to wait for a speech result for this person ID [seconds]. A value of 0.0 means just try one</input_port>
        </SubTree>
        <SubTree ID="PeopleApiGetPersonWakeUpWordAndWait">
            <output_port name="person_found">True if a person was found with a non null wake up word</output_port>
            <output_port name="person_id">ID of the person to whom this speech belongs</output_port>
            <output_port name="person_name">Name of the person to whom this speech belongs</output_port>
            <output_port name="speaker_confidence">Confidence about this person ID was the actual speaker</output_port>
            <output_port name="speech_confidence">Confidence about the transcription</output_port>
            <output_port name="speech_id">Unique ID for each speech result. Use it to identify older results</output_port>
            <output_port name="speech_text">Speech result text</output_port>
            <input_port default="0.0" name="timeout">Time to wait for a speech result for this person ID [seconds]. A value of 0.0 means just try one</input_port>
            <output_port name="wake_up_word">WakeUpWord value: True if a person told the wake up word</output_port>
        </SubTree>
        <SubTree ID="PhotosharingVideoExplanationStage">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <SubTree ID="PreviousSessionStage">
            <input_port default="true" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <SubTree ID="PrivacyStage">
            <input_port default="true" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <Action ID="PublishStdBool">
            <input_port name="data" type="bool">Auto-generated field from std_msgs::Bool_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port default="0" name="latch" type="bool">Latch messages?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Internal publisher queue size</input_port>
            <input_port name="topic" type="std::string">Topic to publish to</input_port>
        </Action>
        <Action ID="PublishStdEmpty">
            <input_port default="0" name="latch" type="bool">Latch messages?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Internal publisher queue size</input_port>
            <input_port name="topic" type="std::string">Topic to publish to</input_port>
        </Action>
        <Action ID="PublishStdFloat64">
            <input_port name="data" type="double">Auto-generated field from std_msgs::Float64_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port default="0" name="latch" type="bool">Latch messages?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Internal publisher queue size</input_port>
            <input_port name="topic" type="std::string">Topic to publish to</input_port>
        </Action>
        <Action ID="PublishStdInt32">
            <input_port name="data" type="int">Auto-generated field from std_msgs::Int32_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port default="0" name="latch" type="bool">Latch messages?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Internal publisher queue size</input_port>
            <input_port name="topic" type="std::string">Topic to publish to</input_port>
        </Action>
        <Action ID="PublishStdString">
            <input_port name="data" type="std::string">Auto-generated field from std_msgs::String_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port default="0" name="latch" type="bool">Latch messages?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Internal publisher queue size</input_port>
            <input_port name="topic" type="std::string">Topic to publish to</input_port>
        </Action>
        <Action ID="PublishStdUInt64">
            <input_port name="data" type="unsigned long">Auto-generated field from std_msgs::UInt64_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port default="0" name="latch" type="bool">Latch messages?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Internal publisher queue size</input_port>
            <input_port name="topic" type="std::string">Topic to publish to</input_port>
        </Action>
        <SubTree ID="RosTeleconferenceAudioOFF">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <output_port default="pause_tele_audio_result" name="output">Service result</output_port>
        </SubTree>
        <SubTree ID="RosTeleconferenceAudioON">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <output_port default="resume_tele_audio_result" name="output">Service result</output_port>
        </SubTree>
        <SubTree ID="RosTeleconferenceSyncBuffReset"/>
        <SubTree ID="SaveImage">
            <input_port name="image_file">Full path of the file to be saved. File extension should be included</input_port>
            <input_port name="image_topic">Name of the topic to save the image from</input_port>
        </SubTree>
        <Action ID="SpeechDetectionApiCallAction">
            <input_port name="action" type="std::string">Actionlib action server name</input_port>
            <input_port name="checking_time" type="std::float32">required silence time</input_port>
            <input_port name="mode" type="std::string">detection mode</input_port>
            <output_port name="serialized_feedback" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetPersonWakeUpWordFeedback_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="serialized_result" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetPersonWakeUpWordResult_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="state" type="actionlib::SimpleClientGoalState">Actionlib reported state</output_port>
            <input_port name="turn_max_time" type="std::float32">max turn time</input_port>
        </Action>
        <Action ID="SplitStringToJsonArray">
            <input_port default=";" name="delimiter" type="std::string">delimiter to split the sequence</input_port>
            <output_port name="json_size" type="unsigned long">Number of elements from the split</output_port>
            <output_port name="output_json" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Json array with the sequence splitted</output_port>
            <input_port name="sequence" type="std::string">Sequence to split</input_port>
        </Action>
        <SubTree ID="Stage10">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <SubTree ID="StepOne">
            <input_port default="true" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <SubTree ID="StepOne_one_screen">
            <input_port default="true" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <SubTree ID="StepZero">
            <input_port default="true" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <SubTree ID="StrawberryASRToDialog">
            <input_port name="asr_result_msg">Full ASR result message</input_port>
        </SubTree>
        <SubTree ID="StrawberryAddDialogEntity">
            <input_port default="0" name="auto_expansion">Enable / disable ML auto-expansion [1 / 0].</input_port>
            <input_port name="entities">Serialized JSON with keys as entity values and values as coma-separated synonym strings</input_port>
            <input_port name="entity_name">Name of the Entity type to add entities. Must be one of those received from topic /strawberry/dialog_entity_types_list.</input_port>
            <input_port default="0" name="fuzzy_extraction">Enable / disable fuzzy extraction of entities [1 / 0]</input_port>
            <input_port default="KIND_MAP" name="kind">Kind of the Entity type. Must be one of: KIND_MAP, KIND_LIST, KIND_REGEXP. Defaults to KIND_MAP.</input_port>
        </SubTree>
        <SubTree ID="StrawberryAppendDialogSessionEntity">
            <input_port name="entities">Serialized JSON with keys as entity values and values as coma-separated synonym strings</input_port>
            <input_port name="entity_name">Name of the Entity type to append entities. Must be one of those received from topic /strawberry/dialog_entity_types_list.</input_port>
            <input_port name="person_id">Unique ID of the person with white the event is associated</input_port>
            <output_port name="session_entities">List of entities available on this session</output_port>
        </SubTree>
        <Action ID="StrawberryClassifyEmotionFromText">
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::ClassifyEmotionFromTextResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
            <input_port name="transcription" type="std::string">Auto-generated field from strawberry_ros_msgs::ClassifyEmotionFromTextRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <Action ID="StrawberryCommandEnableASR">
            <input_port name="data" type="bool">Auto-generated field from strawberry_ros_msgs::Enable_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="header.frame_id" type="std::string">Auto-generated field from strawberry_ros_msgs::Enable_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="header.seq" type="unsigned int">Auto-generated field from strawberry_ros_msgs::Enable_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port default="0" name="latch" type="bool">Latch messages?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Internal publisher queue size</input_port>
            <input_port name="topic" type="std::string">Topic to publish to</input_port>
        </Action>
        <Action ID="StrawberryCommandSpeech">
            <input_port name="asr_result.confidence" type="float">Auto-generated field from strawberry_ros_msgs::Speech_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="asr_result.header.frame_id" type="std::string">Auto-generated field from strawberry_ros_msgs::Speech_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="asr_result.header.seq" type="unsigned int">Auto-generated field from strawberry_ros_msgs::Speech_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="asr_result.transcript" type="std::string">Auto-generated field from strawberry_ros_msgs::Speech_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port default="0" name="latch" type="bool">Latch messages?</input_port>
            <input_port name="person_id" type="unsigned int">Auto-generated field from strawberry_ros_msgs::Speech_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Internal publisher queue size</input_port>
            <input_port name="speaker_confidence" type="float">Auto-generated field from strawberry_ros_msgs::Speech_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="topic" type="std::string">Topic to publish to</input_port>
            <input_port name="wake_up_word" type="bool">Auto-generated field from strawberry_ros_msgs::Speech_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <Action ID="StrawberryControlEntity">
            <input_port default="ADD" name="action" type="std::string">Name of the action to perform on the Entity. Can be either ADD or REMOVE only. Defaults to ADD</input_port>
            <input_port default="0" name="auto_expansion_mode" type="bool">Enable / disable ML auto-expansion. Must be either true or false. Defaults to false.</input_port>
            <input_port default="0" name="enable_fuzzy_extraction" type="bool">Enable / disable fuzzy extraction of entities. Must be either false or false. Defaults to false.</input_port>
            <input_port name="entities" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized JSON with keys as entity values and values as coma-separated synonym strings</input_port>
            <input_port name="entity_name" type="std::string">Name of the Entity type. Must be one of those received from topic /strawberry/dialog_entity_types_list.</input_port>
            <input_port default="KIND_MAP" name="kind" type="std::string">Kind of the Entity type. Must be one of: KIND_MAP, KIND_LIST, KIND_REGEXP. Defaults to KIND_MAP.</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::ControlEntityResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="StrawberryControlSessionEntity">
            <input_port default="ADD" name="action" type="std::string">Name of the action to perform on the Entity. Can be either GET, ADD or REMOVE only. Defaults to ADD</input_port>
            <input_port name="entities" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized JSON with keys as entity values and values as coma-separated synonym strings</input_port>
            <input_port name="entity_name" type="std::string">Name of the Entity type. Must be one of those received from topic /strawberry/dialog_entity_types_list.</input_port>
            <input_port default="SUPPLEMENT" name="entity_override_mode" type="std::string">Session entity override mode. Must be one of: OVERRIDE or SUPPLEMENT. Defaults to SUPPLEMENT.</input_port>
            <input_port name="person_id" type="unsigned int">Unique ID of the person with white the event is associated</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::ControlSessionEntityResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <SubTree ID="StrawberryDialogAskYesNoQuestion">
            <input_port name="question">Question to ask the speaker. Can be multiple questions separated by semicolon. Random question will be selected.</input_port>
        </SubTree>
        <SubTree ID="StrawberryDisableASR"/>
        <SubTree ID="StrawberryDisableAllASR"/>
        <SubTree ID="StrawberryDisableDialogGenericQuestions"/>
        <SubTree ID="StrawberryEnableASR"/>
        <SubTree ID="StrawberryEnableASRById">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port default="1" name="person_id">Id of the microphone we want to activate </input_port>
        </SubTree>
        <SubTree ID="StrawberryEnableAllASR"/>
        <SubTree ID="StrawberryGetASR">
            <output_port name="asr_result">Sentece detected</output_port>
            <output_port name="asr_result_conf">Confidence of sentence detected</output_port>
            <output_port name="asr_result_msg">Full ASR result message</output_port>
        </SubTree>
        <SubTree ID="StrawberryGetDialog">
            <output_port name="dialog_response">Response sentence</output_port>
            <output_port name="dialog_result">Full dialogue result</output_port>
        </SubTree>
        <SubTree ID="StrawberryGetDialogIntent">
            <output_port name="dialog_intent">Intent of the dialogue response</output_port>
            <output_port name="dialog_intent_confidence">Confidence of the intent detected</output_port>
            <input_port name="dialog_result">Message of dialogue module</input_port>
        </SubTree>
        <SubTree ID="StrawberryGetDialogSessionEntity">
            <input_port name="person_id">Unique ID of the person with white the event is associated</input_port>
            <output_port name="session_entities">List of entities available on this session</output_port>
        </SubTree>
        <SubTree ID="StrawberryGetDialogUtterance">
            <input_port name="dialog_result">Dialog result message [strawberry_ros_msgs/DialogResult]</input_port>
            <output_port name="dialog_utterance">Original ASR utterance that was processed by the dialog</output_port>
        </SubTree>
        <SubTree ID="StrawberryGetGonePeople">
            <output_port name="gone_people">People that left the scene</output_port>
        </SubTree>
        <SubTree ID="StrawberryGetHands">
            <output_port name="hands">Detected hands</output_port>
            <output_port name="hands_msg">Full hands message</output_port>
        </SubTree>
        <SubTree ID="StrawberryGetHandsFeatures">
            <output_port name="hand_features">Hand features</output_port>
        </SubTree>
        <SubTree ID="StrawberryGetHandsGesture">
            <input_port name="hands">Hands message</input_port>
            <output_port name="hands_gesture">Detected hands gesture name</output_port>
            <output_port name="hands_gestures_list">List of gestures detected with hands</output_port>
        </SubTree>
        <SubTree ID="StrawberryGetNewPeople">
            <output_port name="new_people">People that enter the scene</output_port>
        </SubTree>
        <SubTree ID="StrawberryGetPeople">
            <output_port name="header">Header info people in scene</output_port>
            <output_port name="people">People in scene</output_port>
        </SubTree>
        <SubTree ID="StrawberryGetPersonFaceEmotion">
            <output_port name="emotion_confidence">Confidence of emotion with more confidence</output_port>
            <output_port name="emotion_name">Name of emotion with more confidence</output_port>
            <output_port name="emotions">List of all emotions detected</output_port>
            <input_port name="person">Person to extract face emotion</input_port>
        </SubTree>
        <SubTree ID="StrawberryGetPersonFaceGender">
            <output_port name="is_male">True (1) if male, False (0) if female</output_port>
            <input_port name="person">Person message from where extract the gender</input_port>
        </SubTree>
        <SubTree ID="StrawberryGetPersonFaceHasMask">
            <output_port name="has_mask">True (1) if wearing a mask, False (0) if not wearing a mask</output_port>
            <input_port name="person">Person message who check if has mask</input_port>
        </SubTree>
        <SubTree ID="StrawberryGetPersonGesture">
            <output_port name="gesture_confidence">Confidence of gesture with more confidence</output_port>
            <output_port name="gesture_name">Name of gesture with more confidence</output_port>
            <output_port name="gestures">List of gestures detected</output_port>
            <input_port name="person">Person to extract gestures from</input_port>
        </SubTree>
        <SubTree ID="StrawberryInfoLog">
            <input_port name="string_1">First part of the console print text. Add whitespaces at the end if needed</input_port>
            <input_port name="string_2">Second part of the console print text.</input_port>
        </SubTree>
        <Action ID="StrawberryMonitorASR">
            <input_port default="0" name="consume_msgs" type="bool">Should messages be consumed?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Subscriber callback queue size</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::ASRResult_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="topic" type="std::string">Topic to subscribe</input_port>
        </Action>
        <Action ID="StrawberryMonitorDialogue">
            <input_port default="0" name="consume_msgs" type="bool">Should messages be consumed?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Subscriber callback queue size</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::DialogResult_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="topic" type="std::string">Topic to subscribe</input_port>
        </Action>
        <Action ID="StrawberryMonitorGesture">
            <input_port default="0" name="consume_msgs" type="bool">Should messages be consumed?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Subscriber callback queue size</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::Gesture_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="topic" type="std::string">Topic to subscribe</input_port>
        </Action>
        <Action ID="StrawberryMonitorHandFeatures">
            <input_port default="0" name="consume_msgs" type="bool">Should messages be consumed?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Subscriber callback queue size</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::HandFeatures_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="topic" type="std::string">Topic to subscribe</input_port>
        </Action>
        <Action ID="StrawberryMonitorHands">
            <input_port default="0" name="consume_msgs" type="bool">Should messages be consumed?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Subscriber callback queue size</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::Hands_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="topic" type="std::string">Topic to subscribe</input_port>
        </Action>
        <Action ID="StrawberryMonitorPeople">
            <input_port default="0" name="consume_msgs" type="bool">Should messages be consumed?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Subscriber callback queue size</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::People_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="topic" type="std::string">Topic to subscribe</input_port>
        </Action>
        <Action ID="StrawberryMonitorWeather">
            <input_port default="0" name="consume_msgs" type="bool">Should messages be consumed?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Subscriber callback queue size</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::WeatherInfo_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="topic" type="std::string">Topic to subscribe</input_port>
        </Action>
        <SubTree ID="StrawberryOverrideDialogSessionEntity">
            <input_port name="entities">Serialized JSON with keys as entity values and values as coma-separated synonym strings</input_port>
            <input_port name="entity_name">Name of the Entity type to override entities. Must be one of those received from topic /strawberry/dialog_entity_types_list.</input_port>
            <input_port name="person_id">Unique ID of the person with white the event is associated</input_port>
            <output_port name="session_entities">List of entities available on this session</output_port>
        </SubTree>
        <Action ID="StrawberryPublishWeatherInfoByCoordinates">
            <input_port name="latitude" type="float">Auto-generated field from strawberry_ros_msgs::WeatherInfoByCoordinatesRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="longitude" type="float">Auto-generated field from strawberry_ros_msgs::WeatherInfoByCoordinatesRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::WeatherInfoByCoordinatesResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="StrawberryPublishWeatherInfoByPlacename">
            <input_port name="placename" type="std::string">Auto-generated field from strawberry_ros_msgs::WeatherInfoByPlacenameRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::WeatherInfoByPlacenameResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <SubTree ID="StrawberryRecordAudioAndWait">
            <input_port name="duration">Recording duration</input_port>
            <output_port name="file_name">Result audio file name</output_port>
            <input_port name="file_path">Folder where the audio will be saved</input_port>
            <output_port name="success">True if the recording was a success</output_port>
        </SubTree>
        <SubTree ID="StrawberryRemoveDialogEntity">
            <input_port default="0" name="auto_expansion">Enable / disable ML auto-expansion [1 / 0].</input_port>
            <input_port name="entity_name">Name of the Entity type. Must be one of those received from topic /strawberry/dialog_entity_types_list.</input_port>
            <input_port default="0" name="fuzzy_extraction">Enable / disable fuzzy extraction of entities [1 / 0]</input_port>
            <input_port default="KIND_MAP" name="kind">Kind of the Entity type. Must be one of: KIND_MAP, KIND_LIST, KIND_REGEXP. Defaults to KIND_MAP.</input_port>
        </SubTree>
        <SubTree ID="StrawberryRemoveDialogSessionEntity">
            <input_port name="entity_name">Name of the Entity type to remove entities. Must be one of those received from topic /strawberry/dialog_entity_types_list.</input_port>
            <input_port name="person_id">Unique ID of the person with white the event is associated</input_port>
            <output_port name="session_entities">List of entities available on this session</output_port>
        </SubTree>
        <Action ID="StrawberryResetConversation">
            <input_port name="person_id" type="unsigned int">Auto-generated field from strawberry_ros_msgs::ResetConversationRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::ResetConversationResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <SubTree ID="StrawberryResetDialogConversation">
            <input_port name="person_id">Person ID which conversation must be reset</input_port>
            <output_port name="result_msg">Dialog reset result text message</output_port>
            <output_port name="success">If dialog module was reset successfully</output_port>
        </SubTree>
        <SubTree ID="StrawberryResetPersonConversation">
            <input_port name="person">Person to reset conversation</input_port>
        </SubTree>
        <SubTree ID="StrawberrySetDialogEvent">
            <input_port name="event_name"/>
            <input_port name="parameters">JSON List of keys and values</input_port>
            <input_port name="person_id"/>
            <output_port name="result">DialogResult as JSON</output_port>
            <output_port name="success"/>
        </SubTree>
        <SubTree ID="StrawberrySetDialogTheme">
            <input_port name="agent">Name of agent for conversation</input_port>
        </SubTree>
        <Action ID="StrawberrySetDialogueAgent">
            <input_port name="selected_agent" type="std::string">Auto-generated field from strawberry_ros_msgs::SetAgentRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::SetAgentResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="StrawberrySetSpeechTarget">
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::SetSpeechTargetResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
            <input_port name="target" type="int">Auto-generated field from strawberry_ros_msgs::SetSpeechTargetRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <Action ID="StrawberrySetStartAudioRecording">
            <input_port name="file_path" type="std::string">Auto-generated field from strawberry_ros_msgs::StartAudioRecordingRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="file_prefix" type="std::string">Auto-generated field from strawberry_ros_msgs::StartAudioRecordingRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::StartAudioRecordingResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="StrawberrySetStartLearningFace">
            <input_port name="blocking" type="bool">Flag to wait for the training result</input_port>
            <input_port name="iterations" type="unsigned int">Number of iterations to train the face</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::FaceLearningResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
            <input_port name="target_name" type="std::string">Name for the new trained face</input_port>
        </Action>
        <Action ID="StrawberrySetStartLearningFaceByTopic">
            <input_port name="img_topic_name" type="std::string">Compressed image topic name</input_port>
            <input_port name="iterations" type="unsigned int">Number of iterations to train the face</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::FaceLearningByTopicResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
            <input_port name="target_name" type="std::string">Name for the new trained face</input_port>
        </Action>
        <Action ID="StrawberrySetStopAudioRecording">
            <input_port name="file_name" type="std::string">Auto-generated field from strawberry_ros_msgs::StopAudioRecordingRequest_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::StopAudioRecordingResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <SubTree ID="StrawberryStartAudioRecording">
            <output_port name="file_name">Result audio file name</output_port>
            <input_port name="file_path">Folder where the audio file will be saved</input_port>
            <output_port name="success">True if the audio file recording started correctly</output_port>
        </SubTree>
        <SubTree ID="StrawberryStopAudioRecording">
            <input_port name="file_name">Name of the audio file recording to be stopped</input_port>
            <output_port name="success">True if it was stopped correctly</output_port>
        </SubTree>
        <SubTree ID="StrawberryTrainNewFace">
            <input_port default="1" name="blocking">True to call the trainging service and wait for the training result. False to call it and not wait</input_port>
            <input_port name="iterations">Number ot iterations to train the face</input_port>
            <output_port name="success">Result of training process if blocking was set to True. Otherwise, it will be always true if simply the service was called correclty</output_port>
            <input_port name="target_name">Name for the trained face</input_port>
        </SubTree>
        <SubTree ID="StrawberryTrainNewFaceByTopic">
            <input_port name="image_topic_name">Compressed image topic to use to train the face. It can be different than strawberry-ros-faces input image topics</input_port>
            <input_port default="0" name="iterations">Number of iterations to train the face. 0 to use the default value</input_port>
            <output_port name="success">Training result. True if trained successfully and false otherwise</output_port>
            <input_port name="target_name">Name for the trained face</input_port>
        </SubTree>
        <Action ID="StrawberryTriggerDialogueEvent">
            <input_port name="event_name" type="std::string">Name of the event to trigger</input_port>
            <input_port name="parameters" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized JSON with keys as parameter names and values as parameter values</input_port>
            <input_port name="person_id" type="unsigned int">Unique ID of the person with white the event is associated</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::TriggerDialogEventResponse_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="service" type="std::string">ROS service name</input_port>
        </Action>
        <Action ID="TagCommandVerbLookupInfo">
            <input_port default="getTagVerb" name="service" type="std::string">ROS service name</input_port>
            <input_port name="tag" type="std_msgs::String">tag</input_port>
            <output_port name="tag_verb" type="std_msgs::String">tag verb</output_port>
        </Action>
        <SubTree ID="TalkingRoomPublishLogTopic">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="data">Message to publish</input_port>
        </SubTree>
        <SubTree ID="TeleconferenceOFF">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <SubTree ID="TeleconferenceON">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <SubTree ID="TeleconferenceTest">
            <input_port default="true" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <Action ID="TextCleanupApiCallAction">
            <input_port name="action" type="std::string">Actionlib action server name</input_port>
            <input_port name="sentence" type="std::string">user sentence</input_port>
            <output_port name="serialized_feedback" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetPersonWakeUpWordFeedback_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="serialized_result" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::GetPersonWakeUpWordResult_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="state" type="actionlib::SimpleClientGoalState">Actionlib reported state</output_port>
        </Action>
        <Action ID="UnityProjectorCommandActivateDisplay">
            <input_port name="display_number" type="int">Display to activate</input_port>
            <input_port default="0" name="latch" type="bool">Latch messages?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Internal publisher queue size</input_port>
            <input_port default="/unity_projector/activate_display" name="topic" type="std::string">Topic to publish to</input_port>
        </Action>
        <Action ID="UnityProjectorCommandProfilesConfiguration">
            <input_port name="animation_mode" type="int">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorProfilesConfiguration_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="animation_time" type="float">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorProfilesConfiguration_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="coupled" type="bool">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorProfilesConfiguration_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="display_number" type="int">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorProfilesConfiguration_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="do_animation" type="bool">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorProfilesConfiguration_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port default="0" name="latch" type="bool">Latch messages?</input_port>
            <input_port name="layout_mode" type="int">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorProfilesConfiguration_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Internal publisher queue size</input_port>
            <input_port name="return_default" type="bool">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorProfilesConfiguration_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="topic" type="std::string">Topic to publish to</input_port>
        </Action>
        <Action ID="UnityProjectorCommandSetBackgroundColor">
            <input_port name="A" type="uint">A of RGBA color</input_port>
            <input_port name="B" type="uint">B of RGBA color</input_port>
            <input_port name="G" type="uint">G of RGBA color</input_port>
            <input_port name="R" type="uint">R of RGBA color</input_port>
            <input_port name="animation_time" type="float">time of animation</input_port>
            <input_port name="display_number" type="int">Display to activate</input_port>
            <input_port name="do_animation" type="bool">activate animation</input_port>
            <input_port default="0" name="latch" type="bool">Latch messages?</input_port>
            <input_port name="pattern_file" type="std::string">pattern for background</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Internal publisher queue size</input_port>
            <input_port default="/unity_projector/set_background_color" name="topic" type="std::string">Topic to publish to</input_port>
        </Action>
        <Action ID="UnityProjectorCommandSetChatMessage">
            <input_port name="ipad_ids" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Array with iPad ID of each user registered</input_port>
            <input_port default="0" name="latch" type="bool">Latch messages?</input_port>
            <input_port name="messages" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Array with chat message of each user registered</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Internal publisher queue size</input_port>
            <input_port name="topic" type="std::string">Topic to publish to</input_port>
        </Action>
        <Action ID="UnityProjectorCommandSetDraw">
            <input_port name="draw_tags" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">array of tags associated witht the images</input_port>
            <input_port name="draws" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">sensor_msgs::Image array or image file path array</input_port>
            <input_port name="draws_are_paths" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">true if it is an images array or false if it is an image file paths array</input_port>
            <input_port name="ipad_ids" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">iPad IDs array of the registered users</input_port>
            <input_port default="0" name="latch" type="bool">Latch messages?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Internal publisher queue size</input_port>
            <input_port name="topic" type="std::string">Topic to publish to</input_port>
        </Action>
        <Action ID="UnityProjectorCommandSetMiniCam">
            <input_port name="activate_mini_cam" type="bool">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorSetMiniCam_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port default="0" name="latch" type="bool">Latch messages?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Internal publisher queue size</input_port>
            <input_port name="show_own_cam" type="bool">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorSetMiniCam_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="topic" type="std::string">Topic to publish to</input_port>
        </Action>
        <Action ID="UnityProjectorCommandSetProfiles">
            <input_port name="avatars" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Array with avatar image files (sensor_msgs::Image) or file paths of each user registered</input_port>
            <input_port name="avatars_are_paths" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">true (1) to use file paths array or false (0) to use sensor_msgs::Image array</input_port>
            <input_port name="ipad_ids" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Array with iPad ID of each user registered</input_port>
            <input_port default="0" name="latch" type="bool">Latch messages?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Internal publisher queue size</input_port>
            <input_port name="topic" type="std::string">Topic to publish to</input_port>
            <input_port name="user_names" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Array with the name of the users registered</input_port>
        </Action>
        <Action ID="UnityProjectorCommandSetStaticImage">
            <input_port name="activate_static_image" type="bool">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorSetStaticImage_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="image_file" type="std::string">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorSetStaticImage_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port default="0" name="latch" type="bool">Latch messages?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Internal publisher queue size</input_port>
            <input_port name="topic" type="std::string">Topic to publish to</input_port>
        </Action>
        <Action ID="UnityProjectorCommandSetVideoPlayer">
            <input_port name="activate_video_player" type="bool">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorSetVideoPlayer_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port default="0" name="latch" type="bool">Latch messages?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Internal publisher queue size</input_port>
            <input_port name="topic" type="std::string">Topic to publish to</input_port>
            <input_port name="video_file" type="std::string">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorSetVideoPlayer_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <Action ID="UnityProjectorCommandSetVideoPlayerVolume">
            <input_port default="0" name="latch" type="bool">Latch messages?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Internal publisher queue size</input_port>
            <input_port default="/unity_projector/video_player/volume" name="topic" type="std::string">Topic to publish to</input_port>
            <input_port name="track" type="unsigned int">Video Sound track which volume we want to change. Use 0 as the first and default one</input_port>
            <input_port name="volume" type="float">volume for the video as a float from 0 to 1</input_port>
        </Action>
        <Action ID="UnityProjectorCommandSharedContentViewConfiguration">
            <input_port name="animation_mode" type="unsigned int">animation mode</input_port>
            <input_port name="animation_time" type="float">animation time</input_port>
            <input_port name="display_number" type="unsigned int">display number</input_port>
            <input_port name="do_animation" type="bool">true to do animations</input_port>
            <input_port name="exit_focused_time" type="float">exit focused time</input_port>
            <input_port name="highlight_focused_time" type="float">highlight focused time</input_port>
            <input_port default="0" name="latch" type="bool">Latch messages?</input_port>
            <input_port name="local_users" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">local users</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Internal publisher queue size</input_port>
            <input_port name="remote_users" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">remote users</input_port>
            <input_port name="remove_others_time" type="float">remove others time</input_port>
            <input_port name="resize_focused_time" type="float">resize focused time</input_port>
            <input_port name="topic" type="std::string">Topic to publish to</input_port>
            <input_port name="view_mode" type="unsigned int">view mode</input_port>
        </Action>
        <Action ID="UnityProjectorCommandSharedContentViewFocusOne">
            <input_port name="do_animation" type="bool">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorSharedContentViewFocusOne_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="do_focus" type="bool">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorSharedContentViewFocusOne_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="highlight_a" type="unsigned char">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorSharedContentViewFocusOne_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="highlight_b" type="unsigned char">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorSharedContentViewFocusOne_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="highlight_g" type="unsigned char">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorSharedContentViewFocusOne_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="highlight_r" type="unsigned char">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorSharedContentViewFocusOne_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port default="0" name="latch" type="bool">Latch messages?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Internal publisher queue size</input_port>
            <input_port name="side_selector" type="int">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorSharedContentViewFocusOne_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="topic" type="std::string">Topic to publish to</input_port>
            <input_port name="user_id" type="std::string">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorSharedContentViewFocusOne_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <Action ID="UnityProjectorCommandSharedContentViewShow">
            <input_port default="0" name="latch" type="bool">Latch messages?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Internal publisher queue size</input_port>
            <input_port name="show" type="bool">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorSharedContentViewShow_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="side_selector" type="int">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorSharedContentViewShow_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="topic" type="std::string">Topic to publish to</input_port>
        </Action>
        <Action ID="UnityProjectorCommandShowChat">
            <input_port default="0" name="latch" type="bool">Latch messages?</input_port>
            <input_port name="message_delay" type="float">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorShowChat_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Internal publisher queue size</input_port>
            <input_port name="show_chat" type="bool">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorShowChat_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="show_mode" type="int">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorShowChat_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="topic" type="std::string">Topic to publish to</input_port>
        </Action>
        <Action ID="UnityProjectorCommandShowDraw">
            <input_port name="draw_delay" type="float">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorShowDraw_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="ipad_id_local" type="std::string">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorShowDraw_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="ipad_id_remote" type="std::string">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorShowDraw_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port default="0" name="latch" type="bool">Latch messages?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Internal publisher queue size</input_port>
            <input_port name="show_draw_canvas" type="bool">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorShowDraw_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="show_mode" type="int">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorShowDraw_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="topic" type="std::string">Topic to publish to</input_port>
        </Action>
        <Action ID="UnityProjectorCommandStaticImageConfiguration">
            <input_port name="animation_mode" type="int">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorStaticImageConfiguration_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="animation_time" type="float">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorStaticImageConfiguration_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="coupled" type="bool">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorStaticImageConfiguration_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="display_number" type="int">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorStaticImageConfiguration_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="do_animation" type="bool">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorStaticImageConfiguration_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port default="0" name="latch" type="bool">Latch messages?</input_port>
            <input_port name="position_mode" type="int">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorStaticImageConfiguration_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Internal publisher queue size</input_port>
            <input_port name="return_default" type="bool">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorStaticImageConfiguration_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="size_mode" type="int">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorStaticImageConfiguration_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="topic" type="std::string">Topic to publish to</input_port>
        </Action>
        <Action ID="UnityProjectorCommandVideoPlayerConfiguration">
            <input_port name="animation_time" type="float">Auto-generated field</input_port>
            <input_port name="coupled" type="bool">Auto-generated field</input_port>
            <input_port name="display_number" type="int">Auto-generated field</input_port>
            <input_port name="do_animation" type="bool">Auto-generated field</input_port>
            <input_port name="info_avatar_file" type="std::string">Auto-generated field</input_port>
            <input_port name="info_name" type="std::string">Auto-generated field</input_port>
            <input_port name="info_tag" type="std::string">Auto-generated field</input_port>
            <input_port default="0" name="latch" type="bool">Latch messages?</input_port>
            <input_port name="pose_mode" type="int">Auto-generated field</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Internal publisher queue size</input_port>
            <input_port name="return_default" type="bool">Auto-generated field</input_port>
            <input_port name="show_info" type="bool">Auto-generated field</input_port>
            <input_port name="size_mode" type="int">Auto-generated field</input_port>
            <input_port default="/unity_projector/video_player/configuration" name="topic" type="std::string">Topic to publish to</input_port>
        </Action>
        <Action ID="UnityProjectorCommandWherebyConfiguration">
            <input_port name="animation_time" type="float">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorWherebyConfiguration_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="coupled" type="bool">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorWherebyConfiguration_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="display_number" type="int">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorWherebyConfiguration_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="do_animation" type="bool">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorWherebyConfiguration_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port default="0" name="latch" type="bool">Latch messages?</input_port>
            <input_port name="pose_mode" type="int">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorWherebyConfiguration_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Internal publisher queue size</input_port>
            <input_port name="return_default" type="bool">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorWherebyConfiguration_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="size_mode" type="int">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorWherebyConfiguration_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="topic" type="std::string">Topic to publish to</input_port>
        </Action>
        <Action ID="UnityProjectorCommandWherebyShow">
            <input_port default="0" name="latch" type="bool">Latch messages?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Internal publisher queue size</input_port>
            <input_port name="show_teleconference" type="bool">Auto-generated field from haru_encouraging_mediator_msgs::UnityProjectorWherebyShow_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="topic" type="std::string">Topic to publish to</input_port>
        </Action>
        <Action ID="UnityProjectorConversationApp">
            <input_port name="activate_url" type="bool">Auto-generated field from strawberry_ros_msgs::UnityProjectorSetConversationApp_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="app_name" type="std::string">Auto-generated field from strawberry_ros_msgs::UnityProjectorSetConversationApp_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port default="0" name="latch" type="bool">Latch messages?</input_port>
            <input_port default="1" name="queue_size" type="unsigned int">Internal publisher queue size</input_port>
            <input_port name="topic" type="std::string">Topic to publish to</input_port>
            <input_port name="url" type="std::string">Auto-generated field from strawberry_ros_msgs::UnityProjectorSetConversationApp_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <SubTree ID="UnityProjectorGetVideoFinished">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <output_port default="unity_video_finished" name="video_finished">True if the video being played has finished, false otherwise</output_port>
        </SubTree>
        <SubTree ID="UnityProjectorGetVideoFinished_2">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <output_port name="video2_finished"/>
        </SubTree>
        <SubTree ID="UnityProjectorHideChat"/>
        <SubTree ID="UnityProjectorHideDraw"/>
        <SubTree ID="UnityProjectorHideImage"/>
        <SubTree ID="UnityProjectorHideImage_2"/>
        <SubTree ID="UnityProjectorHideProfiles"/>
        <SubTree ID="UnityProjectorSetChatMessage">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="ipad_ids">ID of iPads sending the messages</input_port>
            <input_port name="messages">Messages sent to show in the chat</input_port>
        </SubTree>
        <SubTree ID="UnityProjectorSetChatMessageRemote">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="ipad_ids">ID of iPads sending the messages</input_port>
            <input_port name="messages">Messages sent to show in the chat</input_port>
        </SubTree>
        <SubTree ID="UnityProjectorSetDraw">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="draws">Images array (sensor_msgs::Image[]) or path to imgs array (std_msgs::String[]) to show in the projector</input_port>
            <input_port default="false" name="draws_are_paths">true if it is an image or false if it is a path</input_port>
            <input_port name="image_tags">tags associated with images (std_msgs::String[])</input_port>
            <input_port name="ipad_ids">IDs of iPads that sent the images (std_msgs::String[])</input_port>
        </SubTree>
        <SubTree ID="UnityProjectorSetDrawRemote">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="draws">Images array (sensor_msgs::Image[]) or path to imgs array (std_msgs::String[]) to show in the projector</input_port>
            <input_port default="false" name="draws_are_paths">true if it is an image or false if it is a path</input_port>
            <input_port name="ipad_ids">IDs of iPads that sent the images (std_msgs::String[])</input_port>
        </SubTree>
        <SubTree ID="UnityProjectorSetProfiles">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="avatars">Array with avatars images (sensor_msgs::Image) or file paths</input_port>
            <input_port default="false" name="avatars_are_paths">true to use file paths or false to use the images</input_port>
            <input_port name="ipad_ids">Array with iPad IDs</input_port>
            <input_port name="user_names">Array with user names</input_port>
        </SubTree>
        <SubTree ID="UnityProjectorSetProfilesRemote">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="avatars">Array with avatars images (sensor_msgs::Image) or file paths</input_port>
            <input_port default="false" name="avatars_are_paths">true to use file paths or false to use the images</input_port>
            <input_port name="ipad_ids">Array with iPad IDs</input_port>
            <input_port name="user_names">Array with user names</input_port>
        </SubTree>
        <SubTree ID="UnityProjectorShowChat">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port default="1" name="show_mode">Projector show mode: 1 (only local), 2 (only remote) or 3 (both).</input_port>
            <input_port default="15.0" name="time_between_msgs">Time to waiting before showing a new message [seconds]</input_port>
        </SubTree>
        <SubTree ID="UnityProjectorShowDraw">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port default="3" name="draw_delay">Seconds between each image (local and remote) to be displayed</input_port>
            <input_port name="ipad_id_local">Local iPad ID of draw to show in the projector</input_port>
            <input_port name="ipad_id_remote">Remote iPad ID of draw to show in the projector</input_port>
            <input_port default="1" name="show_mode">Projector show mode: 1 (only local), 2 (only remote) or 3 (both).</input_port>
        </SubTree>
        <SubTree ID="UnityProjectorShowImage">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="image_file">Name of the image to show</input_port>
        </SubTree>
        <SubTree ID="UnityProjectorShowImage_2">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="image_file2"/>
        </SubTree>
        <SubTree ID="UnityProjectorShowOffProfiles"/>
        <SubTree ID="UnityProjectorShowProfiles"/>
        <SubTree ID="UnityProjectorShowVideo">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="video_file">Name of the video file to play</input_port>
        </SubTree>
        <SubTree ID="UnityProjectorShowVideoAndWait">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="video_file">Name of the video to play</input_port>
        </SubTree>
        <SubTree ID="UnityProjectorShowVideoAndWait_2">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="video_file2"/>
        </SubTree>
        <SubTree ID="UnityProjectorShowVideo_2">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="video_file"/>
        </SubTree>
        <SubTree ID="UnityProjectorStopVideo"/>
        <SubTree ID="UnityProjectorStopVideo_2"/>
        <SubTree ID="UnityProjectorTeleconferenceMiniCamOFF"/>
        <SubTree ID="UnityProjectorTeleconferenceMiniCamON">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port default="false" name="own_cam">Image to show in minature window. False for the camera on the other side, true for your camera</input_port>
        </SubTree>
        <SubTree ID="UnityProjectorTeleconferenceOFF"/>
        <SubTree ID="UnityProjectorTeleconferenceON"/>
        <SubTree ID="UnityProjectorWherebyCameraOFF"/>
        <SubTree ID="UnityProjectorWherebyCameraON"/>
        <SubTree ID="UnityProjectorWherebyCreateMeeting">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="meeting_duration">The length (duration) of the meeting [minutes]</input_port>
        </SubTree>
        <SubTree ID="UnityProjectorWherebyDeleteMeeting"/>
        <SubTree ID="UnityProjectorWherebyHide"/>
        <SubTree ID="UnityProjectorWherebyMicrophoneOFF"/>
        <SubTree ID="UnityProjectorWherebyMicrophoneON"/>
        <SubTree ID="UnityProjectorWherebySet">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="meeting_url">URL meeting to connect</input_port>
        </SubTree>
        <SubTree ID="UnityProjectyWherebyShow"/>
        <SubTree ID="UserRegistrationStage">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <SubTree ID="VariableDeclaration">
            <input_port default="true" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <SubTree ID="WaitForHaruStartPlayingAudio">
            <input_port default="2000" name="timeout_ms">Timeout in milliseconds to exit and return False</input_port>
        </SubTree>
        <SubTree ID="WaitForPersonToStopTalking">
            <input_port name="checking_time">required silence time S</input_port>
            <input_port name="mode">detection mode</input_port>
            <output_port name="speaking">software output</output_port>
            <input_port name="turn_max_time">max turn time</input_port>
        </SubTree>
        <Action ID="WaitSpeakingStartsAction">
            <input_port name="action" type="std::string">Actionlib action server name</input_port>
            <input_port name="mics_id" type="int">Auto-generated field from strawberry_ros_msgs::WaitSpeakingStartsGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_feedback" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::WaitSpeakingStartsFeedback_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="serialized_result" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::WaitSpeakingStartsResult_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="state" type="actionlib::SimpleClientGoalState">Actionlib reported state</output_port>
            <input_port name="timeout" type="unsigned int">Auto-generated field from strawberry_ros_msgs::WaitSpeakingStartsGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
        </Action>
        <Action ID="WaitSpeakingStopsAction">
            <input_port name="action" type="std::string">Actionlib action server name</input_port>
            <input_port name="hard_timeout" type="unsigned int">Auto-generated field from strawberry_ros_msgs::WaitSpeakingStopsGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <input_port name="mics_id" type="int">Auto-generated field from strawberry_ros_msgs::WaitSpeakingStopsGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="serialized_feedback" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::WaitSpeakingStopsFeedback_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <output_port name="serialized_result" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;">Serialized ROS message [strawberry_ros_msgs::WaitSpeakingStopsResult_&lt;std::allocator&lt;void&gt; &gt;]</output_port>
            <input_port name="soft_timeout" type="unsigned int">Auto-generated field from strawberry_ros_msgs::WaitSpeakingStopsGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>
            <output_port name="state" type="actionlib::SimpleClientGoalState">Actionlib reported state</output_port>
        </Action>
        <SubTree ID="WaitWhileSpeech">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port default="-1" name="mics_id">ID of mics to check for speech. -1 for all available mics</input_port>
            <input_port default="true" name="physical_ack">Do physical acknowledge of hearing the conversation (lookAt and animation)</input_port>
            <input_port default="407;408" name="physical_ack_routine">Single routine to execute in physical acknowledge</input_port>
            <input_port default="300000" name="start_speaking_timeout">Time to wait for a conversation to start [milliseconds]</input_port>
            <input_port default="4000" name="stop_speaking_internal_timeout">Time of &quot;silence&quot; between senteces to know the conversation has finished [milliseconds]</input_port>
            <input_port default="300000" name="stop_speaking_timeout">Time to wait for a conversation to finish [milliseconds]</input_port>
            <input_port default="false" name="verbal_ack">Do verbal acknowledge of hearing the conversation (dialogue)</input_port>
        </SubTree>
        <Action ID="WarnLog">
            <input_port name="message" type="std::string">Message to log</input_port>
        </Action>
        <SubTree ID="WelcomeStage">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
        </SubTree>
        <SubTree ID="WelcomeStage_EP1">
            <inout_port name="__shared_blackboard"/>
        </SubTree>
        <SubTree ID="WhileHaruAudioIsPlaying"/>
        <SubTree ID="WhileHaruLCDIsPlaying"/>
        <SubTree ID="WhileHaruProjectorIsPlaying"/>
        <SubTree ID="WhileHaruRoutineIsPlaying"/>
        <SubTree ID="WhileHaruTTSIsPlaying"/>
        <SubTree ID="idleBehaviour">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port name="screen_height"/>
            <input_port name="screen_horizontal"/>
            <input_port name="screen_proximity"/>
            <input_port name="table_height"/>
            <input_port name="table_horizontal"/>
            <input_port name="table_proximity"/>
        </SubTree>
        <SubTree ID="lookAtChildren">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port default="{table_height}" name="table_height">Coordinate z of children position</input_port>
            <input_port default="{table_horizontal}" name="table_horizontal">Coordinate x of children position</input_port>
            <input_port default="{table_proximity}" name="table_proximity">Coordinate y of children position</input_port>
        </SubTree>
        <SubTree ID="lookAtTV">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <input_port default="{screen_height}" name="screen_height">Coordinate z of TV position</input_port>
            <input_port default="{screen_horizontal}" name="screen_horizontal">Coordinate x of TV position</input_port>
            <input_port default="{screen_proximity}" name="screen_proximity">Coordinate y of TV position</input_port>
        </SubTree>
        <SubTree ID="readTVAndChildrenPositions">
            <input_port default="false" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <output_port default="{screen_height}" name="screen_height">Coordinate z of the screen position</output_port>
            <output_port default="{screen_horizontal}" name="screen_horizontal">Coordinate y of the screen position</output_port>
            <output_port default="{screen_proximity}" name="screen_proximity">Coordinate x of the screen position</output_port>
            <output_port default="{table_height}" name="table_height">Coordinate z of the children position</output_port>
            <output_port default="{table_horizontal}" name="table_horizontal">Coordinate y of the children position</output_port>
            <output_port default="{table_proximity}" name="table_proximity">Coodinate x of the children position</output_port>
        </SubTree>
        <SubTree ID="waitForAnyAsr"/>
    </TreeNodesModel>
    <!-- ////////// -->
</root>

